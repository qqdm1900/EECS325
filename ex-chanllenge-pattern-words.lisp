(defun pattern-words (word trie)
  (let ((lst nil)
         (alpha (elt word 0))
         (rest (subseq word 1)))
    (cond ((null trie) nil)
          ((equal rest "")
           (if (eql #\? alpha)
               (loop for (key . item) in (trie-branch trie)
                     do (push (trie-word (subtrie trie key)) lst))
             (push (trie-word (subtrie trie alpha)) lst)))
          (t (if (eql #\? alpha)
                 (loop for (key . item) in (trie-branch trie)
                       do (setf lst (nconc (pattern-words rest (subtrie trie key)) lst)))
               (setf lst (pattern-words rest (subtrie trie alpha))))))
    (remove nil lst)))

(defun trie-word (trie)
  (if (not (null trie))
      (trie-indicator trie) 
    nil))