;; -*- rcs-header: "$Header: /hope/lwhope1-cam/hope.0/compound/23/LISPexamples/RCS/objc:area-calculator:area-calculator.lisp,v 1.2.2.1 2011/08/24 13:26:19 davef Exp $" -*-

;;----------------------------------------------------------------------------
;;
;; examples/objc/area-calculator.lisp
;;
;; This example demonstrates how to connect a nib file generated by Apple's
;; Interface Builder to a Lisp implementation of an Objective-C class
;; which acts as the MVC controller.
;; To try it, compile and load this file and then execute:
;;
;;      (CL-USER::TEST-AREA-CALCULATOR)
;;
;;----------------------------------------------------------------------------
;; Copyright (c) 1987--2012 LispWorks Ltd. All rights reserved.
;;----------------------------------------------------------------------------


(in-package "CL-USER")

(defvar *area-calculator-nib-file* "AreaCalculator.nib")

(defvar *area-calculator-nib-path*
  ;; Compute the path for development use.
  (current-pathname *area-calculator-nib-file*))


;;----------------------------------------------------------------------------
;; Controller definitions
;;----------------------------------------------------------------------------

(objc:define-objc-class area-controller ()
  ()
  (:objc-class-name "AreaController")
  (:objc-instance-vars
   ("widthField" objc:objc-object-pointer)
   ("heightField" objc:objc-object-pointer)
   ("areaField" objc:objc-object-pointer)))

(objc:define-objc-method ("compute:" :void)
    ((this area-controller)
     (sender objc:objc-object-pointer))
  (declare (ignore sender))
  (let* ((width
          (objc:invoke (objc:objc-object-var-value this "widthField")
                       "floatValue"))
         (height
          (objc:invoke (objc:objc-object-var-value this "heightField")
                       "floatValue"))
         (total (compute-area width height)))
    (objc:invoke (objc:objc-object-var-value this "areaField")
                 "setFloatValue:"
                 total)))


;;----------------------------------------------------------------------------
;; Model definitions
;;----------------------------------------------------------------------------

(defun compute-area (width height)
  (* width height))


;;----------------------------------------------------------------------------
;; The test function
;;----------------------------------------------------------------------------

(defun test-area-calculator ()
  (capi:display (make-instance 'launch-test-area-calculator)))

;; This indirect way of launching the AreaCalculator is needed because
;; the Cocoa operations must be done in the correct thread.  Calling it
;; via a CAPI callback ensures this.
(capi:define-interface launch-test-area-calculator ()
  ()
  (:panes
   (launch capi:push-button
           :text "Launch Area Calculator"
           :selection-callback 'test-area-calculator-in-cocoa-thread
           :callback-type :none))
  (:default-initargs
   :title "Launch Area Calculator"))

;; This must be called from the main thread.
(defun test-area-calculator-in-cocoa-thread (&key nib-path)
  (let* ((file (namestring (or nib-path *area-calculator-nib-path*)))
         ;; This NIB is set up to expect NSApplication as its owner.
         (owner (objc:invoke "NSApplication" "sharedApplication"))
         (controller (objc:invoke (objc:invoke "NSWindowController"
                                               "alloc")
                                  "initWithWindowNibPath:owner:"
                                  file
                                  owner)))
    (objc:invoke controller "showWindow:" nil)))

;; This function is for use only in a standalone application.  See
;; deliver.lisp.
(defun area-calculator-main ()
  (unless (eq mp:*main-process* (mp:get-current-process))
    (error "This main function can only be called from the main thread."))
  (objc:ensure-objc-initialized
   :modules
   '("/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation"
     "/System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa"))
  (objc:make-autorelease-pool)
  (let ((app (objc:invoke "NSApplication" "sharedApplication")))
    (test-area-calculator-in-cocoa-thread
     :nib-path (objc:invoke-into 'string
                                 (objc:invoke "NSBundle" "mainBundle")
                                 "pathForResource:ofType:"
                                 *area-calculator-nib-file* nil))
    (objc:invoke app "run")))

