<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="corba.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 6.4.2  Implementing the servant methods
</TITLE>

<LINK REL="next" HREF="corba-55.htm" TYPE="text/html">
<LINK REL="prev" HREF="corba-53.htm" TYPE="text/html">
<LINK REL="up" HREF="corba-52.htm" TYPE="text/html">
<LINK REL="top" HREF="corba.htm" TYPE="text/html">
<LINK REL="contents" HREF="corba-2.htm" TYPE="text/html">
<LINK REL="index" HREF="corba-68.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt <A HREF="corba.htm">Developing Component Software with CORBA</A> &gt <A HREF="corba-48.htm">6 The Bank Server</A> &gt <A HREF="corba-52.htm">6.4  Implementing the bank server</A><BR><BR>
</DIV><A HREF="corba-55.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="corba-53.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="corba-52.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="corba.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="corba-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="corba-68.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H3 CLASS="FM2Heading">
<A NAME="pgfId-853279"></A>6.4.2  <A NAME="marker-853937"></A><A NAME="marker-853955"></A>Implementing the servant methods</H3>
<P CLASS="Body">
<A NAME="pgfId-853280"></A>The next step in implementing the server is to define methods, specialized on the implementation classes, for each of the protocol functions corresponding to an IDL attribute or operation.</P>
<P CLASS="Body">
<A NAME="pgfId-853281"></A>Implementing a protocol function boils down to defining a concrete method for that function that specializes on the implementation class of its target object. Recall that the target object of a protocol function is the first parameter to that function.</P>
<P CLASS="Body">
<A NAME="pgfId-853282"></A>We can now present the implementations of the protocol functions. The <CODE CLASS="Code">
op:name</CODE>
 method corresponding to the <CODE CLASS="Code">
name</CODE>
 attribute is automatically generated by the IDL compiler to reference a slot <CODE CLASS="Code">
op:name</CODE>
 in the class that takes the <CODE CLASS="Code">
initarg :name</CODE>
 to initialize it. The same rules apply to <CODE CLASS="Code">
op:balance</CODE>
.</P>
<P CLASS="Body">
<A NAME="pgfId-853285"></A>The <CODE CLASS="Code">
op:credit</CODE>
 method on an <CODE CLASS="Code">
Account</CODE>
 increments the record's balance field by executing a database update statement:</P>
<PRE CLASS="Code-first"><A NAME="pgfId-853286"></A>(corba:define-method op:credit ((self account-implementation) amount)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853287"></A>  (with-slots (op:name bank op:balance) self</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853288"></A>    (with-slots (connection) bank</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853289"></A>      (let ((old-balance (lookup-row-value op:name </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853290"></A>                         connection :balance)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853291"></A>        (update-database-row op:name connection </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853292"></A>                             :balance (setf op:balance</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853293"></A>                                    (+ old-balance amount)))))))</PRE>
<P CLASS="Body">
<A NAME="pgfId-853294"></A>The <CODE CLASS="Code">
op:debit</CODE>
 method on an <CODE CLASS="Code">
Account</CODE>
 executes a database update statement that decrements the record's <CODE CLASS="Code">
balance</CODE>
 field, provided the balance exceeds the desired amount:</P>
<PRE CLASS="Code-first"><A NAME="pgfId-853295"></A>(corba:define-method op:debit ((self account-implementation) amount)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853296"></A>  (with-slots (op:name bank op:balance) self</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853297"></A>    (with-slots (connection) bank</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853298"></A>      (let ((old-balance op:balance))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853299"></A>        (if (&lt; old-balance amount)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853300"></A>            (error 'BankingDemo:Account/Refusal </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853301"></A>                   :reason (format nil </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853302"></A>                               &quot;Can't debit &#126;A because the </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853303"></A>                               balance is &#126;A.&quot; </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853304"></A>                              amount old-balance))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853305"></A>          (update-database-row </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853859"></A>             op:name connection </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853306"></A>             :balance (setf op:balance (- </PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-853307"></A>                                  old-balance amount))))))))</PRE>
<P CLASS="Body">
<A NAME="pgfId-853308"></A>The <CODE CLASS="Code">
op:limit</CODE>
 method is automatically generated, as it is also an attribute. </P>
<P CLASS="Body">
<A NAME="pgfId-853739"></A>Because we defined <CODE CLASS="Code">
checkingAccount</CODE>
-servant to inherit from <BR>
<CODE CLASS="Code">
account-servant</CODE>
, there is no need to re-implement the <CODE CLASS="Code">
op:credit</CODE>
 method for this implementation class. However, we do want to define a specialized <CODE CLASS="Code">
op:debit</CODE>
 method on <CODE CLASS="Code">
checkingAccount</CODE>
, to reflect that a checking account can be overdrawn up to its limit: </P>
<PRE CLASS="Code-first"><A NAME="pgfId-853740"></A>(corba:define-method op:debit (</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853741"></A>                    (self checkingAccount-implementation) amount)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853311"></A>  (with-slots (op:name bank op:balance) self</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853312"></A>    (with-slots (connection) bank</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853313"></A>      (let ((old-balance (lookup-row-value op:name </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853314"></A>                          connection :balance))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853315"></A>            (limit (lookup-row-value op:name connection :limit)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853316"></A>        (if (&lt; (+ old-balance limit) amount)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853317"></A>            (error 'BankingDemo:Account/Refusal </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853318"></A>                   :reason (format nil &quot;Can't debit &#126;A because the</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853319"></A>                                    balance is &#126;A (limit is &#126;A).&quot; </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853320"></A>                                   amount old-balance limit))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853321"></A>          (update-database-row op:name connection </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853322"></A>                               :balance (setf op:balance (- </PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-853323"></A>                                  old-balance amount))))))))</PRE>
<P CLASS="Body">
<A NAME="pgfId-853324"></A>The <CODE CLASS="Code">
BankingDemo</CODE>
 bank <CODE CLASS="Code">
op:name</CODE>
 method returns the value of the bank's <CODE CLASS="Code">
op:name</CODE>
 slot and is automatically generated. </P>
<P CLASS="Body">
<A NAME="pgfId-853325"></A>The <CODE CLASS="Code">
op:openAccount</CODE>
 method on <CODE CLASS="Code">
Bank</CODE>
 illustrates the raising of CORBA user exceptions: </P>
<PRE CLASS="Code-first"><A NAME="pgfId-853326"></A>(corba:define-method op:openAccount ((self bank-implementation)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853327"></A>                                      name)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853328"></A>  (with-slots (connection poa account-impls) self</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853329"></A>    (when (find-database-row name connection)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853330"></A>      (error 'Bankingdemo:Bank/Duplicateaccount))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853331"></A>    (create-database-row name connection)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853332"></A>    (update-database-row name connection :balance 0)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853333"></A>    (let ((new-account (make-instance 'account-implementation</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853334"></A>                                      :name name</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853335"></A>                                      :bank self</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853336"></A>                                      :balance 0)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853337"></A>      (push new-account account-impls)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853338"></A>      (op:narrow 'BankingDemo:Account</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-853339"></A>                 (op:servant_to_reference poa new-account)))))</PRE>
<P CLASS="Body">
<A NAME="pgfId-853340"></A>If the <CODE CLASS="Code">
(find-database-row name connection)</CODE>
 test succeeds, the call to <CODE CLASS="Code">
(error 'Bankingdemo:Bank/Duplicateaccount)</CODE>
 raises a Common Lisp condition. (We omit the definition of <CODE CLASS="Code">
find-database-row</CODE>
, which can be found in the source.) Recall that the condition class <BR>
<CODE CLASS="Code">
BankingDemo:bank/duplicateAccount</CODE>
 corresponds to the IDL <CODE CLASS="Code">
duplicateAccount</CODE>
 exception. The POA that invoked this method in response to a client's request will catch the condition and send the <CODE CLASS="Code">
duplicateAccount</CODE>
 exception back to the client. If there is no existing account for the supplied name, the <CODE CLASS="Code">
op:openAccount</CODE>
 method creates a new record in the database.</P>
<P CLASS="Body">
<A NAME="pgfId-853341"></A>Finally, the method makes a new <CODE CLASS="Code">
servant</CODE>
 of class <CODE CLASS="Code">
account-implementation</CODE>
, registers it with the bank's POA with a call to <CODE CLASS="Code">
op:servant_to_reference</CODE>
, and narrows the resulting object reference to the more specific class <BR>
<CODE CLASS="Code">
BankingDemo:account</CODE>
, the class of object references to <CODE CLASS="Code">
account</CODE>
 objects. </P>
<P CLASS="Body">
<A NAME="pgfId-853342"></A>The <CODE CLASS="Code">
op:openCheckingAccount</CODE>
 method is similar, except that it initializes the <CODE CLASS="Code">
op:limit</CODE>
 field of the new account record with the desired overdraft limit and registers a new servant of class <CODE CLASS="Code">
checkingAccount-implementation</CODE>
, returning an object reference of class <CODE CLASS="Code">
BankingDemo:checkingAccount</CODE>
:</P>
<PRE CLASS="Code-first"><A NAME="pgfId-853343"></A>(corba:define-method op:openCheckingAccount (</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853344"></A>                           (self bank-implementation) name limit)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853345"></A>  (with-slots (connection poa account-impls) self</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853346"></A>    (when (find-database-row name connection)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853347"></A>      (error 'Bankingdemo:Bank/Duplicateaccount))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853348"></A>    (create-database-row name connection)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853349"></A>    (update-database-row name connection :balance 0 :limit limit)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853350"></A>    (let ((new-account (make-instance </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853351"></A>                         'checkingaccount-implementation</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853352"></A>                                      :name name</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853353"></A>                                      :bank self</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853354"></A>                                      :balance 0</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853355"></A>                                      :limit limit)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853356"></A>      (push new-account account-impls)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853357"></A>      (op:narrow 'Bankingdemo:Checkingaccount</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-853358"></A>                 (op:servant_to_reference poa new-account)))))</PRE>
<P CLASS="Body">
<A NAME="pgfId-853359"></A>The <CODE CLASS="Code">
op:retrieveAccount</CODE>
 method uses the <CODE CLASS="Code">
name</CODE>
 parameter to find a database row of the given name. If the query returns nil, indicating that there is no record with that name, the method raises the CORBA user exception <CODE CLASS="Code">
nonExistentAccount</CODE>
 by signalling the corresponding Common Lisp error. </P>
<P CLASS="Body">
<A NAME="pgfId-853360"></A>Otherwise, the method uses the value of the <CODE CLASS="Code">
op:limit</CODE>
 field to distinguish whether the account is an account or a current account, creating a new servant of the appropriate class: </P>
<PRE CLASS="Code-first"><A NAME="pgfId-853361"></A>(corba:define-method op:retrieveAccount ((self </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853362"></A>                                       bank-implementation) name)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853363"></A>  (with-slots (connection poa account-impls) self</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853364"></A>    (unless (find-database-row name connection)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853365"></A>      (error 'Bankingdemo:Bank/NonExistentAccount))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853366"></A>    (let ((limit (lookup-row-value name connection :limit))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853367"></A>          (balance (lookup-row-value name connection :balance)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853368"></A>      (if (not limit)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853369"></A>          (let ((account (make-instance 'account-implementation</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853370"></A>                        :name name :bank self :balance balance)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853371"></A>            (push account account-impls)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853372"></A>            (op:narrow 'BankingDemo:Account</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853373"></A>                       (op:servant_to_reference</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853374"></A>                        poa</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853375"></A>                        account)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853376"></A>        (let ((account (make-instance </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853377"></A>                         'checkingaccount-implementation </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853378"></A>                                      :name name</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853379"></A>                                      :bank self</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853380"></A>                                      :balance balance</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853381"></A>                                      :limit limit)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853382"></A>          (push account account-impls)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853383"></A>          (op:narrow 'Bankingdemo:Checkingaccount</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853384"></A>                     (op:servant_to_reference</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853385"></A>                      poa</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-853386"></A>                      account)))))))</PRE>
<P CLASS="Body">
<A NAME="pgfId-853387"></A>Finally, the <CODE CLASS="Code">
closeAccount</CODE>
 removes the record of an account from the database by executing <CODE CLASS="Code">
delete-database-row</CODE>
 call:</P>
<PRE CLASS="Code-first"><A NAME="pgfId-853388"></A>(corba:define-method op:closeaccount </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853389"></A>    ((self bank-implementation) account)   </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853390"></A>  (with-slots (connection poa account-impls) self     </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853391"></A>    (let ((servant (op:reference_to_servant poa account)))       </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853392"></A>      (op:deactivate_object poa (op:reference_to_id poa account))       </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853393"></A>      (removef account-impls servant)       </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-853394"></A>      (with-slots (op:name) servant         </PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-853395"></A>         (delete-database-row op:name connection))))</PRE>
<P CLASS="Body">
<A NAME="pgfId-853396"></A>Note that we need to de-reference the object reference account that is passed in as the parameter of the <CODE CLASS="Code">
op:closeAccount</CODE>
 operation, using a call to the <CODE CLASS="Code">
op:reference_to_servant</CODE>
 operation of the POA. </P>
<P CLASS="Body">
<A NAME="pgfId-853397"></A>Here, we make implicit use of our knowledge that, in our application, the server only encounters object references registered with its local POA. This assumption is not true in general.</P>
<HR>
<ADDRESS>Developing Component Software with CORBA - 29 Jul 2010</ADDRESS>
<P><A HREF="corba-55.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="corba-53.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="corba-52.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="corba.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="corba-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="corba-68.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
