<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="fli.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 define-c-struct
</TITLE>

<LINK REL="next" HREF="fli-86.htm" TYPE="text/html">
<LINK REL="prev" HREF="fli-84.htm" TYPE="text/html">
<LINK REL="up" HREF="fli-70.htm" TYPE="text/html">
<LINK REL="top" HREF="fli.htm" TYPE="text/html">
<LINK REL="contents" HREF="fli-2.htm" TYPE="text/html">
<LINK REL="index" HREF="fli-216.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="fli.htm">LispWorks Foreign Language Interface User Guide and Reference Manual</A> &gt; <A HREF="fli-70.htm">5 Function and Macro Reference</A><BR><BR>
</DIV><A HREF="fli-86.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="fli-84.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="fli-70.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="fli.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="fli-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="fli-216.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H4 CLASS="REntry">
<A NAME="pgfId-896117"></A><A NAME="26956"></A>define-c-struct<A NAME="marker-998706"></A></H4>
<DIV>
<H5 CLASS="REntry-type">
<A NAME="pgfId-896118"></A>Macro</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-942179"></A>Summary</H5>
<P CLASS="RBody">
<A NAME="pgfId-942180"></A>Defines a FLI structure type specifier corresponding to the C <CODE CLASS="Code">
struct</CODE>
 type.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-898174"></A>Package</H5>
<P CLASS="RSignature">
<A NAME="pgfId-898175"></A>fli</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-896119"></A>Signature</H5>
<P CLASS="RSignature">
<A NAME="pgfId-896120"></A>define-c-struct <EM CLASS="Variable">
name-and-options</EM>
 &amp;rest <EM CLASS="Variable">
descriptions</EM>
 =&gt; <EM CLASS="Variable">
list</EM>
</P>
<P CLASS="RSignature">
<A NAME="pgfId-1317259"></A><EM CLASS="Variable">
name-and-options</EM>
 ::=  <EM CLASS="Variable">
name</EM>
 | (<EM CLASS="Variable">
name</EM>
 <EM CLASS="Variable">
option</EM>
*)</P>
<P CLASS="RSignature">
<A NAME="pgfId-1317297"></A><EM CLASS="Variable">
option</EM>
 ::= (:foreign-name <EM CLASS="Variable">
string</EM>
)</P>
<P CLASS="RSignature">
<A NAME="pgfId-942435"></A><EM CLASS="Variable">
descriptions</EM>
 ::= {<EM CLASS="Variable">
slot-description</EM>
 | <EM CLASS="Variable">
byte-packing</EM>
}*</P>
<P CLASS="RSignature">
<A NAME="pgfId-1289858"></A><EM CLASS="Variable">
slot-description</EM>
 ::= {<EM CLASS="Variable">
slot-name</EM>
 | (<EM CLASS="Variable">
slot-name</EM>
 <EM CLASS="Variable">
slot-type</EM>
)}</P>
<P CLASS="RSignature">
<A NAME="pgfId-1289921"></A><EM CLASS="Variable">
byte-packing</EM>
 ::= (:byte-packing <EM CLASS="Variable">
nbytes</EM>
)</P>
<P CLASS="RSignature">
<A NAME="pgfId-1289968"></A><EM CLASS="Variable">
nbytes</EM>
 ::= integer</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917836"></A>Arguments</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1317273"></A><EM CLASS="Variable">
name</EM>
</P>
<P CLASS="RDescription-C">A symbol naming the new structure type specifier</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1317370"></A><EM CLASS="Variable">
string</EM>
</P>
<P CLASS="RDescription-C">A string specifying the foreign name of the structure.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-942960"></A><EM CLASS="Variable">
slot-description</EM>
</P>
<P CLASS="RDescription-C">A symbol, or a list of symbol and type description, naming a slot in the structure</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-942975"></A><EM CLASS="Variable">
slot-name</EM>
</P>
<P CLASS="RDescription-C">A symbol naming the slot</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-942980"></A><EM CLASS="Variable">
slot-type</EM>
</P>
<P CLASS="RDescription-C">The foreign type of the slot</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1290606"></A><EM CLASS="Variable">
byte-packing</EM>
</P>
<P CLASS="RDescription-C">A list specifying byte packing for the subseqent slots</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1290846"></A><EM CLASS="Variable">
nbytes</EM>
</P>
<P CLASS="RDescription-C">The number of 8-bit bytes to pack</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917838"></A>Values</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-942997"></A><EM CLASS="Variable">
list</P>
<P CLASS="RDescription-C"></EM>
The list <CODE CLASS="Code">
(:struct </CODE>
<EM CLASS="Variable">
name</EM>
<CODE CLASS="Code">
)</CODE>
</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917840"></A>Description</H5>
<P CLASS="RBody">
<A NAME="pgfId-945225"></A>The macro <CODE CLASS="Code">
define-c-struct</CODE>
 is used to define a FLI structure type specifier, which corresponds to the C <CODE CLASS="Code">
struct</CODE>
 type. It is a convenience function, as a structure type could also be defined using <A HREF="fli-96.htm#39541" CLASS="XRef">define-foreign-type</A>.</P>
<P CLASS="RBody">
<A NAME="pgfId-917841"></A>A structure is an aggregate type, or collection, of other FLI types. The types contained in a structure are referred to as slots, and can be accessed using the <A HREF="fli-112.htm#33624" CLASS="XRef">foreign-slot-type</A> and <A HREF="fli-113.htm#41440" CLASS="XRef">foreign-slot-value</A> functions.</P>
<P CLASS="RBody">
<A NAME="pgfId-1277473"></A>Some C compilers support pragmas such as</P>
<CODE CLASS="RCode-line">
<A NAME="pgfId-1277474"></A>#pragma pack(1)</CODE>
<P CLASS="RBody">
<A NAME="pgfId-1277475"></A>which causes fields in a structure to be aligned on a byte boundary even if their natural alignment is larger. This can be achieved from Lisp by specifying suitable <EM CLASS="Variable">
byte-packing</EM>
 forms in the structure definition, as in the example below. Each <EM CLASS="Variable">
byte-packing</EM>
 form specifies the packing for each <EM CLASS="Variable">
slot-description</EM>
 that follows it in the <CODE CLASS="Code">
define-c-struct</CODE>
 form. It is important to use the same packing as the C header file containing the foreign type.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1566599"></A>Notes</H5>
<P CLASS="RBody">
<A NAME="pgfId-1566689"></A><EM CLASS="Variable">
string</EM>
, specifying the foreign name, is supported only for documentation purposes.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917842"></A>Example</H5>
<P CLASS="RBody">
<A NAME="pgfId-917843"></A>The first example shows a C structure definition and the corresponding FLI definition:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-1240314"></A>struct a-point {</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240315"></A>  int x;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240316"></A>  int y;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240317"></A>  byte color;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240318"></A>  char ident;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240319"></A>};</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240336"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-946693"></A>(fli:define-c-struct a-point (x :int)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-946702"></A>                             (y :int)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-946703"></A>                             (color :byte)</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-946712"></A>                             (ident :char))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-1240346"></A>The second example shows how you might retrieve data in Lisp from a C function that returns a structure:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-1240613"></A>struct 3dvector</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240614"></A>{</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240615"></A> float x;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240616"></A> float y;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240617"></A> float z;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240618"></A> }</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240619"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240620"></A>static 3dvector* vector;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240621"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240622"></A>3dvector* fn ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240623"></A>{</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240624"></A> return vector;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240625"></A> }</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240626"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240627"></A>(fli:define-c-struct 3dvector</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240628"></A>  (x :float)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240629"></A>  (y :float)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240630"></A>  (z :float))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240631"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240632"></A>(fli:define-foreign-function fn ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240633"></A>  :result-type (:pointer (:struct 3dvector)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240634"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240635"></A>(let ((vector (fn)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1240636"></A>  (fli:with-foreign-slots (x y z) vector</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-1240637"></A>    (values x y z)))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-1284929"></A>Finally an example to illustrate byte packing. This structure will require 4 bytes of memory because the field named <EM CLASS="Variable">
a-short</EM>
 will be aligned on a 2 byte boundary and hence a byte will be wasted after the <EM CLASS="Variable">
a-byte</EM>
 field:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-1284930"></A>(fli:define-c-struct foo ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1284931"></A>  (a-byte (:unsigned :byte))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1284932"></A>  (a-short (:unsigned :short)))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-1284933"></A>After adding the <EM CLASS="Variable">
byte-packing</EM>
 form, the structure will require only 3 bytes:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-1284934"></A>(fli:define-c-struct foo</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1284935"></A>  (:byte-packing 1)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1284936"></A>  (a-byte (:unsigned :byte))</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-1284937"></A>  (a-short (:unsigned :short)))</PRE>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917844"></A>See also</H5>
<P CLASS="RBody">
<A NAME="pgfId-943091"></A><A HREF="fli-84.htm#37299" CLASS="XRef">define-c-enum</A><BR>
<A HREF="fli-86.htm#41629" CLASS="XRef">define-c-typedef</A><BR>
<A HREF="fli-87.htm#30845" CLASS="XRef">define-c-union</A><BR>
<A HREF="fli-96.htm#39541" CLASS="XRef">define-foreign-type</A><BR>
<A HREF="fli-109.htm#20235" CLASS="XRef">foreign-slot-names</A><BR>
<A HREF="fli-112.htm#33624" CLASS="XRef">foreign-slot-type</A><BR>
<A HREF="fli-113.htm#41440" CLASS="XRef">foreign-slot-value</A><BR>
<A HREF="fli-16.htm#40862" CLASS="XRef">FLI Types</A></P>
</DIV>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">LispWorks Foreign Language Interface User Guide and Reference Manual - 7 Dec 2011</I></P>
<P><A HREF="fli-86.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="fli-84.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="fli-70.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="fli.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="fli-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="fli-216.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
