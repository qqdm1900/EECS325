<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="capiref.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 interface
</TITLE>

<LINK REL="next" HREF="capiref-185.htm" TYPE="text/html">
<LINK REL="prev" HREF="capiref-183.htm" TYPE="text/html">
<LINK REL="up" HREF="capiref-4.htm" TYPE="text/html">
<LINK REL="top" HREF="capiref.htm" TYPE="text/html">
<LINK REL="contents" HREF="capiref-2.htm" TYPE="text/html">
<LINK REL="index" HREF="capiref-693.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="capiref.htm">CAPI Reference Manual</A> &gt; <A HREF="capiref-4.htm">1 CAPI Reference Entries</A><BR><BR>
</DIV><A HREF="capiref-185.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-183.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H4 CLASS="REntry">
<A NAME="pgfId-896721"></A><A NAME="30394"></A>interface<A NAME="marker-4141104"></A></H4>
<DIV>
<H5 CLASS="REntry-type">
<A NAME="pgfId-897093"></A>Class</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-896725"></A>Summary</H5>
<P CLASS="RBody">
<A NAME="pgfId-896727"></A>The class <CODE CLASS="Code">
interface</CODE>
 is the top level window class, which contains both menus and a hierarchy of panes and layouts. Interfaces can also themselves be contained within a layout, in which case they appear without their menu bar. </P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-4141045"></A>Package</H5>
<P CLASS="RSignature">
<A NAME="pgfId-4141046"></A>capi</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-896731"></A>Superclasses</H5>
<P CLASS="RSignature">
<A NAME="pgfId-896733"></A><A HREF="capiref-408.htm#40919" CLASS="XRef">simple-pane</A><BR>
<A HREF="capiref-449.htm#12473" CLASS="XRef">titled-object</A></P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-896736"></A>Initargs</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-896738"></A><CODE CLASS="Code">
:title</CODE>
<A NAME="marker-952862"></A></P>
<P CLASS="RDescription-C">The title of the interface.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-3801008"></A><CODE CLASS="Code">
:layout</CODE>
<A NAME="marker-3801007"></A></P>
<P CLASS="RDescription-C">The layout of the interface.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-896740"></A><CODE CLASS="Code">
:menu-bar-items</CODE>
<A NAME="marker-952864"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3800995"></A>The items on the menu bar.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6923078"></A><CODE CLASS="Code">
:auto-menus</CODE>
<A NAME="marker-6923077"></A></P>
<P CLASS="RDescription-C">A flag controlling the automatic addition of system menu objects.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6923080"></A><CODE CLASS="Code">
:create-callback</CODE>
<A NAME="marker-6923079"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6923081"></A>A callback done on creating the window, before display and user interaction.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-3800999"></A><CODE CLASS="Code">
:destroy-callback</CODE>
<A NAME="marker-3800998"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-897141"></A>A callback done on closing the window.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-896742"></A><CODE CLASS="Code">
:confirm-destroy-function</CODE>
<A NAME="marker-952866"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-897145"></A>A function to verify closing of the window.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-897041"></A><CODE CLASS="Code">
:best-x</P>
<P CLASS="RDescription-C"></CODE>
<A NAME="marker-952867"></A>The best <EM CLASS="Variable">
x</EM>
 position for the interface.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-896744"></A><CODE CLASS="Code">
:best-y</P>
<P CLASS="RDescription-C"></CODE>
<A NAME="marker-952868"></A>The best <EM CLASS="Variable">
y</EM>
 position for the interface.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-896745"></A><CODE CLASS="Code">
:best-width</CODE>
<A NAME="marker-952869"></A> </P>
<P CLASS="RDescription-C">The best width of the interface.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-896746"></A><CODE CLASS="Code">
:best-height</P>
<P CLASS="RDescription-C"></CODE>
<A NAME="marker-952870"></A>The best height of the interface.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2754088"></A><CODE CLASS="Code">
:geometry-change-callback</CODE>
<A NAME="marker-2754087"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2754189"></A>A function called when the interface geometry changes.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2754704"></A><CODE CLASS="Code">
:activate-callback</CODE>
<A NAME="marker-2754703"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2754705"></A>A function called when the interface is activated or deactivated.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3862243"></A><CODE CLASS="Code">
:iconify-callback</CODE>
<A NAME="marker-3862230"></A><A NAME="marker-3862242"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3862272"></A>A function called when the interface is iconified or restored.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3862198"></A><CODE CLASS="Code">
:override-cursor</CODE>
<A NAME="marker-3862197"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3862276"></A>A cursor that takes precedence over the cursors of panes inside the interface.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8380126"></A><EM CLASS="Variable">
override-cursor</EM>
 is not supported on Cocoa.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8401338"></A><EM CLASS="Variable">
override-cursor</EM>
 is ignored by <A HREF="capiref-430.htm#26824" CLASS="XRef">text-input-pane</A> on GTK+.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2759358"></A><CODE CLASS="Code">
:message-area</P>
<P CLASS="RDescription-C"></CODE>
<A NAME="marker-2759381"></A>A boolean determining whether the interface has a message area.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2760386"></A><CODE CLASS="Code">
:enable-pointer-documentation</CODE>
<A NAME="marker-2760396"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8521275"></A>A boolean determining whether Pointer Documentation is enabled. </P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8521280"></A><EM CLASS="Variable">
enable-pointer-documentation</EM>
 is supported only on Motif. It is possible to implement equivalent functionality for <A HREF="capiref-275.htm#35026" CLASS="XRef">output-pane</A> and subclasses such as <A HREF="capiref-293.htm#24209" CLASS="XRef">pinboard-layout</A> by using the <EM CLASS="Variable">
focus-callback</EM>
 of <A HREF="capiref-275.htm#35026" CLASS="XRef">output-pane</A>.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8521277"></A><CODE CLASS="Code">
:enable-tooltips</CODE>
<A NAME="marker-8521276"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2760565"></A>A boolean determining whether Tooltip Help is enabled.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2760815"></A><CODE CLASS="Code">
:help-callback</CODE>
<A NAME="marker-2760824"></A><A NAME="marker-2760829"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3919496"></A>A function called when a user gesture requests help.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3919504"></A><CODE CLASS="Code">
:top-level-hook</CODE>
<A NAME="marker-3919502"></A><A NAME="marker-3919503"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6142781"></A>A function called around the top level event handler.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6142784"></A><CODE CLASS="Code">
:external-border</CODE>
<A NAME="marker-6142782"></A><A NAME="marker-6142783"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-5373376"></A>An integer or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-5387835"></A><CODE CLASS="Code">
:initial-focus</CODE>
<A NAME="marker-5387833"></A><A NAME="marker-5387834"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-5387836"></A>A pane, a symbol naming a pane, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-5893381"></A><CODE CLASS="Code">
:display-state</CODE>
<A NAME="marker-5893379"></A><A NAME="marker-5893380"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-5893407"></A>One of the keywords <CODE CLASS="Code">
:normal</CODE>
, <CODE CLASS="Code">
:maximized</CODE>
, <CODE CLASS="Code">
:iconic</CODE>
 and <CODE CLASS="Code">
:hidden</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-5978340"></A><CODE CLASS="Code">
:transparency</CODE>
<A NAME="marker-5978338"></A><A NAME="marker-5978339"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-5978341"></A>A real number in the inclusive range [0,1], used on Cocoa, later versions of Microsoft Windows, and GTK+.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6231057"></A><CODE CLASS="Code">
:window-styles</CODE>
<A NAME="marker-6231055"></A><A NAME="marker-6231056"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6231058"></A>A list of keywords, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8888047"></A><CODE CLASS="Code">
:toolbar-items</CODE>
<A NAME="marker-8888079"></A><A NAME="marker-8888080"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8888092"></A>A list of items for the toolbar.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8888148"></A><CODE CLASS="Code">
:toolbar-states</CODE>
<A NAME="marker-8888146"></A><A NAME="marker-8888147"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8888149"></A>A toolbar state plist.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9077654"></A><CODE CLASS="Code">
:default-toolbar-states</CODE>
<A NAME="marker-9077652"></A><A NAME="marker-9077653"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9077655"></A>A toolbar state plist.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9246153"></A><CODE CLASS="Code">
:pathname</CODE>
<A NAME="marker-9246151"></A><A NAME="marker-9246152"></A><A NAME="marker-9246190"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9246154"></A>A pathname designator.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9272415"></A><CODE CLASS="Code">
:drag-image</CODE>
<A NAME="marker-9272432"></A><A NAME="marker-9272414"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9272416"></A><CODE CLASS="Code">
nil</CODE>
, <CODE CLASS="Code">
t</CODE>
 or an image specifier (that is, a value acceptable as the <EM CLASS="Variable">
id</EM>
 argument of <A HREF="capiref-592.htm#43526" CLASS="XRef">load-image</A>).</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-3919497"></A>Accessors</H5>
<P CLASS="RSignature">
<A NAME="pgfId-9277002"></A><A NAME="marker-9246237"></A>interface-title<BR>
<A NAME="marker-9246239"></A>pane-layout<BR>
<A NAME="marker-9246240"></A>interface-menu-bar-items<BR>
<A NAME="marker-9246241"></A>interface-create-callback<BR>
<A NAME="marker-9246242"></A>interface-destroy-callback<BR>
<A NAME="marker-9246243"></A>interface-confirm-destroy-function<BR>
<A NAME="marker-9246244"></A>interface-geometry-change-callback<BR>
<A NAME="marker-9246245"></A>interface-activate-callback<BR>
<A NAME="marker-9246246"></A>interface-iconify-callback<BR>
<A NAME="marker-9246247"></A>interface-override-cursor<BR>
<A NAME="marker-9246248"></A>interface-message-area<BR>
<A NAME="marker-9246249"></A>interface-pointer-documentation-enabled<BR>
<A NAME="marker-9246250"></A>interface-tooltips-enabled<BR>
<A NAME="marker-9246251"></A>interface-help-callback<BR>
<A NAME="marker-9246252"></A>top-level-interface-external-border<BR>
<A NAME="marker-9246253"></A>top-level-interface-transparency<BR>
<A NAME="marker-9246254"></A>interface-toolbar-items<BR>
<A NAME="marker-9246255"></A>interface-toolbar-states<BR>
<A NAME="marker-9246256"></A>interface-default-toolbar-states<BR>
<A NAME="marker-9246257"></A>interface-<A NAME="marker-9246270"></A>pathname<BR>
<A NAME="marker-9277000"></A>interface-<A NAME="marker-9277001"></A>drag-image</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-9246258"></A>Readers</H5>
<P CLASS="RSignature">
<A NAME="pgfId-6231151"></A><A NAME="marker-6231156"></A>interface-window-styles</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-896756"></A>Description</H5>
<P CLASS="RBody">
<A NAME="pgfId-1422477"></A>Every interface can have a title <EM CLASS="Variable">
title</EM>
 which when it is a top level interface is shown as a title on its window, and when it is contained within another layout is displayed as a decoration (see the class <A HREF="capiref-449.htm#12473" CLASS="XRef">titled-object</A> for more details). </P>
<P CLASS="RBody">
<A NAME="pgfId-1422478"></A>The argument <EM CLASS="Variable">
layout</EM>
 specifies a layout object that contains the children of the interface. To change this layout you can either use the writer <CODE CLASS="Code">
pane-layout</CODE>
, or you can use the layout <A HREF="capiref-424.htm#30881" CLASS="XRef">switchable-layout</A> which allows you to easily switch the currently visible child. </P>
<P CLASS="RBody">
<A NAME="pgfId-896766"></A>The argument <EM CLASS="Variable">
menu-bar-items</EM>
 specifies a list of menus to appear on the interface's menu bar. </P>
<P CLASS="RBody">
<A NAME="pgfId-3801021"></A><EM CLASS="Variable">
auto-menus</EM>
 defaults to <CODE CLASS="Code">
t</CODE>
, which means that an interface may have some automatic menus created by the environment in which it is running (for example the <B CLASS="Button">
Works</B>
 menu in the LispWorks IDE). To switch these automatic menus off, pass  <CODE CLASS="Code">
:auto-menus</CODE>
 <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-896772"></A>When you have an instance of an interface, you can display it either as an ordinary window or as a dialog using respectively <A HREF="capiref-76.htm#40005" CLASS="XRef">display</A> and <A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A>. The CAPI calls <EM CLASS="Variable">
create-callback</EM>
 (if supplied) with the interface as its single argument, after all the widgets have been created but before the interface appears on screen. Then to remove the interface from the display, you use <A HREF="capiref-336.htm#33241" CLASS="XRef">quit-interface</A> and either <A HREF="capiref-136.htm#33351" CLASS="XRef">exit-dialog</A> or <CODE CLASS="Code">
</CODE>
<A HREF="capiref-6.htm#24290" CLASS="XRef">abort-dialog</A> respectively. When the interface is about to be closed, the CAPI calls the <EM CLASS="Variable">
confirm-destroy-function</EM>
 (if there is one) with the interface, and if this function returns non-nil the interface is closed. Once the interface is closed, the <EM CLASS="Variable">
destroy-callback</EM>
 is called with the interface.</P>
<P CLASS="RBody">
<A NAME="pgfId-10011597"></A><B CLASS="Bold">
Note:</B>
 <EM CLASS="Variable">
create-callback</EM>
 should be used only for operations that must be done with the interface already created and cannot be done in <A HREF="capiref-186.htm#50103" CLASS="XRef">interface-display</A>.  Otherwise they should be either done in <CODE CLASS="Code">
initialize-instance</CODE>
 or between your calls to <CODE CLASS="Code">
make-instance</CODE>
 and <A HREF="capiref-76.htm#40005" CLASS="XRef">display</A>. An operation that needs to run after the interface is created but just before displaying the interface as an ordinary window (typical cases are font queries and loading images) can be put in the <A HREF="capiref-186.htm#50103" CLASS="XRef">interface-display</A> <CODE CLASS="Code">
:before</CODE>
 method. An operation that needs to run just after displaying the interface as an ordinary window can be put in the <A HREF="capiref-186.htm#50103" CLASS="XRef">interface-display</A> <CODE CLASS="Code">
:after</CODE>
 method.</P>
<P CLASS="RBody">
<A NAME="pgfId-896779"></A>The interface also accepts a number of hints as to the size and position of the interface for when it is first displayed. The arguments <EM CLASS="Variable">
best-x</EM>
 and <EM CLASS="Variable">
best-y</EM>
 must be the position as an integer or <CODE CLASS="Code">
nil</CODE>
 (meaning anywhere), while the arguments <EM CLASS="Variable">
best-width</EM>
 and <EM CLASS="Variable">
best-height</EM>
 can be any hints accepted by <CODE CLASS="Code">
:visible-max-width</CODE>
 and <CODE CLASS="Code">
:visible-max-height</CODE>
 for elements.</P>
<P CLASS="RBody">
<A NAME="pgfId-5749061"></A><A NAME="marker-5749072"></A>Whether or not an interface window is resizable is indicated as allowed by the window system. For non-resizable windows on Cocoa the interface window's maximize button is disabled and the resize indicator is not shown, and on Microsoft Windows the maximize box is disabled.</P>
<P CLASS="RBody">
<A NAME="pgfId-2754450"></A><EM CLASS="Variable">
geometry-change-callback</EM>
 may be <CODE CLASS="Code">
nil</CODE>
, meaning there is no callback. This is the default value. Otherwise <EM CLASS="Variable">
geometry-change-callback</EM>
 is a function of five arguments: the interface and the geometry. Its signature is:</P>
<P CLASS="RSignature">
<A NAME="pgfId-2754592"></A>geometry-change-callback <EM CLASS="Variable">
interface</EM>
 <EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
 <EM CLASS="Variable">
width</EM>
 <EM CLASS="Variable">
height</EM>
</P>
<P CLASS="RBody">
<A NAME="pgfId-9902659"></A><EM CLASS="Variable">
x</EM>
 and <EM CLASS="Variable">
y</EM>
 are measured from the top-left of the screen rectangle representing the area of the primary monitor (the primary screen rectangle).</P>
<P CLASS="RBody">
<A NAME="pgfId-2755754"></A><EM CLASS="Variable">
activate-callback</EM>
 may be <CODE CLASS="Code">
nil</CODE>
, meaning there is no callback. This is the default value. Otherwise <EM CLASS="Variable">
activate-callback</EM>
 is a function of two arguments: the interface and a boolean <EM CLASS="Variable">
activatep</EM>
 which is true on activation and false on deactivation. Its signature is:</P>
<P CLASS="RSignature">
<A NAME="pgfId-2755755"></A>activate-callback <EM CLASS="Variable">
interface</EM>
 <EM CLASS="Variable">
activatep</EM>
</P>
<P CLASS="RBody">
<A NAME="pgfId-2755774"></A><EM CLASS="Variable">
inconify-callback</EM>
 may be <CODE CLASS="Code">
nil</CODE>
, meaning there is no callback. This is the default value. Otherwise <EM CLASS="Variable">
inconify-callback</EM>
 is a function of two arguments: the interface and a boolean <EM CLASS="Variable">
iconify</EM>
 which is true when <EM CLASS="Variable">
interface</EM>
 is iconified and and false when it is restored. Its signature is:</P>
<P CLASS="RSignature">
<A NAME="pgfId-2755775"></A>iconify-callback <EM CLASS="Variable">
interface</EM>
 <EM CLASS="Variable">
iconifyp</EM>
</P>
<P CLASS="RBody">
<A NAME="pgfId-2759504"></A><EM CLASS="Variable">
override-cursor</EM>
, if non-nil, specifies a cursor that is used instead of the cursor of each pane inside the interface. The default value of <EM CLASS="Variable">
override-cursor</EM>
 is <CODE CLASS="Code">
nil</CODE>
. See below for an example of setting and unsetting the override cursor. <EM CLASS="Variable">
override-cursor</EM>
 is not supported on Cocoa. <EM CLASS="Variable">
override-cursor</EM>
 is ignored by <A HREF="capiref-430.htm#26824" CLASS="XRef">text-input-pane</A> on GTK+.</P>
<P CLASS="RBody">
<A NAME="pgfId-3862322"></A>If <EM CLASS="Variable">
message-area</EM>
 is true, then the interface is created with a message area at the bottom. The text of the message area can be accessed using the <A HREF="capiref-449.htm#12473" CLASS="XRef">titled-object</A> accessor <CODE CLASS="Code">
titled-object-message</CODE>
. The default value of <EM CLASS="Variable">
message-area</EM>
 is <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-2760458"></A><EM CLASS="Variable">
enable-pointer-documentation </EM>
is a boolean controlling whether Pointer Documentation is enabled, on Motif. The default value is <CODE CLASS="Code">
t</CODE>
. The actual action is done by the <EM CLASS="Variable">
help-callback</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-2760804"></A><EM CLASS="Variable">
enable-tooltips </EM>
is a boolean controlling whether Tooltip Help is enabled. The default value is <CODE CLASS="Code">
t</CODE>
. The actual action is done by the <EM CLASS="Variable">
help-callback</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-2760841"></A><EM CLASS="Variable">
help-callback</EM>
<A NAME="marker-6302568"></A> may be <CODE CLASS="Code">
nil</CODE>
, meaning there is no callback. This is the default value. Otherwise <EM CLASS="Variable">
help-callback</EM>
 is a function of four arguments: the interface, the pane inside interface where help is requested, the type of help requested, and the help key of the pane. Its signature is:</P>
<P CLASS="RSignature">
<A NAME="pgfId-2760842"></A>help-callback <EM CLASS="Variable">
interface</EM>
 <EM CLASS="Variable">
pane</EM>
 <EM CLASS="Variable">
type</EM>
 <EM CLASS="Variable">
help-key</EM>
</P>
<P CLASS="RBody">
<A NAME="pgfId-2762192"></A>Here <EM CLASS="Variable">
type</EM>
 can be one of:</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2762688"></A><CODE CLASS="Code">
:tooltip</P>
<P CLASS="RDescription-C"></CODE>
A tooltip is requested. The function needs to return a string to display in the tooltip, or <CODE CLASS="Code">
nil</CODE>
 if no tooltip should be displayed.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2763329"></A><CODE CLASS="Code">
:help</CODE>
</P>
<P CLASS="RDescription-C">The function should display a detailed, asynchronous help. This value is passed when the user presses the <CODE CLASS="Code">
F1</CODE>
 key (not implemented on Cocoa). <CODE CLASS="Code">
:help</CODE>
 is also passed when the user clicks the '?' box in the title bar of a Microsoft Windows dialog with window style <CODE CLASS="Code">
:contexthelp</CODE>
 (see <EM CLASS="Variable">
window-styles</EM>
 below).</P>
<P CLASS="RDescription">
<A NAME="pgfId-8538057"></A>On Motif only, <EM CLASS="Variable">
type</EM>
 can also be one of:</P>
<P CLASS="RDescription">
<A NAME="pgfId-8542226"></A><CODE CLASS="Code">
:pointer-documentation-enter</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8542227"></A>The cursor entered the pane. The function should set the pointer documentation.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8542228"></A><CODE CLASS="Code">
:pointer-documentation-leave</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8542229"></A>The cursor left the pane. The function needs to reset the pointer documentation.</P>
<P CLASS="RBody">
<A NAME="pgfId-2763333"></A><EM CLASS="Variable">
help-key</EM>
 is the <EM CLASS="Variable">
help-key</EM>
 of <EM CLASS="Variable">
pane</EM>
, as described in <A HREF="capiref-126.htm#29333" CLASS="XRef">element</A>. There is an example illustrating <EM CLASS="Variable">
help-callback</EM>
 in <CODE CLASS="Code">
examples/capi/elements/help.lisp</CODE>
 and there is another example below.</P>
<P CLASS="RBody">
<A NAME="pgfId-3923043"></A><EM CLASS="Variable">
top-level-hook</EM>
 can be used on Microsoft Windows and Motif to specify a hook function that is called around the interface's top level event handler. The hook is passed two arguments: a continuation function (with no arguments) and the interface. The hook must call the continuation, which normally does not return. <EM CLASS="Variable">
top-level-hook</EM>
 is designed especially for error handling (see below for an example). It can also be used for other purposes, for instance to bind special variables around the top level function. <CODE CLASS="Code">
:top-level-hook</CODE>
 is not supported on Cocoa.</P>
<P CLASS="RBody">
<A NAME="pgfId-5373402"></A><EM CLASS="Variable">
external-border</EM>
 controls how close to the edge of the screen the interface can be placed with explicit positioning using the <EM CLASS="Variable">
best-x</EM>
, <EM CLASS="Variable">
best-y</EM>
, <EM CLASS="Variable">
best-height</EM>
 and <EM CLASS="Variable">
best-width</EM>
 initargs or implicit positioning when a dialog is centered within its owner. The value <CODE CLASS="Code">
nil</CODE>
 allows the window to be anywhere, on or off the screen. The value 0 allows the window can be anywhere on the screen. If <EM CLASS="Variable">
external-border</EM>
 is a positive integer then the window can be anywhere within <EM CLASS="Variable">
external-border</EM>
 pixels from the edge of the screen. If <EM CLASS="Variable">
external-border</EM>
 is a negative integer then the window be anywhere on the screen or up to <EM CLASS="Variable">
external-border</EM>
 pixels off the edge of the screen. This does not affect whether the use can move the window after it has been displayed. It also does not affect the default positioning of interfaces, where the window system chooses the position.The default value of <EM CLASS="Variable">
external-border</EM>
 is 0.</P>
<P CLASS="RBody">
<A NAME="pgfId-5387857"></A><EM CLASS="Variable">
initial-focus</EM>
 specifies a pane which has the input focus when the interface is first displayed. See <A HREF="capiref-284.htm#37798" CLASS="XRef">pane-initial-focus</A> for more information about the initial focus pane.</P>
<P CLASS="RBody">
<A NAME="pgfId-5893514"></A><EM CLASS="Variable">
display-state</EM>
 controls the initial display of the interface window, as described for <A HREF="capiref-456.htm#top-level-interface-display-state" CLASS="XRef">top-level-interface-display-state</A>.</P>
<P CLASS="RBody">
<A NAME="pgfId-5978410"></A><EM CLASS="Variable">
transparency</EM>
 is the overall transparency of the whole interface, where 0 is fully transparent and 1 is fully opaque. This has no effect on whether the user can click on the window. This is implemented for Cocoa and for Microsoft Windows, excluding Windows 98, Millennium Edition and NT 4.0. It also works on GTK+, provided that GTK+ and the X server support it.  On GTK+ it is supported in version 2.12 and later. The X server needs compositing manager to do it.<CODE CLASS="Code">
:transparency</CODE>
 should only be used for top-level interfaces.</P>
<P CLASS="RBody">
<A NAME="pgfId-6253090"></A><EM CLASS="Variable">
window-styles</EM>
 is a list of keywords controlling various aspects of the top level window's appearance and behavior. Each keyword is supported only on the Window systems explicitly mentioned below. </P>
<P CLASS="RBody">
<A NAME="pgfId-6276647"></A>The following keywords apply to ordinary windows:</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253118"></A><CODE CLASS="Code">
:no-geometry-animation</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6276616"></A>Cocoa: Programmatic changes to window geometry happen without animation.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253119"></A><CODE CLASS="Code">
:hides-on-deactivate-window</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6276629"></A>Cocoa: The window is only visible when the application is the current application.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6276627"></A>Microsoft Windows and GTK+: The window is only visible when it is the active window.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253120"></A><CODE CLASS="Code">
:toolbox</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6276648"></A>Cocoa, Microsoft Windows and GTK+: A window with a small title bar. This window style is used in <A HREF="capiref-88.htm#34485" CLASS="XRef">docking-layout</A>.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253121"></A><CODE CLASS="Code">
:borderless</CODE>
<A NAME="marker-6962599"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6276664"></A>Cocoa, Microsoft Windows, GTK+ and Motif: A window with no external decoration or frame.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6280306"></A><CODE CLASS="Code">
:internal-borderless</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280307"></A>Cocoa and Motif: Remove the default border between the window's edge and its contents.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-10620930"></A>Microsoft Windows: Remove the default border between the window's edge and its contents for dialogs.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253123"></A><CODE CLASS="Code">
:never-iconic</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280310"></A>Cocoa, Microsoft Windows, GTK+ and Motif: The window cannot be minimized.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253124"></A><CODE CLASS="Code">
:movable-by-window-background</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280315"></A>Cocoa and Microsoft Windows: The user can move the window by grabbing at any point not in an inner pane.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253125"></A><CODE CLASS="Code">
:shadowed</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280322"></A>Cocoa: Force a shadow on windows with window style <CODE CLASS="Code">
:borderless</CODE>
. (Other windows have a shadow by default.)</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280320"></A>Windows XP (and later): The window has a shadow.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253126"></A><CODE CLASS="Code">
:shadowless</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280326"></A>Cocoa: The window has no shadow.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253127"></A><CODE CLASS="Code">
:textured-background</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280341"></A>Cocoa: The window has a textured background (like the Finder).</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253128"></A><CODE CLASS="Code">
:always-on-top</CODE>
<A NAME="marker-6302428"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280354"></A>Cocoa, Microsoft Windows and GTK+: The window is always above all other windows. Such a window is also known as a windoid.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253129"></A><CODE CLASS="Code">
:ignores-keyboard-input</CODE>
<A NAME="marker-6302504"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280362"></A>Cocoa and GTK+: The window cannot be given the focus for keyboard input.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253130"></A><CODE CLASS="Code">
:no-character-palette</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280369"></A>Cocoa: The <B CLASS="Button">
Special Characters...</B>
 menu item is not inserted automatically. (This menu item is added to the <B CLASS="Button">
Edit</B>
 menu by default.)</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253131"></A><CODE CLASS="Code">
:motion-events-without-focus</CODE>
<A NAME="marker-6302506"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280375"></A>Cocoa: <A HREF="capiref-275.htm#35026" CLASS="XRef">output-pane</A>s in the window will see <CODE CLASS="Code">
:motion</CODE>
 input model events even if the output pane does not have the focus. This is the same behavior as on Microsoft Windows.</P>
<P CLASS="RBody">
<A NAME="pgfId-6253132"></A>The following keywords are supported in <EM CLASS="Variable">
window-styles</EM>
 when the interface is displayed as a dialog:</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253134"></A><CODE CLASS="Code">
:resizable</CODE>
<A NAME="marker-6302478"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280379"></A>Microsoft Windows: The dialog has a border to allow resizing. (Generally Windows dialogs do not allowing resizing.)</P>
<P CLASS="RDescription">
<A NAME="pgfId-6253091"></A><CODE CLASS="Code">
:contexthelp</CODE>
<A NAME="marker-6302567"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6280388"></A>Microsoft Windows: A '?' box appears in the window's title bar that sends <EM CLASS="Variable">
help-callback</EM>
 type <CODE CLASS="Code">
:help</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8888211"></A>If <EM CLASS="Variable">
toolbar-items</EM>
 is non-nil, then the interface will have a toolbar, which is typically displayed at the top of the window. The value of <EM CLASS="Variable">
toolbar-items</EM>
 is a list of objects of type <A HREF="capiref-452.htm#18981" CLASS="XRef">toolbar-button</A>, <A HREF="capiref-453.htm#35193" CLASS="XRef">toolbar-component</A> or <A HREF="capiref-408.htm#40919" CLASS="XRef">simple-pane</A>, which are items that might be shown on the toolbar. The set of visible items, their order and their appearance is determined by the current <EM CLASS="Variable">
toolbar-state</EM>
, which can be changed if the user customizes the toolbar interactively. Each <A HREF="capiref-452.htm#18981" CLASS="XRef">toolbar-button</A> or <A HREF="capiref-408.htm#40919" CLASS="XRef">simple-pane</A> in the <EM CLASS="Variable">
toolbar-items</EM>
 list (including those within a <A HREF="capiref-453.htm#35193" CLASS="XRef">toolbar-component</A>) should have a <EM CLASS="Variable">
name</EM>
 that is not <CODE CLASS="Code">
eql</CODE>
 to any other item in the list. Each <A HREF="capiref-452.htm#18981" CLASS="XRef">toolbar-button</A> should have <EM CLASS="Variable">
image</EM>
 and <EM CLASS="Variable">
text</EM>
 specified, to control the image and title that is shown for the item. Each <A HREF="capiref-408.htm#40919" CLASS="XRef">simple-pane</A> should have <EM CLASS="Variable">
toolbar-title</EM>
 specified, to control the title that is shown for the item.</P>
<P CLASS="RBody">
<A NAME="pgfId-8888209"></A><EM CLASS="Variable">
toolbar-states</EM>
 is a plist containing information about the state of the toolbar. The user can also change this by customizing the toolbar, so you cannot assume that the value will be the same each time you read it. See <A HREF="capiref-199.htm#72440" CLASS="XRef">interface-toolbar-state</A> for a description of the keys and values in this plist.</P>
<P CLASS="RBody">
<A NAME="pgfId-9077697"></A><EM CLASS="Variable">
default-toolbar-states</EM>
 is a plist containing information about the default state of the toolbar, which you can provide as the suggested toolbar state for the interface. The <CODE CLASS="Code">
:items</CODE>
 key will be used in the Customize dialog as the &quot;default&quot; set of toolbar buttons. If both <EM CLASS="Variable">
default-toolbar-states</EM>
 and <EM CLASS="Variable">
toolbar-states</EM>
 are supplied, then the value of any key in <EM CLASS="Variable">
toolbar-states</EM>
 takes precedence over that of the same key in <EM CLASS="Variable">
default-toolbar-states</EM>
. See <A HREF="capiref-199.htm#72440" CLASS="XRef">interface-toolbar-state</A> for a description of the keys and values in this plist.</P>
<P CLASS="RBody">
<A NAME="pgfId-9246300"></A><EM CLASS="Variable">
pathname</EM>
 specifies the interface pathname. You can get and set this with the accessor <CODE CLASS="Code">
interface-pathname</CODE>
. The pathname may be displayed in some way to the user, depending on the GUI library.</P>
<P CLASS="RBody">
<A NAME="pgfId-9246304"></A>Currently, only Cocoa uses <EM CLASS="Variable">
pathname</EM>
, in two ways:</P>
<UL>
<LI CLASS="RBullet">
<A NAME="pgfId-9246306"></A>It makes the interface display a drag image on the title bar (This is the same image that is set by <CODE CLASS="Code">
interface-drag-image</CODE>
, and the <EM CLASS="Variable">
drag-image</EM>
 takes precedence if it not nil). The user can drag from the drag image, and if there is no <EM CLASS="Variable">
drag-callback</EM>
 or if the <EM CLASS="Variable">
drag-callback</EM>
 returns <CODE CLASS="Code">
:default</CODE>
 it will drag the pathname as a one item in a <CODE CLASS="Code">
:filenames-list</CODE>
. For information about <EM CLASS="Variable">
drag-callback</EM>
,  see <A HREF="capiref-408.htm#40919" CLASS="XRef">simple-pane</A>'s description of <CODE CLASS="Code">
:drag-callback</CODE>
 and <CODE CLASS="Code">
simple-pane-drag-callback</CODE>
.</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-9246314"></A>The context menu (invoked by right-mouse-click) on the drag image or on the title raises a menu containing the components of the path. Selecting a component opens the Finder with it.</LI>
</UL>
<P CLASS="RBody">
<A NAME="pgfId-9277054"></A><EM CLASS="Variable">
drag-image</EM>
 is currently only effective on Cocoa. A non-nil value specifies that the <CODE CLASS="Code">
interface</CODE>
 should have a drag image, which on Cocoa is a small image (16x16px) to the left of the window title.</P>
<P CLASS="RBody">
<A NAME="pgfId-9277057"></A>When the user drags this image, if the <CODE CLASS="Code">
interface</CODE>
 has a <EM CLASS="Variable">
drag-callback</EM>
 it is called and if this returns non-nil LispWorks performs drag-and-drop with the image. See <A HREF="capiref-408.htm#40919" CLASS="XRef">simple-pane</A> for details of the <EM CLASS="Variable">
drag-callback</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-9277058"></A>It is possible to have the image for aesthetic purposes only by supplying <EM CLASS="Variable">
drag-image</EM>
 and not specifying a <EM CLASS="Variable">
drag-callback</EM>
. When <EM CLASS="Variable">
drag-callback</EM>
 is non-nil, it can dynamically decide whether to allow a dragging, or to disallow dragging (by returning <CODE CLASS="Code">
nil</CODE>
).</P>
<P CLASS="RBody">
<A NAME="pgfId-9277059"></A>The image specification can be an already converted image (made by <A HREF="capiref-592.htm#43526" CLASS="XRef">load-image</A>, <A HREF="capiref-509.htm#31083" CLASS="XRef">convert-external-image</A>, <A HREF="capiref-599.htm#34108" CLASS="XRef">make-sub-image</A> or <A HREF="capiref-598.htm#10786" CLASS="XRef">make-image-from-port</A>). The image will be freed automatically when the interface is destroyed or when <EM CLASS="Variable">
drag-image</EM>
 is set by <CODE CLASS="Code">
(setf interface-drag-image)</CODE>
. Otherwise the system uses <A HREF="capiref-592.htm#43526" CLASS="XRef">load-image</A> to create a new image, which is also freed automatically.</P>
<P CLASS="RBody">
<A NAME="pgfId-9277049"></A>The value <CODE CLASS="Code">
t</CODE>
 for <EM CLASS="Variable">
drag-image</EM>
 is interpreted specially: it means display some image. If <EM CLASS="Variable">
drag-image</EM>
 is set to <CODE CLASS="Code">
t</CODE>
 after an image has already been set, it just displays the previous image. This is useful if an image was displayed but then removed by <CODE CLASS="Code">
(setf interface-drag-image)</CODE>
 with <CODE CLASS="Code">
nil</CODE>
. If there was no previous image, a default image is displayed.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-8182994"></A>Notes</H5>
<OL>
<LI CLASS="RStep-1">
<A NAME="pgfId-8182995"></A><EM CLASS="Variable">
create-callback</EM>
 can only be used for actions that are part of the creation of the pane, that is preparing the pane for display. The <EM CLASS="Variable">
create-callback</EM>
 is called before the pane is actually displayed, and therefore cannot interact with the user.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-8941999"></A>On Microsoft Windows <CODE CLASS="Code">
F1</CODE>
 always calls <EM CLASS="Variable">
help-callback</EM>
 if it is non-nil.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-8615851"></A><CODE CLASS="Code">
(setf </CODE>
<A NAME="marker-8615896"></A><CODE CLASS="Code">
capi:interface-message-area)</CODE>
 has an effect only before display. After display, this writer has no effect unless the interface is destroyed and re-created.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-8892803"></A>Even though <CODE CLASS="Code">
interface</CODE>
 is a subclass of <A HREF="capiref-449.htm#12473" CLASS="XRef">titled-object</A>, the accessor <A NAME="marker-8892809"></A><CODE CLASS="Code">
titled-object-message-font</CODE>
 cannot be used to get and set the font of the interface's message.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-9329430"></A>On Cocoa in the presence of a <A HREF="capiref-41.htm#30158" CLASS="XRef">cocoa-default-application-interface</A>, an <CODE CLASS="Code">
interface</CODE>
 with no menus of its own and with <CODE CLASS="Code">
:auto-menus nil</CODE>
 uses the menu bar from the application interface.</LI>
</OL>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-8182996"></A>Compatibility note</H5>
<P CLASS="RBody">
<A NAME="pgfId-3800932"></A><A NAME="marker-3800936"></A><CODE CLASS="Code">
interface-iconize-callback</CODE>
 is deprecated. Use the synonym <CODE CLASS="Code">
interface-iconify-callback</CODE>
 instead.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-2763281"></A>Example</H5>
<PRE CLASS="RCode-first"><A NAME="pgfId-896786"></A>(capi:display (make-instance 'capi:interface</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-896788"></A>                             :title &quot;Test Interface&quot;))</PRE>
<PRE CLASS="RCode-first"><A NAME="pgfId-896792"></A>(capi:display (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896794"></A>                'capi:interface</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896795"></A>                :title &quot;Test Interface&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896796"></A>                :destroy-callback</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896952"></A>                  #'(lambda (interface)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896797"></A>                            (capi:display-message</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896798"></A>                             &quot;Quitting &#126;S&quot;</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-896799"></A>                             interface))))</PRE>
<PRE CLASS="RCode-first"><A NAME="pgfId-896803"></A>(capi:display (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896805"></A>                'capi:interface</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896806"></A>                :title &quot;Test Interface&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896807"></A>                :confirm-destroy-function</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896808"></A>                #'(lambda (interface) </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896809"></A>                          (capi:confirm-yes-or-no</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896810"></A>                           &quot;Really quit &#126;S&quot;</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-896811"></A>                           interface))))</PRE>
<PRE CLASS="RCode-first"><A NAME="pgfId-896815"></A>(capi:display (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896817"></A>                'capi:interface</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896818"></A>                :menu-bar-items</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896935"></A>                  (list</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896819"></A>                    (make-instance 'capi:menu</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896820"></A>                                   :title &quot;Menu&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-896821"></A>                                   :items '(1 2 3)))</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-896822"></A>                :title &quot;Menu Test&quot;))</PRE>
<PRE CLASS="RCode-first"><A NAME="pgfId-4355749"></A>(setq interface </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355750"></A>      (capi:display</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355751"></A>       (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355752"></A>        'capi:interface</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355753"></A>        :title &quot;Test Interface&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355754"></A>        :layout</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355755"></A>        (make-instance 'capi:simple-layout </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355756"></A>                       :description </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355757"></A>                       (list (make-instance </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355758"></A>                              'capi:text-input-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355759"></A>                              :text &quot;Text Pane&quot;))))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355760"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355761"></A>(capi:execute-with-interface interface</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355762"></A> #'(setf capi:pane-layout) (make-instance </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355763"></A>                            'capi:simple-layout</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355764"></A>                            :description</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355765"></A>                            (list (make-instance </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4355766"></A>                                   'capi:editor-pane </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-4355767"></A>                                   :text &quot;Editor Pane&quot;)))</PRE>
<PRE CLASS="RCode-first"><A NAME="pgfId-1533398"></A> interface)</PRE>
<PRE CLASS="RCode-first"><A NAME="pgfId-4755970"></A>(capi:display </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4755971"></A> (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4755972"></A>  'capi:interface</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4755973"></A>  :title &quot;Test&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4755974"></A>  :best-x 200</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4755975"></A>  :best-y 200</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4755976"></A>  :best-width '(/ :screen-width 2)</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-896855"></A>  :best-height 300))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-2763418"></A>The following forms illustrate the use of <EM CLASS="Variable">
help-callback</EM>
:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-2763457"></A>(capi:define-interface my-interface ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763458"></A>  ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763459"></A>  (:panes</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763460"></A>   (a-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763461"></A>    capi:text-input-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763462"></A>    :help-key 'input)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763463"></A>   (another-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763464"></A>    capi:display-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763465"></A>    :help-key 'output</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763466"></A>    :text &quot;some text&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763467"></A>  (:menu-bar a-menu)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763468"></A>  (:menus</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763469"></A>   (A-menu</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763470"></A>    &quot;A menu&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763471"></A>    ((&quot;An item&quot; :help-key &quot;item 1&quot;)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763472"></A>     (&quot;Another item&quot; :help-key &quot;item 2&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763473"></A>    :help-key &quot;a menu&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763474"></A>  (:layouts</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763475"></A>   (main-layout</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763476"></A>    capi:column-layout</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2765493"></A>    '(a-pane another-pane)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2765494"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2765495"></A>  (:default-initargs</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763480"></A>   :help-callback 'my-help-callback</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763481"></A>   :message-area t))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763482"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763483"></A>(defun do-detailed-help (interface)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763484"></A>  (capi:contain </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763485"></A>   (make-instance </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763486"></A>    'capi:display-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763487"></A>    :text &quot;Detailed help for my interface&quot;)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763488"></A>   :title </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763489"></A>   (format nil &quot;Help for &#126;a&quot; </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763490"></A>           (capi:capi-object-name interface))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763491"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763492"></A>(defun my-help-callback (interface pane type key)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763493"></A>  (declare (ignore pane))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763494"></A>  (case type</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763495"></A>    (:tooltip (if (eq key 'input)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763496"></A>                  &quot;enter something&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763497"></A>                (when (stringp key) key)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763498"></A>    (:pointer-documentation-enter</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763499"></A>     (when (stringp key)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763500"></A>       (setf (capi:titled-object-message interface)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763501"></A>             key)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763502"></A>    (:pointer-documentation-leave</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763503"></A>     (setf (capi:titled-object-message interface)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763504"></A>           &quot;Something else&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763505"></A>    (:help (do-detailed-help interface ))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763506"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2763507"></A>(capi:display </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-2763455"></A> (make-instance 'my-interface :name &quot;Helpful&quot;))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-3862343"></A>The following forms illustrate the use of <EM CLASS="Variable">
override-cursor</EM>
 to set and then remove an override cursor.</P>
<P CLASS="RBody">
<A NAME="pgfId-3862602"></A>Create an interface with panes that have various different cursors. Move the pointer across each pane.</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-3865762"></A>(setf interface </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865763"></A>      (capi:element-interface </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865764"></A>       (car </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865765"></A>        (capi:contain </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865766"></A>         (loop for cursor </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865767"></A>               in '(:crosshair :hand :v-double-arrow)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865768"></A>               collect </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865769"></A>               (make-instance 'capi:editor-pane </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865770"></A>                              :cursor cursor </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865771"></A>                              :text </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3865772"></A>                              (format nil &quot;&#126;A CURSOR&quot; </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-3862613"></A>                                      cursor)))))))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-3862615"></A>Override the pane cursors by setting the override cursor on the interface, and move the pointer across each pane again.</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-3865915"></A>(setf (capi:interface-override-cursor interface) </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-3862617"></A>      :i-beam)</PRE>
<P CLASS="RBody">
<A NAME="pgfId-3862619"></A>Remove the override cursor.</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-3866042"></A>(setf (capi:interface-override-cursor interface) </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-3862596"></A>      :default)</PRE>
<P CLASS="RBody">
<A NAME="pgfId-3919514"></A>This example illustrates <EM CLASS="Variable">
top-level-hook</EM>
. Evaluate this form and then get an error by the interrupt gesture in the editor pane. (For example,  the interrupt gesture is <CODE CLASS="Code">
Meta+Control+C</CODE>
 on Motif and <CODE CLASS="Code">
Control+Break</CODE>
 on Microsoft Windows). Then select the Destroy Interface restart.</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-3922296"></A>(capi:display</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3922297"></A> (capi:make-container </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3922298"></A>  (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3922299"></A>   'capi:editor-pane)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3922300"></A>  :top-level-hook</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3922301"></A>  #'(lambda (func interface)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3922302"></A>      (restart-case (funcall func)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3922303"></A>        (nil ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3922304"></A>             :report </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-3922305"></A>             (list &quot;Destroy Interface &#126;a&quot; interface)</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-3919542"></A>             (capi:destroy interface))))))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-8893651"></A>The code in <CODE CLASS="Code">
examples/capi/applications/simple-symbol-browser.lisp</CODE>
 illustrates the use of <EM CLASS="Variable">
toolbar-items</EM>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-896859"></A>See also</H5>
<P CLASS="RBody">
<A NAME="pgfId-896861"></A><A HREF="capiref-211.htm#12861" CLASS="XRef">layout</A><BR>
<A HREF="capiref-424.htm#30881" CLASS="XRef">switchable-layout</A><BR>
<A HREF="capiref-245.htm#19220" CLASS="XRef">menu</A><BR>
<A HREF="capiref-76.htm#40005" CLASS="XRef">display</A><BR>
<A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A><BR>
<A HREF="capiref-186.htm#50103" CLASS="XRef">interface-display</A><BR>
<A HREF="capiref-336.htm#33241" CLASS="XRef">quit-interface</A><BR>
<A HREF="capiref-69.htm#29738" CLASS="XRef">define-interface</A><BR>
<A HREF="capiref-9.htm#30968" CLASS="XRef">activate-pane</A><BR>
<A HREF="capiref-449.htm#12473" CLASS="XRef">titled-object</A><BR>
<A HREF="capiref-188.htm#89717" CLASS="XRef">interface-document-modified-p</A><BR>
<A HREF="capiref-199.htm#72440" CLASS="XRef">interface-toolbar-state</A><BR>
<A HREF="capiref-185.htm#31753" CLASS="XRef">interface-customize-toolbar</A></P>
</DIV>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">CAPI Reference Manual - 15 Dec 2011</I></P>
<P><A HREF="capiref-185.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-183.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
