<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="capiref.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 text-input-pane
</TITLE>

<LINK REL="next" HREF="capiref-431.htm" TYPE="text/html">
<LINK REL="prev" HREF="capiref-429.htm" TYPE="text/html">
<LINK REL="up" HREF="capiref-4.htm" TYPE="text/html">
<LINK REL="top" HREF="capiref.htm" TYPE="text/html">
<LINK REL="contents" HREF="capiref-2.htm" TYPE="text/html">
<LINK REL="index" HREF="capiref-693.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="capiref.htm">CAPI Reference Manual</A> &gt; <A HREF="capiref-4.htm">1 CAPI Reference Entries</A><BR><BR>
</DIV><A HREF="capiref-431.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-429.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H4 CLASS="REntry">
<A NAME="pgfId-916989"></A><A NAME="26824"></A>text<A NAME="marker-4232295"></A>-input-pane</H4>
<DIV>
<H5 CLASS="REntry-type">
<A NAME="pgfId-917494"></A>Class</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-916993"></A>Summary</H5>
<P CLASS="RBody">
<A NAME="pgfId-916995"></A>The class <CODE CLASS="Code">
text-input-pane</CODE>
 is a pane for entering a single line of text.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-4232255"></A>Package</H5>
<P CLASS="RSignature">
<A NAME="pgfId-4232256"></A>capi</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-916997"></A>Superclasses</H5>
<P CLASS="RSignature">
<A NAME="pgfId-916999"></A><A HREF="capiref-449.htm#12473" CLASS="XRef">titled-object</A><BR>
<A HREF="capiref-408.htm#40919" CLASS="XRef">simple-pane</A></P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917001"></A>Subclasses</H5>
<P CLASS="RSignature">
<A NAME="pgfId-917003"></A><A HREF="capiref-255.htm#47443" CLASS="XRef">multi-line-text-input-pane</A><BR>
<A HREF="capiref-291.htm#35000" CLASS="XRef">password-pane</A><BR>
<A HREF="capiref-429.htm#26342" CLASS="XRef">text-input-choice</A></P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917005"></A>Initargs</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-917007"></A><CODE CLASS="Code">
:text</CODE>
<A NAME="marker-952953"></A></P>
<P CLASS="RDescription-C">The text in the pane.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-917008"></A><CODE CLASS="Code">
:caret-position</CODE>
<A NAME="marker-952954"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-917392"></A>The position of the caret in the text (from 0).</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-917009"></A><CODE CLASS="Code">
:max-characters</CODE>
<A NAME="marker-952955"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-917393"></A>The maximum number of characters allowed.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-917010"></A><CODE CLASS="Code">
:enabled</CODE>
<A NAME="marker-952956"></A></P>
<P CLASS="RDescription-C">Controls the enabled state of the pane.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-917011"></A><CODE CLASS="Code">
:completion-function</CODE>
<A NAME="marker-952957"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-917394"></A>A function called to complete the text.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8705767"></A><CODE CLASS="Code">
:in-place-completion-function</CODE>
<A NAME="marker-8705776"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8705768"></A>A function designator.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8713911"></A><CODE CLASS="Code">
:file-completion</CODE>
<A NAME="marker-8713921"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8713912"></A><CODE CLASS="Code">
t</CODE>
, <CODE CLASS="Code">
nil</CODE>
 or a pathname designator.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8713934"></A><CODE CLASS="Code">
:in-place-filter</CODE>
<A NAME="marker-8713949"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8713935"></A>A boolean.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8716075"></A><CODE CLASS="Code">
:directories-only</CODE>
<A NAME="marker-8716074"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8716076"></A>A boolean. </P>
<P CLASS="RDescription">
<A NAME="pgfId-8716078"></A><CODE CLASS="Code">
:ignore-file-suffices</CODE>
<A NAME="marker-8716077"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8716079"></A>A list of strings or the keyword <CODE CLASS="Code">
:default</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-917012"></A><CODE CLASS="Code">
:callback-type</CODE>
<A NAME="marker-952958"></A></P>
<P CLASS="RDescription-C">The type of arguments to <EM CLASS="Variable">
callback</EM>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-917013"></A><CODE CLASS="Code">
:callback</P>
<P CLASS="RDescription-C"></CODE>
<A NAME="marker-952959"></A>A function usually called when the user presses <CODE CLASS="Code">
Return</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-917014"></A><CODE CLASS="Code">
:change-callback-type</CODE>
<A NAME="marker-952960"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-917395"></A>The type of arguments to <EM CLASS="Variable">
change-callback</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-917385"></A><CODE CLASS="Code">
:change-callback</CODE>
<A NAME="marker-952961"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-917382"></A>A function called when a change is made.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1741742"></A><CODE CLASS="Code">
:confirm-change-function</CODE>
<A NAME="marker-1741741"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1741743"></A>A function called to validate a change. <B CLASS="Bold">
Note:</B>
 Implemented for Motif only, not Microsoft Windows or Mac OS X.</P>
<P CLASS="RBody">
<A NAME="pgfId-6270911"></A><CODE CLASS="Code">
:navigation-callback</CODE>
<A NAME="marker-6270910"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6270912"></A>A function called when certain keyboard gestures occur in the pane.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6692712"></A><CODE CLASS="Code">
:editing-callback</P>
<P CLASS="RDescription-C"></CODE>
<A NAME="marker-6692711"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6692713"></A>A function called when editing starts or stops.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8717124"></A><CODE CLASS="Code">
:gesture-callbacks</CODE>
<A NAME="marker-8717123"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8717125"></A>A list of pairs <CODE CLASS="Code">
(</CODE>
<EM CLASS="Variable">
gesture</EM>
<CODE CLASS="Code">
 . </CODE>
<EM CLASS="Variable">
callback</EM>
<CODE CLASS="Code">
)</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8693241"></A><CODE CLASS="Code">
:complete-do-action</CODE>
<A NAME="marker-8700806"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8694344"></A>A boolean.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8694388"></A><CODE CLASS="Code">
:text-change-callback</CODE>
<A NAME="marker-8700801"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8694392"></A>A function designator.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-9228134"></A><CODE CLASS="Code">
:buttons</P>
<P CLASS="RDescription-C"></CODE>
<A NAME="marker-9228133"></A>A plist specifying buttons to add, or <CODE CLASS="Code">
t</CODE>
 or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9228137"></A><CODE CLASS="Code">
:search-field</CODE>
<A NAME="marker-9228135"></A><A NAME="marker-9856998"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9228171"></A>Along with the next four initargs, this is implemented only on Cocoa. It specifies that the pane has &quot;recent-items&quot;, which also means using <CODE CLASS="Code">
NSSearchField</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9228140"></A><CODE CLASS="Code">
:recent-items</CODE>
<A NAME="marker-9228138"></A><A NAME="marker-9857005"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9228214"></A>See <CODE CLASS="Code">
:search-field</CODE>
 above.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9213856"></A><CODE CLASS="Code">
:recent-items-name</CODE>
<A NAME="marker-9213904"></A><A NAME="marker-9857012"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9228242"></A>See <CODE CLASS="Code">
:search-field</CODE>
 above.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9213865"></A><CODE CLASS="Code">
:maximum-recent-items</CODE>
<A NAME="marker-9213909"></A><A NAME="marker-9857019"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9233414"></A>See <CODE CLASS="Code">
:search-field</CODE>
 above.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9213866"></A><CODE CLASS="Code">
:recent-items-mode</CODE>
<A NAME="marker-9213914"></A><A NAME="marker-9857026"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9233428"></A>See <CODE CLASS="Code">
:search-field</CODE>
 above.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-6692686"></A>Accessors</H5>
<P CLASS="RSignature">
<A NAME="pgfId-917020"></A><A NAME="marker-3835030"></A>text-input-pane-text<BR>
<A NAME="marker-3835040"></A>text-input-pane-max-characters<BR>
<A NAME="marker-3835045"></A>text-input-pane-completion-function<BR>
<A NAME="marker-3835050"></A>text-input-pane-callback<BR>
<A NAME="marker-3835055"></A>text-input-pane-confirm-change-function<BR>
<A NAME="marker-3835060"></A>text-input-pane-change-callback<BR>
<A NAME="marker-6693364"></A>text-input-pane-navigation-callback<BR>
<A NAME="marker-6693369"></A>text-input-pane-editing-callback<BR>
<A NAME="marker-3835065"></A>text-input-pane-enabled<BR>
<A NAME="marker-5366967"></A>text-input-pane-buttons-enabled</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-3835069"></A>Readers</H5>
<P CLASS="RSignature">
<A NAME="pgfId-3835075"></A><A NAME="marker-3835079"></A>text-input-pane-caret-position</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917029"></A>Description</H5>
<P CLASS="RBody">
<A NAME="pgfId-2178996"></A>The class <CODE CLASS="Code">
text-input-pane</CODE>
 provides a great deal of flexibility in its handling of the text being entered. It starts with the initial text and caret-position specified by the arguments <EM CLASS="Variable">
text</EM>
 and <EM CLASS="Variable">
caret-position</EM>
 respectively. It limits the number of characters entered with the <EM CLASS="Variable">
max-characters</EM>
 argument (which defaults to <CODE CLASS="Code">
nil</CODE>
, meaning there is no maximum). </P>
<P CLASS="RBody">
<A NAME="pgfId-5893312"></A>If <EM CLASS="Variable">
enabled</EM>
 is <CODE CLASS="Code">
nil</CODE>
, the pane is disabled. If <EM CLASS="Variable">
enabled</EM>
 is <CODE CLASS="Code">
:read-only</CODE>
, then the pane shows the text and allows it to be selected without it being editable. In this case the visual appearance varies between window systems, but often the text can be copied and the caret position altered. If <EM CLASS="Variable">
enabled</EM>
 is any other true value, then the pane is fully enabled. The default value of <EM CLASS="Variable">
enabled</EM>
 is <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-917037"></A>A <EM CLASS="Variable">
completion-function</EM>
 can be specified which will get called when the completion gesture is made by the user (by pressing the <CODE CLASS="Code">
Tab</CODE>
 key) or when <A HREF="capiref-437.htm#61740" CLASS="XRef">text-input-pane-complete-text</A> is called. The function should have signature:</P>
<CODE CLASS="RCode-line">
<A NAME="pgfId-8699886"></A>completion-function <EM CLASS="Variable">
pane</EM>
 <EM CLASS="Variable">
string</EM>
 =&gt; <EM CLASS="Variable">
completions</EM>
, <EM CLASS="Variable">
start</EM>
, <EM CLASS="Variable">
end</EM>
</CODE>
<P CLASS="RBody">
<A NAME="pgfId-8699887"></A>where <EM CLASS="Variable">
pane</EM>
 is the <CODE CLASS="Code">
text-input-pane</CODE>
 itself and <EM CLASS="Variable">
string</EM>
 is the string to complete. When completion is invoked <EM CLASS="Variable">
completion-function</EM>
 is called with <EM CLASS="Variable">
pane</EM>
 and a string containing the text of pane to the left of the cursor.</P>
<P CLASS="RBody">
<A NAME="pgfId-8699883"></A>The <EM CLASS="Variable">
completion-function</EM>
 is called with the pane and the text to complete and should return either <CODE CLASS="Code">
nil</CODE>
, the completed text as a string or a list <EM CLASS="Variable">
completions</EM>
 of candidate completions. In the latter case, the CAPI will prompt the user for the completion they wish, and this will become the new text. In addition, the <EM CLASS="Variable">
completion-function</EM>
 can return two more values, <EM CLASS="Variable">
start</EM>
 and <EM CLASS="Variable">
end</EM>
, which specify a range in the text that is to be replaced if the completion is successful.</P>
<P CLASS="RBody">
<A NAME="pgfId-8709046"></A><EM CLASS="Variable">
in-place-completion-function</EM>
 tells the pane to do in-place completion and specifies the function to use. The function should have signature:</P>
<CODE CLASS="RCode-line">
<A NAME="pgfId-8709047"></A>in-place-completion-function <EM CLASS="Variable">
pane</EM>
 <EM CLASS="Variable">
string</EM>
 =&gt; <EM CLASS="Variable">
completions</EM>
, <EM CLASS="Variable">
start</EM>
, <EM CLASS="Variable">
end</EM>
</CODE>
<P CLASS="RBody">
<A NAME="pgfId-8709048"></A>where <EM CLASS="Variable">
pane</EM>
 is the <CODE CLASS="Code">
text-input-pane</CODE>
 itself and <EM CLASS="Variable">
string</EM>
 is the string to complete. When in-place completion is invoked <EM CLASS="Variable">
in-place-completion-function</EM>
 is called with <EM CLASS="Variable">
pane</EM>
 and a string containing the text of pane to the left of the cursor. </P>
<P CLASS="RBody">
<A NAME="pgfId-8709049"></A><EM CLASS="Variable">
completions</EM>
 needs to be a list of strings that are possible completions, a single string that is a unique completion, or the symbol <CODE CLASS="Code">
:destroy</CODE>
. <CODE CLASS="Code">
:destroy</CODE>
 means that the in-place completion needs to stop and close the in-place window. In addition, the completion function can return two more values, <EM CLASS="Variable">
start</EM>
 and <EM CLASS="Variable">
end</EM>
, which specify a range in the text that is to be replaced if the completion is successful. The function is called repeatedly whenever there is a change to the text that should be completed. </P>
<P CLASS="RBody">
<A NAME="pgfId-8709050"></A><B CLASS="Bold">
Note:</B>
 If <EM CLASS="Variable">
in-place-completion-function</EM>
 needs some dynamic information, it can put it in a property of the pane (using <A HREF="capiref-30.htm#18246" CLASS="XRef">capi-object-property</A>).</P>
<P CLASS="RBody">
<A NAME="pgfId-8709054"></A><B CLASS="Bold">
Note:</B>
 The initarg <CODE CLASS="Code">
:file-completion</CODE>
 overrides <CODE CLASS="Code">
:in-place-completion-function</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8709055"></A><B CLASS="Bold">
Note:</B>
 The in-place completion mechanism uses <EM CLASS="Variable">
gesture-callbacks</EM>
 to implement the functionality.</P>
<P CLASS="RBody">
<A NAME="pgfId-8709056"></A><B CLASS="Bold">
Note:</B>
 <CODE CLASS="Code">
:in-place-filter</CODE>
 can be used to specify that the in-place window can have a filter.</P>
<P CLASS="RBody">
<A NAME="pgfId-8709060"></A>See &quot;In-place completion&quot; in the <I CLASS="Italic">
CAPI User Guide</I>
 for the user interaction.</P>
<P CLASS="RBody">
<A NAME="pgfId-8713086"></A><EM CLASS="Variable">
file-completion</EM>
, if non-nil, tells the pane to do file completion using an in-place window. See &quot;In-place completion&quot; in the <I CLASS="Italic">
CAPI User Guide</I>
 for the interaction.</P>
<P CLASS="RBody">
<A NAME="pgfId-8713090"></A>If <EM CLASS="Variable">
file-completion</EM>
 is a pathname designator, its location is used as the root path for the completion.</P>
<P CLASS="RBody">
<A NAME="pgfId-8713091"></A><B CLASS="Bold">
Note:</B>
 <CODE CLASS="Code">
:file-completion</CODE>
 overrides <CODE CLASS="Code">
:in-place-completion-function</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8713092"></A><B CLASS="Bold">
Note:</B>
 The behavior of in-place completion is somewhat different from other completion.</P>
<P CLASS="RBody">
<A NAME="pgfId-8713093"></A><B CLASS="Bold">
Note:</B>
 The initargs <CODE CLASS="Code">
:directories-only</CODE>
 and <CODE CLASS="Code">
:ignore-file-suffices</CODE>
 can be used to change the behavior of the completion.</P>
<P CLASS="RBody">
<A NAME="pgfId-8713094"></A>The default value of <EM CLASS="Variable">
file-completion</EM>
 and <EM CLASS="Variable">
in-place-completion-function</EM>
 is <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8713965"></A><EM CLASS="Variable">
in-place-filter</EM>
 takes effect only when either <EM CLASS="Variable">
in-place-completion-function</EM>
 or <EM CLASS="Variable">
file-completion</EM>
 is non-nil. If <EM CLASS="Variable">
in-place-filter</EM>
 is <CODE CLASS="Code">
t</CODE>
 then the in-place window can have a filter. Note that the filter needs to requested by a user gesture. <CODE CLASS="Code">
Control+Return</CODE>
 is the default in-place filter gesture. The default value of <EM CLASS="Variable">
in-place-filter</EM>
 is <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8716906"></A><EM CLASS="Variable">
directories-only</EM>
 takes effect only if <EM CLASS="Variable">
file-completion</EM>
 is used. If <EM CLASS="Variable">
directories-only</EM>
 is <CODE CLASS="Code">
t</CODE>
 then in-place completion shows only directories. The default value of <EM CLASS="Variable">
directories-only</EM>
 is <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8716904"></A><EM CLASS="Variable">
ignore-file-suffices</EM>
 takes effect only if <EM CLASS="Variable">
file-completion</EM>
 is used. It tells in-place completion to ignore files whose file namestring (the result of <CODE CLASS="Code">
cl:file-namestring</CODE>
) ends with any of the strings in the list <EM CLASS="Variable">
ignore-file-suffices</EM>
. If <EM CLASS="Variable">
ignore-file-suffices</EM>
 is <CODE CLASS="Code">
:default</CODE>
, then completion uses the default value, which is the value of <CODE CLASS="Code">
editor:*ignorable-file-suffices*</CODE>
 (see <CODE CLASS="Code">
config/a-dot-lispworks.lisp</CODE>
).</P>
<P CLASS="RBody">
<A NAME="pgfId-6272507"></A><EM CLASS="Variable">
callback</EM>
, if non-nil, is called when the user presses <CODE CLASS="Code">
Return</CODE>
, unless <EM CLASS="Variable">
navigation-callback</EM>
 is non-nil, in which case <EM CLASS="Variable">
navigation-callback</EM>
 is called instead. If the pane has &quot;recent-items&quot; (implemented only on Cocoa) then the timing of calls to <EM CLASS="Variable">
callback</EM>
 is modified: see the discussion of <EM CLASS="Variable">
recent-items</EM>
 below for the details.</P>
<P CLASS="RBody">
<A NAME="pgfId-5747229"></A>When the <EM CLASS="Variable">
text</EM>
 or <EM CLASS="Variable">
caret-position</EM>
 is changed, the callback <EM CLASS="Variable">
change-callback</EM>
 is called with the <EM CLASS="Variable">
text</EM>
, the pane itself, the interface and the <EM CLASS="Variable">
caret-position</EM>
. The arguments that are passed to the <EM CLASS="Variable">
change-callback</EM>
 can be altered by specifying the <EM CLASS="Variable">
change-callback-type</EM>
 (see the <A HREF="capiref-26.htm#13019" CLASS="XRef">callbacks</A> class for details of possible values). </P>
<P CLASS="RBody">
<A NAME="pgfId-5747244"></A><B CLASS="Bold">
Note:</B>
 the <EM CLASS="Variable">
change-callback</EM>
 is potentially called more than once for each user gesture.</P>
<P CLASS="RBody">
<A NAME="pgfId-1741753"></A>With the Motif implementation it is possible to check changes that the user makes to the <CODE CLASS="Code">
text-input-pane</CODE>
 by providing a <EM CLASS="Variable">
confirm-change-function</EM>
 which gets passed the new	 text, the pane itself, its interface and the new caret position, and which should return non-nil if it is OK to make the change. If <CODE CLASS="Code">
nil</CODE>
 is returned, then the pane will be unaltered and a beep will be signalled to indicate that the new values were invalid.</P>
<P CLASS="RBody">
<A NAME="pgfId-6271999"></A><EM CLASS="Variable">
navigation-callback</EM>
, if non-nil, is a function that will be called when certain navigation gestures are used in the <CODE CLASS="Code">
text-input-pane</CODE>
. The function is called with two arguments, the pane itself, and one of the following keywords:</P>
<P CLASS="RDescription">
<A NAME="pgfId-6272000"></A><CODE CLASS="Code">
:tab-forward</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6272004"></A><CODE CLASS="Code">
Tab</CODE>
 was pressed.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6272001"></A><CODE CLASS="Code">
:tab-backward</CODE>
</P>
<P CLASS="RDescription-C"><CODE CLASS="Code">
Tab Backwards</CODE>
 (usually <CODE CLASS="Code">
Shift+Tab</CODE>
)  was pressed.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6271254"></A><CODE CLASS="Code">
:return</CODE>
</P>
<P CLASS="RDescription-C"><CODE CLASS="Code">
Return</CODE>
 was pressed.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6271255"></A><CODE CLASS="Code">
:shift-return</CODE>
</P>
<P CLASS="RDescription-C"><CODE CLASS="Code">
Shift+Return</CODE>
 was pressed.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6271256"></A><CODE CLASS="Code">
:enter</CODE>
</P>
<P CLASS="RDescription-C"><CODE CLASS="Code">
Enter</CODE>
 was pressed.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6271257"></A><CODE CLASS="Code">
:shift-enter</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6272053"></A><CODE CLASS="Code">
Shift+Enter</CODE>
 was pressed.</P>
<P CLASS="RBody">
<A NAME="pgfId-6271259"></A><B CLASS="Bold">
Note:</B>
 <CODE CLASS="Code">
Enter</CODE>
 is the key usually found on the numeric keypad.</P>
<P CLASS="RBody">
<A NAME="pgfId-6271261"></A>When <EM CLASS="Variable">
navigation-callback</EM>
 is non-nil, it is called instead of <EM CLASS="Variable">
callback</EM>
 when <CODE CLASS="Code">
Return</CODE>
 is pressed. <EM CLASS="Variable">
callback</EM>
 is still called via an OK button if there is one (see <EM CLASS="Variable">
buttons</EM>
 below).</P>
<P CLASS="RBody">
<A NAME="pgfId-6692722"></A><EM CLASS="Variable">
navigation-callback</EM>
 is implemented only on Microsoft Windows and Cocoa.</P>
<P CLASS="RBody">
<A NAME="pgfId-6692723"></A><EM CLASS="Variable">
editing-callback</EM>
, if non-nil, is a function of two arguments:</P>
<P CLASS="RSignature">
<A NAME="pgfId-6962611"></A>editing-callback <EM CLASS="Variable">
pane</EM>
 <EM CLASS="Variable">
type</EM>
</P>
<P CLASS="RBody">
<A NAME="pgfId-6962612"></A><EM CLASS="Variable">
pane</EM>
 is the <CODE CLASS="Code">
text-input-pane</CODE>
 and <EM CLASS="Variable">
type</EM>
 is a keyword. <EM CLASS="Variable">
editing-callback</EM>
 is called with <EM CLASS="Variable">
type</EM>
 <CODE CLASS="Code">
:start</CODE>
 when the user starts editing and <EM CLASS="Variable">
type</EM>
 <CODE CLASS="Code">
:end</CODE>
 when the user stops editing. In general, this occurs when the focus changes, but on Cocoa <EM CLASS="Variable">
type</EM>
 <CODE CLASS="Code">
:start</CODE>
 is passed when the first change is made to the text.</P>
<P CLASS="RBody">
<A NAME="pgfId-8704896"></A><EM CLASS="Variable">
gesture-callbacks</EM>
 provides callbacks to perform for specific keyboard gestures. Each <EM CLASS="Variable">
gesture</EM>
 must be an object that <CODE CLASS="Code">
sys:coerce-to-gesture-spec</CODE>
 can coerce to a gesture-spec. Each <EM CLASS="Variable">
callback</EM>
 can be a callable (symbol or function) which takes one argument, the pane. Alternatively each <EM CLASS="Variable">
callback</EM>
 can be a list of the form <CODE CLASS="Code">
(</CODE>
<EM CLASS="Variable">
function</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
arguments</EM>
<CODE CLASS="Code">
)</CODE>
. Note that in this case, the pane itself is not automatically passed to the <EM CLASS="Variable">
function</EM>
 amongst <EM CLASS="Variable">
arguments</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8704897"></A>When the user enters a gesture that matches <EM CLASS="Variable">
gesture</EM>
 in any pair amongst <EM CLASS="Variable">
gesture-callbacks</EM>
, the <EM CLASS="Variable">
callback</EM>
 is executed and the gesture is not processed any more.</P>
<P CLASS="RBody">
<A NAME="pgfId-8704898"></A><B CLASS="Bold">
Note:</B>
 The interaction of in-place completion is implemented using <EM CLASS="Variable">
gesture-callbacks</EM>
. Gestures which you define explicitly by <EM CLASS="Variable">
gesture-callbacks</EM>
 override the gestures which are defined implicitly by the in-place completion mechanism.</P>
<P CLASS="RBody">
<A NAME="pgfId-8704899"></A><B CLASS="Bold">
Note:</B>
 For gestures that change the text, <EM CLASS="Variable">
text-change-callback</EM>
 is probably better than <EM CLASS="Variable">
gesture-callbacks</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8700814"></A>When <EM CLASS="Variable">
complete-do-action</EM>
 is non-nil, completion of the text in the pane automatically invokes <EM CLASS="Variable">
callback</EM>
 (if <EM CLASS="Variable">
callback</EM>
 is non-nil). The default value of <EM CLASS="Variable">
complete-do-action</EM>
 is <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8701615"></A><EM CLASS="Variable">
text-change-callback</EM>
 is a change callback (see <EM CLASS="Variable">
change-callback</EM>
) that is called only when the text in the pane changes. In contrast, <EM CLASS="Variable">
change-callback</EM>
 is also called when the caret moves. If both <EM CLASS="Variable">
text-change-callback</EM>
 and <EM CLASS="Variable">
change-callback</EM>
 are supplied, only <EM CLASS="Variable">
text-change-callback</EM>
 is invoked.</P>
<P CLASS="RBody">
<A NAME="pgfId-6692729"></A><EM CLASS="Variable">
buttons</EM>
 specifies toolbar buttons which appear next to the pane and facilitate user actions on it. It also specifies the position of the buttons relative to the pane. This feature appears in the LispWorks IDE, for example the Class box of the Class Browser.</P>
<P CLASS="RBody">
<A NAME="pgfId-4258565"></A>The allowed keys and values of the plist <EM CLASS="Variable">
buttons</EM>
 are:</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-4258210"></A><CODE CLASS="Code">
:ok</CODE>
<A NAME="marker-6695638"></A></P>
<P CLASS="RDescription-C">A boolean or a plist, default value <CODE CLASS="Code">
t</CODE>
. If true, a button which calls <EM CLASS="Variable">
callback</EM>
 appears. If the  value is a plist then this plist supplies details for the button, as described below.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-7374290"></A><CODE CLASS="Code">
:cancel</CODE>
<A NAME="marker-6695640"></A></P>
<P CLASS="RDescription-C">A boolean or a plist, default value <CODE CLASS="Code">
nil</CODE>
. If true, a button which calls <EM CLASS="Variable">
cancel-function</EM>
 appears. A plist value is interpreted as for <CODE CLASS="Code">
:ok</CODE>
  and can also contain the key <CODE CLASS="Code">
:accelerator</CODE>
 which specifies an accelerator used for the button. There is no default accelerator.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-4258290"></A><CODE CLASS="Code">
:completion</CODE>
<A NAME="marker-6695645"></A></P>
<P CLASS="RDescription-C">A boolean or a plist. If true, a button which calls <EM CLASS="Variable">
completion-function</EM>
 appears. The default value is <CODE CLASS="Code">
t</CODE>
 if <EM CLASS="Variable">
completion-function</EM>
 is non-nil, and <CODE CLASS="Code">
nil</CODE>
 otherwise. A plist value is interpreted as for <CODE CLASS="Code">
:ok</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6695284"></A><CODE CLASS="Code">
:browse-file</CODE>
<A NAME="marker-6695650"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6695304"></A>A keyword or a plist. If true, a button which invokes <A HREF="capiref-320.htm#prompt-for-file" CLASS="XRef">prompt-for-file</A> appears. If the value is <CODE CLASS="Code">
:save</CODE>
 or <CODE CLASS="Code">
:open</CODE>
 then it is passed as the operation argument to <A HREF="capiref-320.htm#prompt-for-file" CLASS="XRef">prompt-for-file</A>, replacing the text in the pane if successful. If the value is a plist, then it supplies details for the button, as described below, and can also contain the keywords <CODE CLASS="Code">
:message</CODE>
 to specify a message for the file prompter; <CODE CLASS="Code">
:pathname</CODE>
 to specify the default pathname of the file prompter (defaults to the text in the <CODE CLASS="Code">
text-input-pane</CODE>
) or any of the keywords <CODE CLASS="Code">
:ok-check</CODE>
, <CODE CLASS="Code">
:filter</CODE>
, <CODE CLASS="Code">
:filters</CODE>
, <CODE CLASS="Code">
:if-exists</CODE>
, <CODE CLASS="Code">
:if-does-not-exist</CODE>
, <CODE CLASS="Code">
:operation</CODE>
, <CODE CLASS="Code">
:owner</CODE>
, <CODE CLASS="Code">
:pane-args</CODE>
 or <CODE CLASS="Code">
:popup-args</CODE>
 which are passed directly to <A HREF="capiref-320.htm#prompt-for-file" CLASS="XRef">prompt-for-file</A>.</P>
<P CLASS="RDescription">
<A NAME="pgfId-4258291"></A><CODE CLASS="Code">
:cancel-function</CODE>
<A NAME="marker-6695665"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-4258294"></A>A function that expects the pane as its single argument. The default is a function which sets <EM CLASS="Variable">
text</EM>
 to the empty string.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-7374004"></A><CODE CLASS="Code">
:help</CODE>
<A NAME="marker-7374028"></A></P>
<P CLASS="RDescription-C">Specifies a help button. The value must be a plist containing either keys <CODE CLASS="Code">
:function</CODE>
 and optionally <CODE CLASS="Code">
:arguments</CODE>
, or the keys <CODE CLASS="Code">
:title</CODE>
, <CODE CLASS="Code">
:message </CODE>
and optionally <CODE CLASS="Code">
:dialog-p</CODE>
.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7373207"></A>If <EM CLASS="Variable">
function</EM>
 is supplied, when the user presses the help button it calls</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7373208"></A><CODE CLASS="Code">
(apply </CODE>
<EM CLASS="Variable">
function</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
pane</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
arguments</EM>
<CODE CLASS="Code">
)</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7373209"></A>where pane is the <CODE CLASS="Code">
text-input-pane</CODE>
. <EM CLASS="Variable">
title</EM>
, <EM CLASS="Variable">
message</EM>
 and <EM CLASS="Variable">
dialog-p</EM>
 are ignored in this case.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7382273"></A>Otherwise when the user presses the help button it opens a window with title <EM CLASS="Variable">
title</EM>
 displaying the string <EM CLASS="Variable">
message</EM>
 in a <A HREF="capiref-81.htm#33757" CLASS="XRef">display-pane</A>. The message can be long, and can include newlines. The window is owned by the pane, but is not modal, so the user can interact with the pane while the help window is displayed. If <EM CLASS="Variable">
dialog-p</EM>
 is true, the help window is raised as a dialog. The default value for <EM CLASS="Variable">
dialog-p</EM>
 is <CODE CLASS="Code">
nil</CODE>
. <EM CLASS="Variable">
function</EM>
 and <EM CLASS="Variable">
arguments</EM>
 are ignored in this case.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7373210"></A>The plist can contain other keys as described below.</P>
<P CLASS="RDescription">
<A NAME="pgfId-5665010"></A><CODE CLASS="Code">
:orientation</CODE>
<A NAME="marker-6695670"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-5665011"></A>The value is either <CODE CLASS="Code">
:horizontal</CODE>
 or <CODE CLASS="Code">
:vertical</CODE>
. <EM CLASS="Variable">
orientation</EM>
 controls the orientation of the toolbar. This is useful for <A HREF="capiref-255.htm#47443" CLASS="XRef">multi-line-text-input-pane</A>. The default value is <CODE CLASS="Code">
:horizontal</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-5665849"></A><CODE CLASS="Code">
:adjust</P>
<P CLASS="RDescription-C"></CODE>
<A NAME="marker-6695655"></A>The value is <CODE CLASS="Code">
:top</CODE>
, <CODE CLASS="Code">
:center</CODE>
, <CODE CLASS="Code">
:centre</CODE>
 or <CODE CLASS="Code">
:bottom</CODE>
. <EM CLASS="Variable">
adjust</EM>
 controls how the buttons are adjusted vertically relative to the text input pane. This is useful for <A HREF="capiref-255.htm#47443" CLASS="XRef">multi-line-text-input-pane</A>. The default value is <CODE CLASS="Code">
:center</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6136722"></A><CODE CLASS="Code">
:position</CODE>
<A NAME="marker-6695660"></A></P>
<P CLASS="RDescription-C">The value is <CODE CLASS="Code">
:top</CODE>
, <CODE CLASS="Code">
:bottom</CODE>
, <CODE CLASS="Code">
:left</CODE>
 or <CODE CLASS="Code">
:right</CODE>
. <EM CLASS="Variable">
position</EM>
 determines whether the buttons appear above, below, left or right of the text input pane. If <CODE CLASS="Code">
:position</CODE>
 is not supplied, then the buttons appear to the right of the pane.</P>
<P CLASS="RBody">
<A NAME="pgfId-5366306"></A>The value <CODE CLASS="Code">
nil</CODE>
 for <EM CLASS="Variable">
buttons</EM>
 means there are no buttons - this is the default. When <EM CLASS="Variable">
buttons</EM>
 is true the buttons appear or not according to their specified values or their default values.</P>
<P CLASS="RBody">
<A NAME="pgfId-6137774"></A>All of the button plists (for <CODE CLASS="Code">
:ok</CODE>
, <CODE CLASS="Code">
:cancel</CODE>
, <CODE CLASS="Code">
:help</CODE>
 and so on) can contain the following keys and values in addition to those mentioned above:</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6137788"></A><CODE CLASS="Code">
:enabled</CODE>
</P>
<P CLASS="RDescription-C">A value that controls whether the button is enabled. (See the reader <CODE CLASS="Code">
text-input-pane-buttons-enabled</CODE>
).</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6137792"></A><CODE CLASS="Code">
:image</CODE>
</P>
<P CLASS="RDescription-C">The image to use for the button. This should be either a pathname or string naming an image file to load, a symbol giving the id of an image registered with <A HREF="capiref-627.htm#80995" CLASS="XRef">register-image-translation</A>, an <A HREF="capiref-574.htm#77313" CLASS="XRef">image</A> object as returned by <A HREF="capiref-592.htm#43526" CLASS="XRef">load-image</A> or an <A HREF="capiref-537.htm#53640" CLASS="XRef">external-image</A>. The default image is one of the symbols <A NAME="marker-6449827"></A><CODE CLASS="Code">
ok-button</CODE>
, <A NAME="marker-6449835"></A><CODE CLASS="Code">
cancel-button</CODE>
 or <A NAME="marker-6449840"></A><CODE CLASS="Code">
complete-button</CODE>
, which are pre-registered image identifers corresponding to each button.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6137800"></A><CODE CLASS="Code">
:help-key</CODE>
</P>
<P CLASS="RDescription-C">The <EM CLASS="Variable">
help-key</EM>
 used to find a tooltip for the button.</P>
<P CLASS="RBody">
<A NAME="pgfId-5366307"></A>The <CODE CLASS="Code">
text-input-pane-buttons-enabled</CODE>
 reader returns a list containing keywords such as<CODE CLASS="Code">
:ok</CODE>
, <CODE CLASS="Code">
:cancel</CODE>
 and <CODE CLASS="Code">
:completion</CODE>
, one for each corresponding button (as specified by <EM CLASS="Variable">
buttons</EM>
) that is currently enabled.</P>
<P CLASS="RBody">
<A NAME="pgfId-5366311"></A>The <CODE CLASS="Code">
(setf text-input-pane-buttons-enabled)</CODE>
 writer takes a list of keywords as described for the reader and sets the enabled state of the buttons, enabling each button if it appears in the list and disabling it otherwise. The value <CODE CLASS="Code">
t</CODE>
 can also be passed: this enables all the buttons.</P>
<P CLASS="RBody">
<A NAME="pgfId-5366316"></A>For more than one line of input, use <A HREF="capiref-255.htm#47443" CLASS="XRef">multi-line-text-input-pane</A>.</P>
<P CLASS="RBody">
<A NAME="pgfId-9218867"></A>If <EM CLASS="Variable">
search-field</EM>
 is a string and <EM CLASS="Variable">
recent-items-name</EM>
 is not supplied, then the value <EM CLASS="Variable">
search-field</EM>
 is used as the name. See the discussion of <EM CLASS="Variable">
recent-items</EM>
 below.</P>
<P CLASS="RBody">
<A NAME="pgfId-9218868"></A>If any of <EM CLASS="Variable">
search-field</EM>
, <EM CLASS="Variable">
recent-items</EM>
 or <EM CLASS="Variable">
recent-items-name</EM>
 is supplied and is non-nil, the pane uses <CODE CLASS="Code">
NSSearchField</CODE>
, and also has &quot;recent items&quot;. The <CODE CLASS="Code">
NSSearchField</CODE>
 has a different appearance from <CODE CLASS="Code">
text-input-pane</CODE>
, can display recent items menu, and its input behavior is a little different too.</P>
<P CLASS="RBody">
<A NAME="pgfId-9218869"></A>If <EM CLASS="Variable">
recent-items</EM>
 is non-nil, it must be a list of strings, or <CODE CLASS="Code">
t</CODE>
. When it is a list of strings, it specifies the initial list of &quot;recent items&quot;.  When it is <CODE CLASS="Code">
t</CODE>
, it simply specifies that the pane should handle recent items.</P>
<P CLASS="RBody">
<A NAME="pgfId-9218870"></A>If <EM CLASS="Variable">
recent-items-name</EM>
 is non-nil, it should be a string. The string specifies the autosave name of the pane. When a pane has an autosave name, Cocoa remembers the list of recent items for pane with the same autosave name and same application. The record persists between invocations of the application.</P>
<P CLASS="RBody">
<A NAME="pgfId-9218871"></A>If <EM CLASS="Variable">
recent-items-name</EM>
 is not supplied or is <CODE CLASS="Code">
nil</CODE>
, and <EM CLASS="Variable">
search-field</EM>
 is a string, it is used instead as the name.</P>
<P CLASS="RBody">
<A NAME="pgfId-9218872"></A>The maximum number of recent items defaults to 50 and can be controlled by the initarg value <EM CLASS="Variable">
maximum-recent-items</EM>
. The value 0 can be used to switch off the &quot;recent items&quot; feature, including the menu.</P>
<P CLASS="RBody">
<A NAME="pgfId-9218875"></A>The recent items list can be read and set by <A HREF="capiref-434.htm#95301" CLASS="XRef">text-input-pane-recent-items</A>, or modified by any of <A HREF="capiref-435.htm#62655" CLASS="XRef">text-input-pane-replace-recent-items</A>, <A HREF="capiref-432.htm#34240" CLASS="XRef">text-input-pane-delete-recent-items</A>, <A HREF="capiref-431.htm#52937" CLASS="XRef">text-input-pane-append-recent-items</A>, <A HREF="capiref-433.htm#80482" CLASS="XRef">text-input-pane-prepend-recent-items</A> and <A HREF="capiref-436.htm#93227" CLASS="XRef">text-input-pane-set-recent-items</A>.</P>
<P CLASS="RBody">
<A NAME="pgfId-9219927"></A>The input behavior of <CODE CLASS="Code">
text-input-pane</CODE>
 with &quot;recent items&quot; is the same is that of other <CODE CLASS="Code">
text-input-pane</CODE>
s except for the timing of calls to <EM CLASS="Variable">
callback</EM>
.  Note that this refers to the function that is passed with the initarg <CODE CLASS="Code">
:callback</CODE>
. The <CODE CLASS="Code">
:change-callback</CODE>
 is not affected.</P>
<P CLASS="RBody">
<A NAME="pgfId-9218893"></A>By default, each time the user types a character it causes a scheduling of <EM CLASS="Variable">
callback</EM>
 some short time later. If the user types another character before the callback, it is re-scheduled later. The result is that as long as the user types, there are no callbacks, but once the user stops a callback is generated.</P>
<P CLASS="RBody">
<A NAME="pgfId-9218894"></A>The behavior of <EM CLASS="Variable">
callback</EM>
 can be controlled by the initarg value <EM CLASS="Variable">
recent-items-mode</EM>
, which can be one of <CODE CLASS="Code">
:explicit</CODE>
, <CODE CLASS="Code">
:delayed</CODE>
 or <CODE CLASS="Code">
:immediate</CODE>
. <CODE CLASS="Code">
:explicit</CODE>
 gives the same behavior as a normal <CODE CLASS="Code">
text-input-pane</CODE>
, <CODE CLASS="Code">
:delayed</CODE>
 is the default described above, and <CODE CLASS="Code">
:immediate</CODE>
 means doing a callback immediately after each character. In addition, when the user selects an item from the recent items menu or clicks its <B CLASS="Button">
Cancel</B>
 button, the <EM CLASS="Variable">
callback</EM>
 is called. In the case of the <B CLASS="Button">
Cancel</B>
 button, the string would be empty.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1741754"></A>Compatibility note</H5>
<P CLASS="RBody">
<A NAME="pgfId-1741755"></A>The <EM CLASS="Variable">
confirm-change-function</EM>
 was called <EM CLASS="Variable">
before-change-callback</EM>
 in LispWorks 3.1. Both the old initarg <CODE CLASS="Code">
:before-change-callback</CODE>
<A NAME="marker-3835095"></A> and the old accessor <CODE CLASS="Code">
text-input-pane-before-change-callback</CODE>
<A NAME="marker-3835084"></A> are still supported, but may not be in future releases.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917058"></A>Example</H5>
<PRE CLASS="RCode-first"><A NAME="pgfId-917060"></A>(capi:contain (make-instance 'capi:text-input-pane</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-917062"></A>                             :text &quot;Hello world&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428373"></A>(setq tip (capi:contain</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428374"></A>                       (make-instance </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428375"></A>                        'capi:text-input-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428376"></A>                        :enabled nil)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428377"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428378"></A>(capi:apply-in-pane-process </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428379"></A>  tip #'(setf capi:text-input-pane-enabled) t tip)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428380"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428381"></A>(capi:apply-in-pane-process </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428382"></A> tip #'(setf capi:text-input-pane-enabled) nil tip)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428383"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4428384"></A>(capi:apply-in-pane-process </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-917094"></A> tip #'(setf capi:text-input-pane-text) &quot;New text&quot; tip)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4430914"></A>(capi:contain (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-917096"></A>               'capi:text-input-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-917097"></A>               :text &quot;Hello world&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-917098"></A>               :callback #'(lambda (text interface)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-917099"></A>                             (capi:display-message</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-917100"></A>                              &quot;Interface &#126;S's text: &#126;S&quot;</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-917101"></A>                              interface text))))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-6139346"></A>This example uses a plist value for the <EM CLASS="Variable">
buttons</EM>
 key <CODE CLASS="Code">
:cancel</CODE>
 to specify that the Cancel button is initially disabled:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-6139008"></A>(capi:contain </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-6139009"></A> (make-instance 'capi:text-input-pane </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-6139010"></A>                :buttons </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-6139011"></A>                '(:ok t :cancel (:enabled nil))))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-7380266"></A>This example shows how to specify a Help button which displays a help message:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-7381447"></A>(defvar *help-message* &quot;A long help message.&quot;)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-7382189"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-7380268"></A>(capi:contain</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-7380269"></A> (make-instance 'capi:text-input-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-7380270"></A>                :buttons </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-7380271"></A>                `(:help </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-7380272"></A>                  (:title &quot;help window&quot;</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-7380273"></A>                   :message ,*help-message*))))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-8717968"></A>This example illustrates the use of <EM CLASS="Variable">
gesture-callbacks</EM>
. <CODE CLASS="Code">
Ctrl+e</CODE>
 moves the cursor to the end of the input, <CODE CLASS="Code">
Ctrl+a</CODE>
 moves it to the start, and <CODE CLASS="Code">
Ctrl+6</CODE>
 does something else:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-8717969"></A>(capi:contain</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717970"></A> (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717971"></A>  'capi:text-input-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717972"></A>  :gesture-callbacks</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717973"></A>  (list </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717974"></A>   (cons</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717975"></A>    #&#92;Ctrl-&#92;e </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717976"></A>    #'(lambda (tip)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717977"></A>        (setf (capi:text-input-pane-caret-position tip)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717978"></A>              (length (capi:text-input-pane-text tip)))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717979"></A>   (cons</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717980"></A>    #&#92;Ctrl-&#92;a</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717981"></A>    #'(lambda (tip)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717982"></A>        (setf (capi:text-input-pane-caret-position tip)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717983"></A>              0)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717984"></A>   (cons </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8717985"></A>    #&#92;Ctrl-6 'do-something-else))))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-1742503"></A>There is a further example in the file <CODE CLASS="Code">
examples/capi/elements/text-input-pane.lisp</CODE>
</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-917109"></A>See also</H5>
<P CLASS="RBody">
<A NAME="pgfId-1431708"></A><A HREF="capiref-81.htm#33757" CLASS="XRef">display-pane</A><BR>
<A HREF="capiref-115.htm#14465" CLASS="XRef">editor-pane</A><BR>
<A HREF="capiref-255.htm#47443" CLASS="XRef">multi-line-text-input-pane</A><BR>
<A HREF="capiref-429.htm#26342" CLASS="XRef">text-input-choice</A><BR>
<A HREF="capiref-437.htm#61740" CLASS="XRef">text-input-pane-complete-text</A><BR>
<A HREF="capiref-446.htm#text-input-range" CLASS="XRef">text-input-range</A><BR>
<A HREF="capiref-447.htm#33746" CLASS="XRef">title-pane</A></P>
</DIV>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">CAPI Reference Manual - 15 Dec 2011</I></P>
<P><A HREF="capiref-431.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-429.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
