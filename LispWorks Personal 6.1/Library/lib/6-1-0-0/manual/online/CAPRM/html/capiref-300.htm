<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="capiref.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 popup-confirmer
</TITLE>

<LINK REL="next" HREF="capiref-301.htm" TYPE="text/html">
<LINK REL="prev" HREF="capiref-299.htm" TYPE="text/html">
<LINK REL="up" HREF="capiref-4.htm" TYPE="text/html">
<LINK REL="top" HREF="capiref.htm" TYPE="text/html">
<LINK REL="contents" HREF="capiref-2.htm" TYPE="text/html">
<LINK REL="index" HREF="capiref-693.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="capiref.htm">CAPI Reference Manual</A> &gt; <A HREF="capiref-4.htm">1 CAPI Reference Entries</A><BR><BR>
</DIV><A HREF="capiref-301.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-299.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H4 CLASS="REntry">
<A NAME="pgfId-2103162"></A><A NAME="12695"></A>popup<A NAME="marker-4195972"></A>-confirmer</H4>
<DIV>
<H5 CLASS="REntry-type">
<A NAME="pgfId-904679"></A>Function</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-904549"></A>Summary</H5>
<P CLASS="RBody">
<A NAME="pgfId-1144887"></A>The <CODE CLASS="Code">
popup-confirmer</CODE>
 function creates a dialog with predefined implementations of <B CLASS="Button">
OK</B>
 and <B CLASS="Button">
Cancel</B>
 buttons and a user specified pane in a layout with the buttons.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-4186773"></A>Package</H5>
<P CLASS="RSignature">
<A NAME="pgfId-4186774"></A>capi</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-2027547"></A>Signature</H5>
<P CLASS="RSignature">
<A NAME="pgfId-2030147"></A>popup-confirmer <EM CLASS="Variable">
pane</EM>
 <EM CLASS="Variable">
message</EM>
 &amp;rest <EM CLASS="Variable">
interface-args</EM>
 &amp;key <EM CLASS="Variable">
modal</EM>
 <EM CLASS="Variable">
title</EM>
 <EM CLASS="Variable">
title-font</EM>
 <EM CLASS="Variable">
value-function</EM>
 <EM CLASS="Variable">
exit-function</EM>
 <EM CLASS="Variable">
apply-function</EM>
 <EM CLASS="Variable">
apply-check</EM>
 <EM CLASS="Variable">
apply-button</EM>
 <EM CLASS="Variable">
ok-function</EM>
 <EM CLASS="Variable">
ok-check</EM>
 <EM CLASS="Variable">
ok-button</EM>
 <EM CLASS="Variable">
no-button</EM>
 <EM CLASS="Variable">
no-function</EM>
 <EM CLASS="Variable">
all-button</EM>
 <EM CLASS="Variable">
all-function</EM>
 <EM CLASS="Variable">
cancel-button</EM>
 <EM CLASS="Variable">
help-button</EM>
 <EM CLASS="Variable">
help-function</EM>
 <EM CLASS="Variable">
buttons</EM>
 <EM CLASS="Variable">
print-function</EM>
 <EM CLASS="Variable">
callbacks</EM>
 <EM CLASS="Variable">
callback-type</EM>
 <EM CLASS="Variable">
button-position</EM>
 <EM CLASS="Variable">
buttons-uniform-size-p</EM>
 <EM CLASS="Variable">
foreground</EM>
 <EM CLASS="Variable">
background</EM>
 <EM CLASS="Variable">
font  screen</EM>
 <EM CLASS="Variable">
focus</EM>
 <EM CLASS="Variable">
owner</EM>
 <EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
 <EM CLASS="Variable">
position-relative-to</EM>
 <EM CLASS="Variable">
button-container</EM>
 <EM CLASS="Variable">
button-font</EM>
 <EM CLASS="Variable">
continuation</EM>
 <EM CLASS="Variable">
callback-error-handler</EM>
 =&gt; <EM CLASS="Variable">
result</EM>
, <EM CLASS="Variable">
successp</EM>
</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-2031979"></A>Arguments</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2031983"></A><EM CLASS="Variable">
pane</EM>
</P>
<P CLASS="RDescription-C">A CAPI pane or interface.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2031992"></A><EM CLASS="Variable">
message</EM>
</P>
<P CLASS="RDescription-C">A string or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2032019"></A><EM CLASS="Variable">
modal</EM>
, <EM CLASS="Variable">
screen</EM>
, <EM CLASS="Variable">
focus</EM>
, <EM CLASS="Variable">
owner</EM>
, <EM CLASS="Variable">
x</EM>
, <EM CLASS="Variable">
y</EM>
, and <EM CLASS="Variable">
position-relative-to</EM>
 </P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2034474"></A>These are<EM CLASS="Variable">
 </EM>
passed to <A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A>.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2034483"></A><EM CLASS="Variable">
title</EM>
</P>
<P CLASS="RDescription-C">A string specifying the title of the dialog window.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2034493"></A><EM CLASS="Variable">
title-font</EM>
</P>
<P CLASS="RDescription-C">The font used in the title.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2037511"></A><EM CLASS="Variable">
value-function</EM>
</P>
<P CLASS="RDescription-C">Controls the value returned, and whether a value can be returned.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2037517"></A><EM CLASS="Variable">
exit-function</EM>
</P>
<P CLASS="RDescription-C">Called on exiting the dialog.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2037699"></A><EM CLASS="Variable">
apply-function</EM>
, <EM CLASS="Variable">
apply-check</EM>
, <EM CLASS="Variable">
apply-button</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2034520"></A>Define the callback, check function and title an <B CLASS="Button">
Apply</B>
 button.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2037822"></A><EM CLASS="Variable">
ok-function, ok-check, ok-button</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2038941"></A>Define the callback, check function and title of an <B CLASS="Button">
OK</B>
 button.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2037823"></A><EM CLASS="Variable">
no-button, no-function</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2038935"></A>Define the title and callback of a <B CLASS="Button">
No</B>
 button.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2034574"></A><EM CLASS="Variable">
all-button</EM>
, <EM CLASS="Variable">
all-function</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2034584"></A>Define the title and callback of an <B CLASS="Button">
All</B>
 button.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2037862"></A><EM CLASS="Variable">
cancel-button</P>
<P CLASS="RDescription-C"></EM>
Defines the title of a <B CLASS="Button">
Cancel </B>
button.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2038997"></A><EM CLASS="Variable">
help-button</EM>
, <EM CLASS="Variable">
help-function</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2038998"></A>Define the title and callback of a <B CLASS="Button">
Help </B>
button.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2038999"></A><EM CLASS="Variable">
buttons</P>
<P CLASS="RDescription-C"></EM>
Defines extra buttons.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2035727"></A><EM CLASS="Variable">
print-function</P>
<P CLASS="RDescription-C"></EM>
Displays <EM CLASS="Variable">
ok-button</EM>
, <EM CLASS="Variable">
no-button</EM>
,<EM CLASS="Variable">
 cancel-button</EM>
, <EM CLASS="Variable">
apply-button</EM>
 and <EM CLASS="Variable">
all-button</EM>
 as button titles.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2038620"></A><EM CLASS="Variable">
callbacks</EM>
</P>
<P CLASS="RDescription-C">Defines callbacks for <EM CLASS="Variable">
buttons</EM>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2038621"></A><EM CLASS="Variable">
callback-type</EM>
</P>
<P CLASS="RDescription-C">Specifies the callback-type of <EM CLASS="Variable">
buttons</EM>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2036886"></A><EM CLASS="Variable">
button-position</EM>
</P>
<P CLASS="RDescription-C">One of <CODE CLASS="Code">
:bottom</CODE>
, <CODE CLASS="Code">
:top</CODE>
, <CODE CLASS="Code">
:left</CODE>
, <CODE CLASS="Code">
:right</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6694758"></A><EM CLASS="Variable">
buttons-uniform-size-p</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6694815"></A>Controls relative button sizes.</P>
<P CLASS="RDescription">
<A NAME="pgfId-2036922"></A><EM CLASS="Variable">
foreground</EM>
, <EM CLASS="Variable">
background</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2036923"></A>Specify colors.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2037415"></A><EM CLASS="Variable">
font</EM>
</P>
<P CLASS="RDescription-C">A font or a font description.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-4283563"></A><EM CLASS="Variable">
button-font</EM>
</P>
<P CLASS="RDescription-C">A font or a font description.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2037427"></A><EM CLASS="Variable">
button-container</EM>
</P>
<P CLASS="RDescription-C">A layout controlling where the buttons of the dialog appear.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-6662173"></A><EM CLASS="Variable">
continuation</EM>
</P>
<P CLASS="RDescription-C">A function or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-8673251"></A><EM CLASS="Variable">
callback-error-handler</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8673270"></A>A function designator or <CODE CLASS="Code">
nil</CODE>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-2038634"></A>Values</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2038638"></A><EM CLASS="Variable">
result</EM>
</P>
<P CLASS="RDescription-C">The result of <EM CLASS="Variable">
value-function</EM>
, or <EM CLASS="Variable">
pane</EM>
, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2038644"></A><EM CLASS="Variable">
successp</EM>
</P>
<P CLASS="RDescription-C"><CODE CLASS="Code">
nil</CODE>
 if the dialog was cancelled, <CODE CLASS="Code">
t</CODE>
 otherwise.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-2035728"></A>Description</H5>
<P CLASS="RBody">
<A NAME="pgfId-904561"></A>The function <CODE CLASS="Code">
popup-confirmer</CODE>
 provides the quickest means to create new dialogs, as it will create and implement <B CLASS="Button">
OK</B>
, <B CLASS="Button">
Cancel</B>
 and other buttons as required by your dialog, and will place a user-specified pane in a layout along with the buttons.</P>
<P CLASS="RBody">
<A NAME="pgfId-6822430"></A>Generally the <CODE CLASS="Code">
Return</CODE>
<A NAME="marker-6822451"></A> key selects the dialog's <B CLASS="Button">
OK</B>
 button and the <CODE CLASS="Code">
Escape</CODE>
<A NAME="marker-6822452"></A> key selects the <B CLASS="Button">
Cancel</B>
 button, if there is one.</P>
<P CLASS="RBody">
<A NAME="pgfId-904565"></A>The argument <EM CLASS="Variable">
value-function</EM>
 should provide a callback which is passed <EM CLASS="Variable">
pane</EM>
 and should return the value to return from <CODE CLASS="Code">
popup-confirmer</CODE>
. If <EM CLASS="Variable">
value-function</EM>
 is not supplied, then <EM CLASS="Variable">
pane</EM>
 itself will be returned as <EM CLASS="Variable">
result</EM>
. If the <EM CLASS="Variable">
value-function</EM>
 wants to indicate that the dialog cannot return a value currently, then it should return a second value that is non-nil. </P>
<P CLASS="RBody">
<A NAME="pgfId-904570"></A>The <EM CLASS="Variable">
ok-check</EM>
 function is passed the result returned by the <EM CLASS="Variable">
value-function</EM>
 and should return true if it is acceptable for that value to be returned. These two functions are used by <CODE CLASS="Code">
popup-confirmer</CODE>
 to decide when the <B CLASS="Button">
OK</B>
 button should be enabled, thus stopping the dialog from returning with invalid data. The <B CLASS="Button">
OK </B>
button's state can be updated by a call to <A HREF="capiref-345.htm#16471" CLASS="XRef">redisplay-interface</A> on the top-level, so the dialog should call it when the button may enable or disable. </P>
<P CLASS="RBody">
<A NAME="pgfId-904576"></A>The arguments <EM CLASS="Variable">
ok-button</EM>
, <EM CLASS="Variable">
no-button</EM>
 and <EM CLASS="Variable">
cancel-button</EM>
 are the text strings for each button, or <CODE CLASS="Code">
nil </CODE>
meaning do not include that button. The <EM CLASS="Variable">
ok-button</EM>
 returns successfully from the dialog (with the result of <EM CLASS="Variable">
value-function</EM>
), the <EM CLASS="Variable">
no-button</EM>
 means continue but return <CODE CLASS="Code">
nil</CODE>
, and the <EM CLASS="Variable">
cancel-button</EM>
 aborts the dialog. Note that there are clear expectations on the part of users as to the functions of these buttons -- check the style guidelines of the platform you are developing for.</P>
<P CLASS="RBody">
<A NAME="pgfId-2034531"></A><EM CLASS="Variable">
apply-button</EM>
, if passed, specifies the title of an extra button which appears near to the <B CLASS="Button">
OK</B>
 button. <EM CLASS="Variable">
apply-check</EM>
 and <EM CLASS="Variable">
apply-function</EM>
 define its functionality.</P>
<P CLASS="RBody">
<A NAME="pgfId-2034870"></A><EM CLASS="Variable">
all-button</EM>
, if passed, specifies the title of an extra button which is always enabled and which appears near to the <EM CLASS="Variable">
apply-button</EM>
 (if that exists) or the <B CLASS="Button">
OK</B>
 button. <EM CLASS="Variable">
all-function</EM>
 defines its functionality.</P>
<P CLASS="RBody">
<A NAME="pgfId-2034980"></A><EM CLASS="Variable">
help-button</EM>
, if passed, specifies the title of a help button which appears to the right of the <B CLASS="Button">
Cancel</B>
 button. <EM CLASS="Variable">
help-function</EM>
 defines its functionality.</P>
<P CLASS="RBody">
<A NAME="pgfId-2036636"></A><EM CLASS="Variable">
print-function</EM>
 is called on the various <EM CLASS="Variable">
button</EM>
 arguments to generate a string to display for each button title.</P>
<P CLASS="RBody">
<A NAME="pgfId-2036879"></A><EM CLASS="Variable">
button-position</EM>
 specifies where to put the buttons. The default is <CODE CLASS="Code">
:bottom</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-6694849"></A><EM CLASS="Variable">
buttons-uniform-size-p</EM>
 specifies whether the buttons are all the same size, regardless of the text on them. The default is <CODE CLASS="Code">
t</CODE>
, but <CODE CLASS="Code">
nil</CODE>
 can be passed to make each button only as wide as its text.</P>
<P CLASS="RBody">
<A NAME="pgfId-2036933"></A><EM CLASS="Variable">
foreground</EM>
 and <EM CLASS="Variable">
background</EM>
 specify colors to use for the parts of the dialog other than <EM CLASS="Variable">
pane</EM>
, including the buttons </P>
<P CLASS="RBody">
<A NAME="pgfId-2037408"></A><EM CLASS="Variable">
font</EM>
 specifies the font to use in the <EM CLASS="Variable">
message</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-4285563"></A><EM CLASS="Variable">
button-font</EM>
 specifies the font to use in the buttons.</P>
<P CLASS="RBody">
<A NAME="pgfId-2037485"></A><EM CLASS="Variable">
button-container</EM>
 indicates where the buttons of the dialog appear. It must be a layout which is a descendent of <EM CLASS="Variable">
pane</EM>
. The description of this layout is automatically set to the button-panel containing the buttons.</P>
<P CLASS="RBody">
<A NAME="pgfId-1522357"></A>The arguments <EM CLASS="Variable">
exit-function</EM>
, <EM CLASS="Variable">
ok-function</EM>
 and <EM CLASS="Variable">
no-function</EM>
 are the callbacks that get done when exiting, pressing <B CLASS="Button">
OK</B>
 and pressing <B CLASS="Button">
No</B>
 respectively. The <EM CLASS="Variable">
exit-function</EM>
 defaults to <A HREF="capiref-135.htm#20714" CLASS="XRef">exit-confirmer</A>, the <EM CLASS="Variable">
ok-function</EM>
 defaults to the <EM CLASS="Variable">
exit-function</EM>
 and the <EM CLASS="Variable">
no-function</EM>
 defaults to a function exiting the dialog with <CODE CLASS="Code">
nil</CODE>
. </P>
<P CLASS="RBody">
<A NAME="pgfId-1522358"></A>The arguments <EM CLASS="Variable">
buttons</EM>
, <EM CLASS="Variable">
callbacks</EM>
 and <EM CLASS="Variable">
callback-type</EM>
 are provided as a means of extending the available buttons. The buttons provided by <EM CLASS="Variable">
buttons</EM>
 will be placed after the buttons generated by <CODE CLASS="Code">
popup-confirmer</CODE>
, with the functions in <EM CLASS="Variable">
callbacks</EM>
 being associated with them. Finally <EM CLASS="Variable">
callback-type</EM>
 will be provided as the callback type for the buttons.</P>
<P CLASS="RBody">
<A NAME="pgfId-5489089"></A>If any of <EM CLASS="Variable">
callbacks</EM>
 need to access <EM CLASS="Variable">
pane</EM>
, you could use <A HREF="capiref-56.htm#86669" CLASS="XRef">confirmer-pane</A> together with a <EM CLASS="Variable">
callback-type</EM>
 that passes the interface.</P>
<P CLASS="RBody">
<A NAME="pgfId-6662192"></A>If <A NAME="marker-6691210"></A><EM CLASS="Variable">
continuation</EM>
 is non-nil, then it must be a function with a lambda list that accepts two arguments. The <EM CLASS="Variable">
continuation</EM>
 function is called with the values that would normally be returned by <CODE CLASS="Code">
popup-confirmer</CODE>
. On Cocoa, passing <EM CLASS="Variable">
continuation</EM>
 causes the dialog to be made as a <A NAME="marker-6694706"></A>window-modal sheet and <CODE CLASS="Code">
popup-confirmer</CODE>
 returns immediately, leaving the dialog on the screen. The <A HREF="capiref-482.htm#92889" CLASS="XRef">with-dialog-results</A> macro provides a convenient way to create a <EM CLASS="Variable">
continuation</EM>
 function.</P>
<P CLASS="RBody">
<A NAME="pgfId-8673369"></A><EM CLASS="Variable">
callback-error-handler</EM>
, if non-nil, should be a function designator for a function of one argument which is a condition, like the <EM CLASS="Variable">
handler-function</EM>
 in <CODE CLASS="Code">
cl:handler-bind</CODE>
. The handler is established (by <CODE CLASS="Code">
cl:handler-bind</CODE>
 with type <CODE CLASS="Code">
cl:error</CODE>
) around each callback call inside the scope of <CODE CLASS="Code">
popup-confirmer</CODE>
 or <A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A>. In recursive calls, only the handler of the innermost call to <CODE CLASS="Code">
popup-confirmer</CODE>
 or <A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A> is established.</P>
<P CLASS="RBody">
<A NAME="pgfId-8673376"></A><EM CLASS="Variable">
callback-error-handler</EM>
 can use <A HREF="capiref-64.htm#15438" CLASS="XRef">current-popup</A> to find the popup (first argument to the innermost call of <A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A> or <CODE CLASS="Code">
popup-confirmer</CODE>
).</P>
<P CLASS="RBody">
<A NAME="pgfId-8647573"></A>If <EM CLASS="Variable">
callback-error-handler</EM>
 wants to do a non-local exit, it should either call <A HREF="capiref-5.htm#53625" CLASS="XRef">abort-callback</A> to abort the callback but leave the dialog, or <A HREF="capiref-136.htm#33351" CLASS="XRef">exit-dialog</A> (or <A HREF="capiref-6.htm#24290" CLASS="XRef">abort-dialog</A>) to exit (or abort) the dialog.</P>
<P CLASS="RBody">
<A NAME="pgfId-904590"></A>All other arguments will be passed to the call to <CODE CLASS="Code">
make-instance</CODE>
 for the interface that will be displayed using <A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A>. Thus geometry information, colors, and so on can be passed in here as well. By default, the dialog will pick up the foreground, background and font of <EM CLASS="Variable">
pane</EM>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-8690373"></A>Notes</H5>
<OL>
<LI CLASS="RStep-1">
<A NAME="pgfId-8690374"></A>On Windows and Motif, the effect of <EM CLASS="Variable">
callback-error-handler</EM>
 can be achieved by using <CODE CLASS="Code">
cl:handler-bind</CODE>
 around the call to <A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A> or <CODE CLASS="Code">
popup-confirmer</CODE>
 (the handler will also handle errors during raising the dialog, but these are not expected to happen). On Cocoa, using such an error handler does not necessarily work, because the callback may happen in another process. <EM CLASS="Variable">
callback-error-handler</EM>
 ensures that the callback is in the scope of the handler on all plaforms. From the same reason the handler should not rely on the dynamic environment (including catchers and restarts), and needs to use <A HREF="capiref-64.htm#15438" CLASS="XRef">current-popup</A> to find its &quot;context&quot; and use <A HREF="capiref-5.htm#53625" CLASS="XRef">abort-callback</A>, <A HREF="capiref-136.htm#33351" CLASS="XRef">exit-dialog</A> or <A HREF="capiref-6.htm#24290" CLASS="XRef">abort-dialog</A> for non-local exit.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-8690392"></A>If the callback itself calls <CODE CLASS="Code">
popup-confirmer</CODE>
 or <A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A>, the <EM CLASS="Variable">
callback-error-handler </EM>
handler will stay until the callback returns. Unless the recursive call handles the error, the handler of the outer call may be called to handle it, and needs to be written to deal with this possibility correctly. If the handler inside a recursive call needs to access the popup that was used in the same call that the handler was used, it should close over it, because <A HREF="capiref-64.htm#15438" CLASS="XRef">current-popup</A> returns the innermost one.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-8690397"></A>A handler that is established by the callback (by <CODE CLASS="Code">
cl:handler-bind</CODE>
 or <CODE CLASS="Code">
cl:handler-case</CODE>
) is inside the scope of the <EM CLASS="Variable">
callback-error-handler</EM>
, and therefore will be called first.</LI>
</OL>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-6662187"></A>Example</H5>
<P CLASS="RBody">
<A NAME="pgfId-904596"></A>Here are two simple examples which implement the basic functionality of two CAPI prompters: the first implements a simple <CODE CLASS="Code">
prompt-for-string</CODE>
, while the second implements <CODE CLASS="Code">
prompt-for-confirmation</CODE>
. </P>
<PRE CLASS="RCode-first"><A NAME="pgfId-904599"></A>(capi:popup-confirmer</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904600"></A>  (make-instance 'capi:text-input-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904601"></A>                 :callback </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904759"></A>                 'capi:exit-confirmer)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904602"></A>  &quot;Enter some text:&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904603"></A>  :value-function 'capi:text-input-pane-text)</PRE>
<PRE CLASS="RCode-first"><A NAME="pgfId-904608"></A>(capi:popup-confirmer nil </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1145178"></A>  &quot;Yes or no?&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904610"></A>  :callback-type :none</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904611"></A>  :ok-button &quot;Yes&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904612"></A>  :no-button &quot;No&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904613"></A>  :cancel-button nil</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904614"></A>  :value-function #'(lambda (dummy) t))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-904619"></A>This example demonstrates the use of <CODE CLASS="Code">
:redisplay-interface</CODE>
 to make the <B CLASS="Button">
OK</B>
 button enable and disable on each keystroke. </P>
<PRE CLASS="RCode-first"><A NAME="pgfId-904622"></A>(defun pane-integer (pane)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904623"></A>  (ignore-errors (values</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904625"></A>                   (read-from-string</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904626"></A>                    (capi:text-input-pane-text</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-904627"></A>                     pane)))))</PRE>
<PRE CLASS="RCode-first"><A NAME="pgfId-904631"></A>(capi:popup-confirmer</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904632"></A>  (make-instance 'capi:text-input-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904634"></A>                 :callback 'capi:exit-confirmer</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904635"></A>                 :change-callback :redisplay-interface)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904636"></A>  &quot;Enter an integer&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-904637"></A>  :value-function 'pane-integer</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-904638"></A>  :ok-check 'integerp)</PRE>
<P CLASS="RBody">
<A NAME="pgfId-2043966"></A>An example illustrating the use of <CODE CLASS="Code">
:button-container</CODE>
:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-2048495"></A>(let* ((bt (make-instance 'capi:simple-layout </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048496"></A>                          :title &quot;Button Container&quot; </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048497"></A>                          :title-position :left))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048498"></A>       (tip1 (make-instance 'capi:text-input-pane </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048499"></A>                            :title &quot;Top&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048500"></A>       (tip2 (make-instance 'capi:text-input-pane </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048501"></A>                            :title &quot;Bottom&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048502"></A>       (layout (make-instance 'capi:column-layout </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048503"></A>                              :description</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048504"></A>                              (list tip1 </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048505"></A>                                    bt</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048506"></A>                                    tip2))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048507"></A>  (capi:popup-confirmer layout nil </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048508"></A>                        :title </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2048509"></A>                        &quot;Dialog using button-container&quot; </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-2048489"></A>                        :button-container bt))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-2052791"></A>An example with all the defined buttons in use:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-2060044"></A>(defun all-buttons-dialog (&amp;optional (num 20))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060045"></A>  (let ((pane </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060046"></A>         (make-instance 'capi:list-panel </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060047"></A>                        :items</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060048"></A>                        (loop for ii from 1 </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060049"></A>                              to num </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060050"></A>                              collect </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060051"></A>                              (format nil &quot;&#126;r&quot; ii))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060052"></A>                        :visible-min-width </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060053"></A>                        '(character 20))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060054"></A>    (capi:popup-confirmer</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060055"></A>     pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060056"></A>     &quot;All Buttons&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060057"></A>     :callback-type :none</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060058"></A>     :button-position :right</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060059"></A>     :cancel-button &quot;Cancel Button&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060060"></A>     :ok-button &quot;OK Button&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060061"></A>     :ok-function #'(lambda (x)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060062"></A>                      (declare (ignorable x))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060063"></A>                      (capi:exit-dialog </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060064"></A>                       (capi:choice-selected-item pane)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060065"></A>     :no-button &quot;No Button&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060066"></A>     :no-function </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060067"></A>     #'(lambda ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060068"></A>         (capi:exit-dialog </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060069"></A>          (cons :no </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060070"></A>                (capi:choice-selected-item pane))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060071"></A>     :apply-button &quot;Apply Button&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060072"></A>     :apply-function</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060073"></A>     #'(lambda ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060074"></A>         (capi:display-message </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060075"></A>          &quot;Applying to &#126;a&quot; </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060076"></A>          (capi:choice-selected-item pane)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060077"></A>     :help-button &quot;Help Button&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060078"></A>     :help-function </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060079"></A>     #'(lambda ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060080"></A>         (capi:display-message </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060081"></A>          &quot;&#126;a is &#126;:[an odd&#126;;an even&#126;] number&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060082"></A>          (capi:choice-selected-item pane)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060083"></A>          (oddp (capi:choice-selection pane))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060084"></A>     :all-button &quot;All Button&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060085"></A>     :all-function </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060086"></A>     #'(lambda()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2060087"></A>         (capi:exit-dialog </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-2060016"></A>          (capi:collection-items pane))))))</PRE>
<CODE CLASS="RCode-line">
<A NAME="pgfId-2062834"></A>(all-buttons-dialog)</CODE>
<P CLASS="RBody">
<A NAME="pgfId-2063009"></A>A dialog with arbitrary buttons:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-2063554"></A>(capi:popup-confirmer</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063010"></A> (make-instance 'capi:text-input-pane)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063011"></A> &quot;Dialog with arbitrary buttons&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063012"></A> :buttons '(:abc :xyz)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063013"></A> :callbacks</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063014"></A> (list #'(lambda (data) </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063015"></A>           (capi:display-message </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063016"></A>            &quot;Button &#126;A was pressed&quot; data))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063017"></A>       #'(lambda (data)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063018"></A>           (capi:display-message </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063019"></A>            &quot;Button with &#126;A was pressed, exiting with &#126;S&quot; data data)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-2063020"></A>           (capi:exit-dialog data)))</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-2062989"></A> :callback-type :data)</PRE>
<P CLASS="RBody">
<A NAME="pgfId-8660953"></A>This example illustrates the use of <EM CLASS="Variable">
callback-error-handler</EM>
:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-8673111"></A>(defun my-error-handler (condition)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673112"></A>  (let ((pane (capi:current-popup)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673113"></A>    (capi:display-message </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673114"></A>     &quot;Error inside dialog: &#126;a : &#126;a&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673115"></A>     (capi:capi-object-name pane)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673116"></A>     condition)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673117"></A>    (capi:abort-callback)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673118"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673119"></A>(let*</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673120"></A>    ((foo-callback </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673121"></A>      (lambda ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673122"></A>        (let ((md (make-instance </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673123"></A>                   'capi:push-button</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673124"></A>                   :text &quot;Error inside Callback-Error-Handler&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673125"></A>                   :name &quot;Chicken&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673126"></A>                   :callback-type :data</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673127"></A>                   :data &quot;Twisted ankle.&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673128"></A>                   :callback 'error)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673129"></A>          (capi:popup-confirmer</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673130"></A>           md nil</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673131"></A>           :callback-error-handler 'my-error-handler))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673132"></A>     (foo (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673133"></A>           'capi:push-button</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673134"></A>           :text</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673135"></A>           &quot;Popup confirmer with Callback-Error-Handler&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673136"></A>           :callback-type :none</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673137"></A>           :callback foo-callback))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673138"></A>     (bar (make-instance</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673139"></A>           'capi:push-button</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673140"></A>           :text &quot;Error without a handler&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673141"></A>           :callback-type :data</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673142"></A>           :data &quot;Broken leg.&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8673143"></A>           :callback 'error)))</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-8661011"></A>  (capi:contain (list foo bar)))</PRE>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-904647"></A>See also</H5>
<P CLASS="RBody">
<A NAME="pgfId-3055428"></A><A HREF="capiref-6.htm#24290" CLASS="XRef">abort-dialog</A><BR>
<A HREF="capiref-7.htm#57098" CLASS="XRef">abort-exit-confirmer</A><BR>
<A HREF="capiref-56.htm#86669" CLASS="XRef">confirmer-pane</A><BR>
<A HREF="capiref-77.htm#34181" CLASS="XRef">display-dialog</A><BR>
<A HREF="capiref-135.htm#20714" CLASS="XRef">exit-confirmer</A><BR>
<A HREF="capiref-136.htm#33351" CLASS="XRef">exit-dialog</A></P>
</DIV>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">CAPI Reference Manual - 15 Dec 2011</I></P>
<P><A HREF="capiref-301.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-299.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
