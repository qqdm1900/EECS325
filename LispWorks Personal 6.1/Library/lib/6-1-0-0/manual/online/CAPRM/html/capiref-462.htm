<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="capiref.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 tree-view
</TITLE>

<LINK REL="next" HREF="capiref-463.htm" TYPE="text/html">
<LINK REL="prev" HREF="capiref-461.htm" TYPE="text/html">
<LINK REL="up" HREF="capiref-4.htm" TYPE="text/html">
<LINK REL="top" HREF="capiref.htm" TYPE="text/html">
<LINK REL="contents" HREF="capiref-2.htm" TYPE="text/html">
<LINK REL="index" HREF="capiref-693.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="capiref.htm">CAPI Reference Manual</A> &gt; <A HREF="capiref-4.htm">1 CAPI Reference Entries</A><BR><BR>
</DIV><A HREF="capiref-463.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-461.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H4 CLASS="REntry">
<A NAME="pgfId-1181992"></A><A NAME="81588"></A>tree<A NAME="marker-4234111"></A>-view</H4>
<DIV>
<H5 CLASS="REntry-type">
<A NAME="pgfId-1179852"></A>Class</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1179859"></A>Summary</H5>
<P CLASS="RBody">
<A NAME="pgfId-1213021"></A>A tree view is a pane that displays a hierarchical list of items. Each item may optionally have an image and a checkbox.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-4233892"></A>Package</H5>
<P CLASS="RSignature">
<A NAME="pgfId-4233893"></A>capi</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1213024"></A>Superclasses</H5>
<P CLASS="RSignature">
<A NAME="pgfId-1213026"></A><A HREF="capiref-33.htm#22482" CLASS="XRef">choice</A><BR>
<A HREF="capiref-449.htm#12473" CLASS="XRef">titled-object</A><BR>
<A HREF="capiref-408.htm#40919" CLASS="XRef">simple-pane</A></P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1213030"></A>Initargs</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213032"></A><CODE CLASS="Code">
:roots</CODE>
<A NAME="marker-2181020"></A></P>
<P CLASS="RDescription-C">A list of the root nodes.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213033"></A><CODE CLASS="Code">
:children-function</CODE>
<A NAME="marker-2181025"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2181102"></A>Returns the children of a node.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213036"></A><CODE CLASS="Code">
:leaf-node-p-function</CODE>
<A NAME="marker-2181040"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1214020"></A>Optional function which determines whether a node is a leaf node (that is, has no children). This is useful if it can be computed faster than the <EM CLASS="Variable">
children-function</EM>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213040"></A><CODE CLASS="Code">
:retain-expanded-nodes</CODE>
<A NAME="marker-2181045"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1214117"></A>Specifies if the tree view remembers whether hidden nodes were expanded.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213043"></A><CODE CLASS="Code">
:expandp-function</CODE>
<A NAME="marker-2181050"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1214306"></A>A designator for a function of one argument, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-3015355"></A><CODE CLASS="Code">
:action-callback-expand-p</CODE>
<A NAME="marker-3015354"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3015257"></A>A boolean. The default value is <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9329066"></A><CODE CLASS="Code">
:delete-item-callback</CODE>
<A NAME="marker-9329065"></A><A NAME="marker-9857083"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9329067"></A>A function designator for a function of two arguments.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3025722"></A><CODE CLASS="Code">
:right-click-extended-match</CODE>
<A NAME="marker-3025721"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3026276"></A>Controls the area within which selection by the mouse right button occurs. Default <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3026278"></A><CODE CLASS="Code">
:has-root-line</CODE>
<A NAME="marker-3026277"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3026279"></A>Controls whether the line and expanding boxes of the root nodes are drawn. Default <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-10645253"></A>Initargs for handling check boxes. Note that these do not work on Cocoa:</P>
<P CLASS="RDescription">
<A NAME="pgfId-3026281"></A><CODE CLASS="Code">
:checkbox-status</CODE>
<A NAME="marker-3026280"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3026282"></A>Controls whether the tree has checkboxes, except on Cocoa. If non-nil, the value should be a non-negative integer less than the length of the image-list, or <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8117628"></A>An integer specifies the default initial status, and <CODE CLASS="Code">
t</CODE>
 means the same as 2 (that is, by default the checkboxes are checked initially).</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-8117637"></A>The default is <CODE CLASS="Code">
nil</CODE>
, meaning no checkboxes.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3025731"></A><CODE CLASS="Code">
:checkbox-next-map</CODE>
<A NAME="marker-3025730"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3025732"></A>Controls the change in status when the user clicks on a checkbox. Can be an array, a function or an integer. Default <CODE CLASS="Code">
#(2 2 0)</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3025734"></A><CODE CLASS="Code">
:checkbox-parent-function</CODE>
<A NAME="marker-3025733"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3025735"></A>Controls the changes in the ancestors when the status of an item is changed.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3025737"></A><CODE CLASS="Code">
:checkbox-child-function</CODE>
<A NAME="marker-3025736"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3025738"></A>Controls the changes in the descendents when the status of an item is changed.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3025740"></A><CODE CLASS="Code">
:checkbox-change-callback</CODE>
<A NAME="marker-3025739"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3040437"></A>A function called when the status of an item is changed interactively.</P>
<P CLASS="RDescription">
<A NAME="pgfId-3040442"></A><CODE CLASS="Code">
:checkbox-initial-status</CODE>
<A NAME="marker-3040441"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-3040443"></A>Specifies the initial status of specific items.</P>
<P CLASS="RBody">
<A NAME="pgfId-10238179"></A>Initargs for handling images:</P>
<P CLASS="RDescription">
<A NAME="pgfId-10238181"></A><CODE CLASS="Code">
:image-function</CODE>
<A NAME="marker-10238180"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-10238182"></A>Returns an image for a node.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-10238184"></A><CODE CLASS="Code">
:state-image-function</CODE>
<A NAME="marker-10238183"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-10238185"></A>Returns a state image for a node.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-10238187"></A><CODE CLASS="Code">
:image-lists</CODE>
<A NAME="marker-10238186"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-10238191"></A>A plist of keywords and <A HREF="capiref-177.htm#12301" CLASS="XRef">image-list</A> objects.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-10238486"></A><CODE CLASS="Code">
:use-images</CODE>
<A NAME="marker-10238485"></A></P>
<P CLASS="RDescription-C">Flag to specify whether items have images. Defaults to <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-10238488"></A><CODE CLASS="Code">
:use-state-images</CODE>
<A NAME="marker-10238487"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-10238489"></A>Flag to specify whether items have state images. Defaults to <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-10238491"></A><CODE CLASS="Code">
:image-width</CODE>
<A NAME="marker-10238490"></A></P>
<P CLASS="RDescription-C">Defaults to 16.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-10238493"></A><CODE CLASS="Code">
:image-height</CODE>
<A NAME="marker-10238492"></A></P>
<P CLASS="RDescription-C">Defaults to 16.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-10238495"></A><CODE CLASS="Code">
:state-image-width</CODE>
<A NAME="marker-10238494"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-10238496"></A>Defaults to <EM CLASS="Variable">
image-width</EM>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-10238498"></A><CODE CLASS="Code">
:state-image-height</CODE>
<A NAME="marker-10238497"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-10238499"></A>Defaults to <EM CLASS="Variable">
image-height</EM>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1213059"></A>Accessors</H5>
<P CLASS="RSignature">
<A NAME="pgfId-10238812"></A><A NAME="marker-10238811"></A>tree-view-roots<BR>
<A NAME="marker-10238813"></A>tree-view-children-function<BR>
<A NAME="marker-10239162"></A>tree-view-image-function<BR>
<A NAME="marker-10239164"></A>tree-view-state-image-function<BR>
<A NAME="marker-10238814"></A>tree-view-leaf-node-p-function<BR>
<A NAME="marker-10238815"></A>tree-view-retain-expanded-nodes<BR>
<A NAME="marker-10238816"></A>tree-view-expandp-function<BR>
<A NAME="marker-10238817"></A>tree-view-action-callback-expand-p<BR>
<A NAME="marker-10238818"></A>tree-view-right-click-extended-match<BR>
<A NAME="marker-10238819"></A>tree-view-has-root-line<BR>
<A NAME="marker-10238820"></A>tree-view-checkbox-next-map<BR>
<A NAME="marker-10238821"></A>tree-view-checkbox-parent-function<BR>
<A NAME="marker-10238822"></A>tree-view-checkbox-status<BR>
<A NAME="marker-10238823"></A>tree-view-checkbox-child-function<BR>
<A NAME="marker-10238824"></A>tree-view-checkbox-change-callback<BR>
<A NAME="marker-10238825"></A>tree-view-checkbox-initial-status</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-10238829"></A>Readers</H5>
<P CLASS="RSignature">
<A NAME="pgfId-3040321"></A><A NAME="marker-3837733"></A>tree-view-checkbox-status</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-3040258"></A>Description</H5>
<P CLASS="RBody">
<A NAME="pgfId-3039969"></A>The tree view pane allows the user to select between items displayed in a hierarchical list. Although it is a choice, only single selection interaction is supported. Use <A HREF="capiref-138.htm#61508" CLASS="XRef">extended-selection-tree-view</A> if you need other selection interaction styles.</P>
<P CLASS="RBody">
<A NAME="pgfId-10267100"></A><EM CLASS="Variable">
expandp-function</EM>
 controls automatic expansion of nodes (items) in the <CODE CLASS="Code">
tree-view</CODE>
. By default, initially only the items specified by the <EM CLASS="Variable">
roots</EM>
 argument are displayed. This initial display can be altered by supplying a function <EM CLASS="Variable">
expandp-function</EM>
 which allows further items to be displayed. If supplied, <EM CLASS="Variable">
expandp-function</EM>
 should be a function which is called on the <EM CLASS="Variable">
roots</EM>
 and is called recursively on the children if it returns true. When the user expands a node, <EM CLASS="Variable">
expandp-function</EM>
 is called on each newly created child node, which is expanded if this call returns true, and so on recursively. The default value of <EM CLASS="Variable">
expandp-function</EM>
 is <CODE CLASS="Code">
nil</CODE>
 so that there is no automatic expansion and only the root nodes are visible initially.</P>
<P CLASS="RBody">
<A NAME="pgfId-10267127"></A>The default value of <EM CLASS="Variable">
retain-expanded-nodes</EM>
 is <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-1213078"></A>Any item which has children has a small expansion button next to it to indicate that it can be expanded. When the user clicks on this button, the children nodes (as determined by the children function) are displayed.</P>
<P CLASS="RBody">
<A NAME="pgfId-3016038"></A>If <EM CLASS="Variable">
action-callback-expand-p</EM>
 is true, then the activate gesture expands a collapsed node, and collapses an expanded node. This expansion and contraction of the node is additional to any supplied <EM CLASS="Variable">
action-callback</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-9328100"></A><EM CLASS="Variable">
delete-item-callback</EM>
 is called when the user presses the <B CLASS="Button">
Delete</B>
 key. Two arguments are passed: the <CODE CLASS="Code">
tree-view</CODE>
 and the selected item <EM CLASS="Variable">
item</EM>
. Note that, apart from calling the callback, the system does nothing in response to the <B CLASS="Button">
Delete</B>
 key. In particular, if you want to remove the selected <EM CLASS="Variable">
item</EM>
, <EM CLASS="Variable">
delete-item-callback</EM>
 needs to do it by changing what the <EM CLASS="Variable">
children-function</EM>
 returns when called on the parent of <EM CLASS="Variable">
item</EM>
. Normally you also need to to call <A HREF="capiref-468.htm#20364" CLASS="XRef">tree-view-update-item</A> with <EM CLASS="Variable">
in-parent</EM>
 = <CODE CLASS="Code">
t</CODE>
 to actually update the tree on the screen.</P>
<P CLASS="RBody">
<A NAME="pgfId-9327365"></A>Note also that in <A HREF="capiref-138.htm#61508" CLASS="XRef">extended-selection-tree-view</A> (a subclass of <CODE CLASS="Code">
tree-view</CODE>
), if the <EM CLASS="Variable">
interaction</EM>
 was not explictly changed to <CODE CLASS="Code">
:single-selection</CODE>
, the second argument to <EM CLASS="Variable">
delete-item-callback</EM>
 is a list of the selected items (even when only one item is selected).</P>
<P CLASS="RBody">
<A NAME="pgfId-1213082"></A>The <EM CLASS="Variable">
image-function</EM>
 is called on an item to return an image associated with the item. It can return one of the following:</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213085"></A>A pathname or string</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1215535"></A>This specifies the filename of a file suitable for loading with <A HREF="capiref-592.htm#43526" CLASS="XRef">load-image</A>. Currently this must be a bitmap file.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213089"></A>A symbol</P>
<P CLASS="RDescription-C">The symbol must have been previously registered by means of a call to <CODE CLASS="Code">
<A HREF="capiref-627.htm#80995" CLASS="XRef">register-image-translation</A></CODE>
. It can also one of the following symbols, which map to standard images: <CODE CLASS="Code">
:std-cut</CODE>
<A NAME="marker-10237610"></A>, <CODE CLASS="Code">
:std-copy</CODE>
<A NAME="marker-10237611"></A>, <CODE CLASS="Code">
:std-paste</CODE>
<A NAME="marker-10237612"></A>, <CODE CLASS="Code">
:std-undo</CODE>
<A NAME="marker-10237613"></A>, <CODE CLASS="Code">
:std-redo</CODE>
<A NAME="marker-10237614"></A>, <CODE CLASS="Code">
:std-delete</CODE>
<A NAME="marker-10237615"></A>, <CODE CLASS="Code">
:std-file-new</CODE>
<A NAME="marker-10237616"></A>, <CODE CLASS="Code">
:std-file-open</CODE>
<A NAME="marker-10237617"></A>, <CODE CLASS="Code">
:std-file-save</CODE>
<A NAME="marker-10237618"></A>, <CODE CLASS="Code">
:std-print</CODE>
<A NAME="marker-10237619"></A>, <CODE CLASS="Code">
:std-print-pre</CODE>
<A NAME="marker-10237620"></A>, <CODE CLASS="Code">
:std-properties</CODE>
<A NAME="marker-10237621"></A>, <CODE CLASS="Code">
:std-help</CODE>
<A NAME="marker-10237622"></A>, <CODE CLASS="Code">
:std-find</CODE>
<A NAME="marker-10237623"></A> and <CODE CLASS="Code">
:std-replace</CODE>
<A NAME="marker-10237624"></A>.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-10238065"></A><A NAME="marker-10238136"></A>On Microsoft Windows, the following symbols are also recognized. They map to view images: <CODE CLASS="Code">
:view-large-icons</CODE>
<A NAME="marker-10238066"></A>, <CODE CLASS="Code">
:view-small-icons</CODE>
<A NAME="marker-10238067"></A>, <CODE CLASS="Code">
:view-list</CODE>
<A NAME="marker-10238068"></A>, <CODE CLASS="Code">
:view-details</CODE>
<A NAME="marker-10238069"></A>, <CODE CLASS="Code">
:view-sort-name</CODE>
<A NAME="marker-10238070"></A>, <CODE CLASS="Code">
:view-sort-size</CODE>
<A NAME="marker-10238074"></A>, <CODE CLASS="Code">
:view-sort-date</CODE>
<A NAME="marker-10238079"></A>, <CODE CLASS="Code">
:view-sort-type</CODE>
<A NAME="marker-10238084"></A>, <CODE CLASS="Code">
:view-parent-folder</CODE>
<A NAME="marker-10238089"></A>, <CODE CLASS="Code">
:view-net-connect</CODE>
<A NAME="marker-10263512"></A>, <CODE CLASS="Code">
:view-net-disconnect</CODE>
<A NAME="marker-10238094"></A> and <CODE CLASS="Code">
:view-new-folder</CODE>
<A NAME="marker-10238099"></A>.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-10237740"></A><A NAME="marker-10238141"></A>Also on Microsoft Windows, these symbols are recognized. They map to history images: <CODE CLASS="Code">
:hist-back</CODE>
<A NAME="marker-10238104"></A>, <CODE CLASS="Code">
:hist-forward</CODE>
<A NAME="marker-10238109"></A>, <CODE CLASS="Code">
:hist-favorites</CODE>
<A NAME="marker-10238114"></A>, <CODE CLASS="Code">
:hist-addtofavorites</CODE>
<A NAME="marker-10238119"></A> and <CODE CLASS="Code">
:hist-viewtree</CODE>
<A NAME="marker-10238131"></A>.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1213093"></A>An image object, as returned by <A HREF="capiref-592.htm#43526" CLASS="XRef">load-image</A>.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213095"></A>An image locator object</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-2181154"></A>This allowing a single bitmap to be created which contains several button images side by side. See <A HREF="capiref-232.htm#38910" CLASS="XRef">make-image-locator</A> for more information. On Microsoft Windows, it also allows access to bitmaps stored as resources in a DLL.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213103"></A>An integer</P>
<P CLASS="RDescription-C">This is a zero-based index into the tree-view's image lists. This is generally only useful if the image list is created explicitly. See <A HREF="capiref-177.htm#12301" CLASS="XRef">image-list</A> for more details.</P>
<P CLASS="RBody">
<A NAME="pgfId-1213109"></A>The <EM CLASS="Variable">
state-image-function</EM>
 is called on an item to determine the state image: an additional optional image used to indicate the state of an item. It can return one of the objects listed above, just as for <EM CLASS="Variable">
image-function</EM>
, or <CODE CLASS="Code">
nil</CODE>
 to indicate that there is no state image. See also <EM CLASS="Variable">
checkbox-status</EM>
, which overrides the <EM CLASS="Variable">
state-image-function</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-1213114"></A>If <EM CLASS="Variable">
image-lists</EM>
 is specified, it should be a plist containing the following keywords as keys. The corresponding values should be <A HREF="capiref-177.htm#12301" CLASS="XRef">image-list</A> objects.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213118"></A><CODE CLASS="Code">
:normal</CODE>
</P>
<P CLASS="RDescription-C">Specifies an <CODE CLASS="Code">
image-list</CODE>
 object that contains the item images. The <EM CLASS="Variable">
image-function</EM>
 should return a numeric index into this <CODE CLASS="Code">
image-list</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1213123"></A><CODE CLASS="Code">
:state</CODE>
</P>
<P CLASS="RDescription-C">Specifies an <CODE CLASS="Code">
image-list</CODE>
 object that contains the state images. The <EM CLASS="Variable">
state-image-function</EM>
 should return a numeric index into this <CODE CLASS="Code">
image-list</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036003"></A>If <EM CLASS="Variable">
right-click-extended-match</EM>
 is <CODE CLASS="Code">
nil</CODE>
, the mouse right button gesture within the tree view selects an item only when the cursor is on the item. Otherwise, this gesture also selects an item to the left or right of the cursor. The default for <EM CLASS="Variable">
right-click-extended-match</EM>
 is <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036004"></A>If <EM CLASS="Variable">
has-root-line</EM>
 is <CODE CLASS="Code">
nil</CODE>
, the vertical root line and expanding boxes of the root nodes are not drawn. This is useful in two cases:</P>
<UL>
<LI CLASS="RBullet">
<A NAME="pgfId-3036005"></A>When the tree view needs to be neater. Note that the user does not have a mouse gesture to expand the root node. Normally the programmer would compensate for this by making some other gesture call <CODE CLASS="Code">
(setf tree-view-expanded-p)</CODE>
.</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-3036006"></A>If a <EM CLASS="Variable">
children-function</EM>
 is not supplied, this can be used to create a pane like a list view with checkboxes (see below for details of checkboxes). This pane can be handled as if it is a typical choice, except that setting the items is done by <CODE CLASS="Code">
(setf tree-view-roots)</CODE>
 or by passing <CODE CLASS="Code">
:roots</CODE>
 to <CODE CLASS="Code">
make-instance</CODE>
. In a typical choice, you would do <CODE CLASS="Code">
(setf collection-items)</CODE>
 or pass <CODE CLASS="Code">
:items</CODE>
 to <CODE CLASS="Code">
make-instance</CODE>
.</LI>
</UL>
<P CLASS="RBody">
<A NAME="pgfId-3036007"></A>The default for <EM CLASS="Variable">
has-root-line</EM>
 is <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036008"></A>If the <EM CLASS="Variable">
checkbox-status</EM>
 is non-nil then the tree view provides an automatic way of using the state images as checkboxes (except on Cocoa where check boxes are not supported). The <EM CLASS="Variable">
state-image</EM>
 is defaulted to a set of images containing checkboxes and the <EM CLASS="Variable">
state-image-function</EM>
 is ignored, but each <EM CLASS="Variable">
item </EM>
has a status that is a non-negative integer no greater than the number of images in <EM CLASS="Variable">
state-image-list</EM>
. The status specifies which image is displayed alongside <EM CLASS="Variable">
item</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036009"></A>When <EM CLASS="Variable">
item</EM>
 is expanded in the tree for the first time, the status of each child is set to <EM CLASS="Variable">
item</EM>
's status. The status can be changed interactively by the user:</P>
<UL>
<LI CLASS="RBullet">
<A NAME="pgfId-3036010"></A>Left mouse button on a checkbox changes its status</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-3036011"></A>Space changes the status of all selected items.</LI>
</UL>
<P CLASS="RBody">
<A NAME="pgfId-3036012"></A>The status can also be read and set programmatically (see <A HREF="capiref-465.htm#77777" CLASS="XRef">tree-view-item-checkbox-status</A>). </P>
<P CLASS="RBody">
<A NAME="pgfId-3036016"></A>When the status of an item changes:</P>
<UL>
<LI CLASS="RBullet">
<A NAME="pgfId-3036017"></A>The statuses of its ancestors may change if a <EM CLASS="Variable">
checkbox-parent-function</EM>
 was supplied. </LI>
<LI CLASS="RBullet">
<A NAME="pgfId-3036018"></A>The statuses of an items descendents may change if a <EM CLASS="Variable">
checkbox-child-function</EM>
 was supplied. </LI>
<LI CLASS="RBullet">
<A NAME="pgfId-3036019"></A>A callback given by <EM CLASS="Variable">
checkbox-callback-function</EM>
 will be called, if this was supplied.</LI>
</UL>
<P CLASS="RBody">
<A NAME="pgfId-3036020"></A>By default checkboxes have three statuses indicated by images: un-checked(0), grey-checked(1) and checked(2). If an item is checked or un-checked, then all its decendents have the same status. If an item is grey-checked, then its descendents have various statuses. When the status of an item changes, all the descendents of that item change to the same status, and all its ancestors change to grey-checked.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036021"></A>For non-default status-changing behavior, specify <EM CLASS="Variable">
checkbox-next-map</EM>
. The value can be</P>
<UL>
<LI CLASS="RBullet">
<A NAME="pgfId-3036022"></A>An array of statuses. When the user clicks on <EM CLASS="Variable">
item</EM>
's checkbox, the status of <EM CLASS="Variable">
item</EM>
 is used to index into <EM CLASS="Variable">
checkbox-next-map</EM>
, and the status at that index becomes the new status of <EM CLASS="Variable">
item</EM>
. For example, with the default checkbox-next-map, checked(0) changes to un-checked(2), grey-checked(1) changes to un-checked(2), and un-checked(2) changes to checked(0).</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-3036338"></A>A function of two arguments. The first argument is a list of items and the second argument is their current status (and if the items have various statuses, the most common is used). <EM CLASS="Variable">
checkbox-next-map</EM>
 should return the new status to use.</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-3036339"></A>An integer: the status is increased by 1, until this integer is reached, at which point the status becomes 0 again.</LI>
</UL>
<P CLASS="RBody">
<A NAME="pgfId-3036025"></A>When the status of an item is changed, the statuses of items above and below it in the tree may also be changed: the system recurses up and down the tree using <EM CLASS="Variable">
checkbox-parent-function</EM>
 and <EM CLASS="Variable">
checkbox-child-function </EM>
respectively.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036373"></A>To recurse upwards, <EM CLASS="Variable">
checkbox-parent-function</EM>
 is called on the parent with five arguments: the parent, the parent's status, the item, the item's status and an flag which is non-nil if all the items at the same level as the item now have the same status:</P>
<P CLASS="RSignature">
<A NAME="pgfId-3036027"></A>checkbox-parent-function <EM CLASS="Variable">
parent</EM>
 <EM CLASS="Variable">
parent-status</EM>
 <EM CLASS="Variable">
item</EM>
 <EM CLASS="Variable">
item-status</EM>
 <EM CLASS="Variable">
all-items-same-p</EM>
 =&gt; <EM CLASS="Variable">
new-parent-status</EM>
, <EM CLASS="Variable">
recurse-up</EM>
, <EM CLASS="Variable">
recurse-down</EM>
</P>
<P CLASS="RBody">
<A NAME="pgfId-3036028"></A>If <EM CLASS="Variable">
new-parent-status</EM>
 differs from <EM CLASS="Variable">
parent-status</EM>
, then the status of <EM CLASS="Variable">
parent</EM>
 is set to <EM CLASS="Variable">
new-parent-status</EM>
. If <EM CLASS="Variable">
recurse-up</EM>
 is non-nil, then the system recurses up from parent, and if <EM CLASS="Variable">
recurse-down</EM>
 is non-nil, the system recurses down. The default <EM CLASS="Variable">
checkbox-parent-function</EM>
 returns <CODE CLASS="Code">
(values </CODE>
<EM CLASS="Variable">
new-item-status</EM>
<CODE CLASS="Code">
 t nil)</CODE>
 where <EM CLASS="Variable">
new-item-status</EM>
 is <EM CLASS="Variable">
item-status</EM>
 if <EM CLASS="Variable">
all-items-same-p</EM>
 is non-nil and <CODE CLASS="Code">
1</CODE>
 otherwise.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036029"></A>To recurse downwards, <EM CLASS="Variable">
checkbox-child-function</EM>
 is called on each child with four arguments and the results are used similarly to those of <EM CLASS="Variable">
checkbox-parent-function</EM>
:</P>
<P CLASS="RSignature">
<A NAME="pgfId-3036030"></A>checkbox-child-function <EM CLASS="Variable">
child</EM>
 <EM CLASS="Variable">
child-status</EM>
 <EM CLASS="Variable">
item</EM>
 <EM CLASS="Variable">
item-status</EM>
 =&gt; <EM CLASS="Variable">
new-child-status</EM>
, <EM CLASS="Variable">
recurse-up</EM>
, <EM CLASS="Variable">
recurse-down</EM>
</P>
<P CLASS="RBody">
<A NAME="pgfId-3036031"></A>The default <EM CLASS="Variable">
checkbox-child-function</EM>
 returns <CODE CLASS="Code">
(values </CODE>
<EM CLASS="Variable">
parent-status</EM>
<CODE CLASS="Code">
 nil t)</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036032"></A><B CLASS="Bold">
Note:</B>
 if an item has never been expanded, then it has no children. If an item has been collapsed, then it has children even though they are not currently visible.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036033"></A><EM CLASS="Variable">
checkbox-parent-function</EM>
 and <EM CLASS="Variable">
checkbox-child-function</EM>
 should not modify the tree in any way.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036034"></A><EM CLASS="Variable">
checkbox-change-callback</EM>
 takes three arguments: the tree, a list of items and their new status:</P>
<P CLASS="RSignature">
<A NAME="pgfId-3036035"></A>checkbox-change-callback <EM CLASS="Variable">
tree</EM>
 <EM CLASS="Variable">
items</EM>
 <EM CLASS="Variable">
new-status</EM>
</P>
<P CLASS="RBody">
<A NAME="pgfId-3036036"></A>This is called after the new statuses of <EM CLASS="Variable">
items</EM>
 and their ancestors and descendents have been resolved.</P>
<P CLASS="RBody">
<A NAME="pgfId-3036001"></A><EM CLASS="Variable">
checkbox-initial-status</EM>
 is used the first time that each specified item, which can be anywhere in the tree, appears. The value is a list of conses of items and their initial statuses, for example <CODE CLASS="Code">
((item1. 2) (item2. 0))</CODE>
. When <EM CLASS="Variable">
item</EM>
 is displayed, its status is set from this list or, if item is not specified, from <EM CLASS="Variable">
checkbox-status</EM>
. Items are removed from the list when they are displayed and setting the list does not affect the checkbox status of items that have already been displayed. Note that check boxes are not supported on Cocoa.</P>
<P CLASS="RBody">
<A NAME="pgfId-7892077"></A>The default value of <EM CLASS="Variable">
vertical-scroll</EM>
 in a <CODE CLASS="Code">
tree-view</CODE>
 is <CODE CLASS="Code">
t</CODE>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-5545927"></A>Notes</H5>
<OL>
<LI CLASS="RStep-1">
<A NAME="pgfId-8063150"></A>Since the items of a tree view are not computed until display time, the <A HREF="capiref-33.htm#22482" CLASS="XRef">choice</A> initarg <CODE CLASS="Code">
:selected-item</CODE>
<A NAME="marker-5546006"></A> has no effect. See the examples in <A HREF="capiref-186.htm#50103" CLASS="XRef">interface-display</A> for a way to set the selected item in a tree view.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-8063843"></A>Although <CODE CLASS="Code">
tree-view</CODE>
 is a subclass of <A HREF="capiref-45.htm#36673" CLASS="XRef">collection</A>, it does its own items handling and you must not access its <EM CLASS="Variable">
items</EM>
 and related slots directly. In particular for <CODE CLASS="Code">
tree-view</CODE>
 do not pass <CODE CLASS="Code">
:items</CODE>
<A NAME="marker-8063863"></A>, <CODE CLASS="Code">
:items-count-function</CODE>
<A NAME="marker-8063858"></A>, <CODE CLASS="Code">
:items-get-function</CODE>
<A NAME="marker-8063868"></A> or <CODE CLASS="Code">
:items-map-function</CODE>
<A NAME="marker-8063873"></A>, and do not use the corresponding accessors.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-9342073"></A>On Microsoft Windows, the system always sets the input focus to the <CODE CLASS="Code">
tree-view</CODE>
 after its <EM CLASS="Variable">
selection-callback</EM>
 returns. If you need this callback to set the focus elsewhere, call <A HREF="capiref-394.htm#11818" CLASS="XRef">set-pane-focus</A> outside the callback, like this:</LI>
</OL>
<PRE CLASS="RCode-first"><A NAME="pgfId-9343362"></A><CODE CLASS="Code">(mp:process-send </CODE>
<EM CLASS="Variable">process</EM>
</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-9343180"></A><CODE CLASS="Code">  (list 'capi:set-pane-focus </CODE>
<EM CLASS="Variable">pane</EM>
<CODE CLASS="Code">))</CODE>
</PRE>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1180099"></A>See also</H5>
<P CLASS="RBody">
<A NAME="pgfId-1995090"></A><A HREF="capiref-33.htm#22482" CLASS="XRef">choice</A><BR>
<A HREF="capiref-138.htm#61508" CLASS="XRef">extended-selection-tree-view</A><BR>
<A HREF="capiref-463.htm#81493" CLASS="XRef">tree-view-ensure-visible</A><BR>
<A HREF="capiref-464.htm#57335" CLASS="XRef">tree-view-expanded-p</A><BR>
<A HREF="capiref-465.htm#77777" CLASS="XRef">tree-view-item-checkbox-status</A><BR>
<A HREF="capiref-466.htm#49430" CLASS="XRef">tree-view-item-children-checkbox-status</A><BR>
<A HREF="capiref-468.htm#20364" CLASS="XRef">tree-view-update-item</A></P>
</DIV>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">CAPI Reference Manual - 15 Dec 2011</I></P>
<P><A HREF="capiref-463.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-461.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
