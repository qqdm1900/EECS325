<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="capiref.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 editor-pane
</TITLE>

<LINK REL="next" HREF="capiref-116.htm" TYPE="text/html">
<LINK REL="prev" HREF="capiref-114.htm" TYPE="text/html">
<LINK REL="up" HREF="capiref-4.htm" TYPE="text/html">
<LINK REL="top" HREF="capiref.htm" TYPE="text/html">
<LINK REL="contents" HREF="capiref-2.htm" TYPE="text/html">
<LINK REL="index" HREF="capiref-693.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="capiref.htm">CAPI Reference Manual</A> &gt; <A HREF="capiref-4.htm">1 CAPI Reference Entries</A><BR><BR>
</DIV><A HREF="capiref-116.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-114.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H4 CLASS="REntry">
<A NAME="pgfId-933886"></A><A NAME="14465"></A>editor<A NAME="marker-4043832"></A>-pane</H4>
<DIV>
<H5 CLASS="REntry-type">
<A NAME="pgfId-893426"></A>Class</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-893118"></A>Summary</H5>
<P CLASS="RBody">
<A NAME="pgfId-893120"></A>An editor pane is an editor that has all of the functionality described in the <I CLASS="Italic">
LispWorks Guide To The Editor</I>
. </P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-4043759"></A>Package</H5>
<P CLASS="RSignature">
<A NAME="pgfId-4043760"></A>capi</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-893123"></A>Superclasses</H5>
<P CLASS="RSignature">
<A NAME="pgfId-893125"></A><A HREF="capiref-275.htm#35026" CLASS="XRef">output-pane</A></P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-893127"></A>Subclasses</H5>
<P CLASS="RSignature">
<A NAME="pgfId-893129"></A><A HREF="capiref-182.htm#15385" CLASS="XRef">interactive-pane</A><BR>
<A HREF="capiref-50.htm#28877" CLASS="XRef">collector-pane</A></P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-893132"></A>Initargs</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893134"></A><CODE CLASS="Code">
:text</CODE>
<A NAME="marker-952828"></A></P>
<P CLASS="RDescription-C">A string or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-4844911"></A><CODE CLASS="Code">
:enabled</CODE>
<A NAME="marker-4844895"></A></P>
<P CLASS="RDescription-C"><CODE CLASS="Code">
t, nil</CODE>
 or <CODE CLASS="Code">
:read-only</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-4844954"></A><CODE CLASS="Code">
:buffer-modes</CODE>
<A NAME="marker-4844910"></A></P>
<P CLASS="RDescription-C">A list specifying the modes of the editor buffer.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-4844898"></A><CODE CLASS="Code">
:buffer-name</CODE>
<A NAME="marker-4844897"></A></P>
<P CLASS="RDescription-C">The name of the editor buffer.</P>
<P CLASS="RDescription">
<A NAME="pgfId-6734093"></A><CODE CLASS="Code">
:change-callback</CODE>
<A NAME="marker-6734092"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-6734098"></A>A function designator, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-7865548"></A><CODE CLASS="Code">
:before-input-callback</CODE>
<A NAME="marker-7865547"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7865549"></A>A function designator, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-7865554"></A><CODE CLASS="Code">
:after-input-callback</CODE>
<A NAME="marker-7865553"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7865555"></A>A function designator, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2574970"></A><CODE CLASS="Code">
:echo-area</CODE>
<A NAME="marker-2574969"></A></P>
<P CLASS="RDescription-C">A flag determining whether the editor pane has an Echo Area.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-2582700"></A><CODE CLASS="Code">
:fixed-fill</CODE>
<A NAME="marker-2582699"></A></P>
<P CLASS="RDescription-C">An integer specifying the fill length, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-7865618"></A><CODE CLASS="Code">
:line-wrap-marker</CODE>
<A NAME="marker-7865617"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7865643"></A>A <CODE CLASS="Code">
character</CODE>
, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-7865624"></A><CODE CLASS="Code">
:line-wrap-face</CODE>
<A NAME="marker-7865623"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7865698"></A>An <CODE CLASS="Code">
editor:face</CODE>
 object, or a symbol naming a face, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-9514762"></A><CODE CLASS="Code">
:wrap-style</CODE>
<A NAME="marker-9514761"></A></P>
<P CLASS="RDescription-C">An integer specifying the fill length, or <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-9514763"></A><CODE CLASS="Code">
:composition-face</CODE>
<A NAME="marker-9514777"></A><A NAME="marker-9857091"></A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-9514764"></A>Changes the editor face that is used by <A HREF="capiref-119.htm#21911" CLASS="XRef">editor-pane-default-composition-callback</A> to display the composition string. The default value is <CODE CLASS="Code">
:default</CODE>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-6735746"></A>Accessors</H5>
<P CLASS="RSignature">
<A NAME="pgfId-6735748"></A><CODE CLASS="Code">
</CODE>
<A NAME="marker-6735747"></A>editor-pane-text<BR>
<A NAME="marker-6735749"></A>editor-pane-change-callback<BR>
<A NAME="marker-6735750"></A>editor-pane-enabled<BR>
<A NAME="marker-6735751"></A>editor-pane-fixed-fill<BR>
<A NAME="marker-7865811"></A>editor-pane-line-wrap-marker<BR>
<A NAME="marker-7865816"></A>editor-pane-line-wrap-face<BR>
<A NAME="marker-7865822"></A>editor-pane-wrap-style<BR>
<A NAME="marker-9514881"></A><CODE CLASS="Code">
editor-pane-composition-face</CODE>
</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-6735752"></A>Description</H5>
<P CLASS="RBody">
<A NAME="pgfId-8466765"></A><EM CLASS="Variable">
enabled</EM>
 controls how user input affects the <CODE CLASS="Code">
editor-pane</CODE>
. If enabled is <CODE CLASS="Code">
nil</CODE>
, all input from the mouse and keyboard is ignored. When enabled is <CODE CLASS="Code">
t</CODE>
, all input is processed according to the <EM CLASS="Variable">
input-model</EM>
. When <EM CLASS="Variable">
enabled</EM>
 is <CODE CLASS="Code">
:read-only</CODE>
, input to the pane by keyboard or mouse gestures cannot change the text. More accurately, input via the default <EM CLASS="Variable">
input-model</EM>
 of editor-pane cannot change the text. The <B CLASS="Button">
Cut</B>
 and <B CLASS="Button">
Paste</B>
 menu entries are also disabled. When a user tries to change the text, the operation quietly aborts. Programmatic modifications of the text are still allowed (see Notes below for more detail).</P>
<P CLASS="RBody">
<A NAME="pgfId-8466845"></A>The enabled state can be set by the accessor <CODE CLASS="Code">
editor-pane-enabled</CODE>
. <CODE CLASS="Code">
capi:simple-pane-enabled</CODE>
 has the same effect when applied to an <CODE CLASS="Code">
editor-pane</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-1342516"></A>The <CODE CLASS="Code">
editor-pane</CODE>
 stores text in buffers which are uniquely named, and so to create an <CODE CLASS="Code">
editor-pane</CODE>
 using an existing buffer you should pass the <EM CLASS="Variable">
buffer-name</EM>
. To create an <CODE CLASS="Code">
editor-pane</CODE>
 with a new buffer, pass a <EM CLASS="Variable">
buffer-name</EM>
 that does not match any existing buffer. If <EM CLASS="Variable">
buffer-name</EM>
 is not passed, then the <CODE CLASS="Code">
editor-pane</CODE>
 uses some existing buffer.</P>
<P CLASS="RBody">
<A NAME="pgfId-8466888"></A>A non-empty string value of <EM CLASS="Variable">
text</EM>
 specifies the initial text displayed. Otherwise an existing editor buffer is displayed. The accessor <CODE CLASS="Code">
editor-pane-text</CODE>
 is provided to read and write the text in the editor buffer.</P>
<P CLASS="RBody">
<A NAME="pgfId-4844970"></A><EM CLASS="Variable">
buffer-modes</EM>
 allows you to specify the initial major mode and minor modes of the <CODE CLASS="Code">
editor-pane</CODE>
's buffer. It should be a list of the form <CODE CLASS="Code">
(</CODE>
<EM CLASS="Variable">
major-mode-name</EM>
<CODE CLASS="Code">
 . </CODE>
<EM CLASS="Variable">
minor-mode-names</EM>
<CODE CLASS="Code">
)</CODE>
. See the <I CLASS="Italic">
LispWorks Editor User Guide</I>
 for a description of major and minor modes in the LispWorks edtor. <EM CLASS="Variable">
buffer-modes</EM>
 is used only when the CAPI creates the buffer, and not when it reuses a buffer.</P>
<P CLASS="RBody">
<A NAME="pgfId-2581796"></A>If <EM CLASS="Variable">
echo-area</EM>
 is non-nil. then an Echo Area is added. <EM CLASS="Variable">
echo-area</EM>
 defaults to <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-2582780"></A>If <EM CLASS="Variable">
fixed-fill</EM>
 is non-nil, the editor pane tries to form lines of length close to, but no more than, <EM CLASS="Variable">
fixed-fill</EM>
. It does this by forcing line breaks at spaces between words. <EM CLASS="Variable">
fixed-fill</EM>
 defaults to <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-6083446"></A>The cursor in an <CODE CLASS="Code">
editor-pane</CODE>
 blinks on and off by the mechanism described in <A HREF="capiref-116.htm#82742" CLASS="XRef">editor-pane-blink-rate</A>.</P>
<P CLASS="RBody">
<A NAME="pgfId-6729445"></A><EM CLASS="Variable">
change-callback,</EM>
 if non-nil, should be a function which is called whenever the editor buffer under the <CODE CLASS="Code">
editor-pane</CODE>
 changes. The value <EM CLASS="Variable">
change-callback</EM>
 can be set either by:</P>
<CODE CLASS="RCode-line">
<A NAME="pgfId-6729446"></A>(make-instance 'capi:editor-pane :change-callback ...)</CODE>
<P CLASS="RBody">
<A NAME="pgfId-6735778"></A>or </P>
<CODE CLASS="RCode-line">
<A NAME="pgfId-6729447"></A> (setf capi:editor-pane-change-callback)</CODE>
<P CLASS="RBody">
<A NAME="pgfId-6729448"></A>The current value can be queried by the accessor <CODE CLASS="Code">
editor-pane-change-callback</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-6729449"></A>The <EM CLASS="Variable">
change-callback</EM>
 function must have signature:</P>
<P CLASS="RSignature">
<A NAME="pgfId-6729450"></A>change-callback <EM CLASS="Variable">
pane</EM>
 <EM CLASS="Variable">
point</EM>
 <EM CLASS="Variable">
old-length</EM>
 <EM CLASS="Variable">
new-length</EM>
</P>
<P CLASS="RBody">
<A NAME="pgfId-6729451"></A><EM CLASS="Variable">
pane</EM>
 is the <CODE CLASS="Code">
editor-pane</CODE>
 itself.</P>
<P CLASS="RBody">
<A NAME="pgfId-6729452"></A><EM CLASS="Variable">
point</EM>
 is an <CODE CLASS="Code">
editor:point</CODE>
 object where the modification to the underlying buffer starts. <EM CLASS="Variable">
point</EM>
 is a temporary point, and is not valid outside the scope of the change callback. For more information about <CODE CLASS="Code">
editor:point</CODE>
 objects, see &quot;Points&quot; in the <I CLASS="Italic">
LispWorks Editor User Guide</I>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-6729453"></A><EM CLASS="Variable">
old-length</EM>
 is the length of the affected text following <EM CLASS="Variable">
point</EM>
, prior to the modification.</P>
<P CLASS="RBody">
<A NAME="pgfId-6729454"></A><EM CLASS="Variable">
new-length</EM>
 is the length of the affected text following <EM CLASS="Variable">
point</EM>
, after the modification has occurred.</P>
<P CLASS="RBody">
<A NAME="pgfId-6729455"></A>Typical calls to the <EM CLASS="Variable">
change-callback</EM>
 occur on insertion of text (when <EM CLASS="Variable">
old-length</EM>
 is 0) and on deletion of text (when <EM CLASS="Variable">
new-length</EM>
 is 0). There can be other combinations, for example, after executing the <CODE CLASS="Code">
Uppercase Region</CODE>
 editor command, <EM CLASS="Variable">
change-callback</EM>
 be called with both <EM CLASS="Variable">
old-length</EM>
 and <EM CLASS="Variable">
new-length</EM>
 being the length of the region. The same is true  for changing editor text properties.</P>
<P CLASS="RBody">
<A NAME="pgfId-6729456"></A>The <EM CLASS="Variable">
change-callback</EM>
 is always executed in the process of <EM CLASS="Variable">
pane</EM>
 (as if by <A HREF="capiref-12.htm#92272" CLASS="XRef">apply-in-pane-process</A>).</P>
<P CLASS="RBody">
<A NAME="pgfId-6729457"></A>The <EM CLASS="Variable">
change-callback</EM>
 is permitted to modify the buffer of <EM CLASS="Variable">
pane</EM>
, and other editor buffers. The callback is disabled inside the dynamic scope of the call, so there are no recursive calls to the <EM CLASS="Variable">
change-callback</EM>
 of <EM CLASS="Variable">
pane</EM>
. However, changes done by the callback may trigger <EM CLASS="Variable">
change-callback</EM>
 calls on other <CODE CLASS="Code">
editor-pane</CODE>
s, whether in the same process or in another process.</P>
<P CLASS="RBody">
<A NAME="pgfId-6737899"></A>There is an example illustrating the use of <EM CLASS="Variable">
change-callback</EM>
 in the file <CODE CLASS="Code">
examples/capi/editor/change-callback.lisp</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-7840181"></A>You can use the initargs <CODE CLASS="Code">
:before-input-callback</CODE>
 and <CODE CLASS="Code">
:after-input-callback</CODE>
 to add input callbacks which are called when <A HREF="capiref-27.htm#28128" CLASS="XRef">call-editor</A> is called. Note that the default <EM CLASS="Variable">
input-model</EM>
 also generates calls to <A HREF="capiref-27.htm#28128" CLASS="XRef">call-editor</A>, so unless you override the default <EM CLASS="Variable">
input-model</EM>
 the input callbacks are called for all keyboard and mouse gestures (other than gestures that are processed by a non-focus completer window).</P>
<P CLASS="RBody">
<A NAME="pgfId-7840182"></A>In both cases (before and after) the argument is a function that takes two arguments: the editor pane itself and the input gesture (the second argument to <A HREF="capiref-27.htm#28128" CLASS="XRef">call-editor</A>).</P>
<P CLASS="RBody">
<A NAME="pgfId-7840183"></A><A HREF="capiref-27.htm#28128" CLASS="XRef">call-editor</A> may redirect gestures to another pane. For example, gestures to an <CODE CLASS="Code">
editor-pane</CODE>
 are redirected to the echo area while it is used. In this case the before callback is called more than once for the same gesture. The after callback is called only once for each gesture, on the pane that actually processed the gesture.</P>
<P CLASS="RBody">
<A NAME="pgfId-7865687"></A><EM CLASS="Variable">
line-wrap-marker</EM>
 specifies the marker to display at the end of a line that is wrapped to the next line, or truncated if <EM CLASS="Variable">
wrap-style</EM>
 is <CODE CLASS="Code">
nil</CODE>
. The value must be a <CODE CLASS="Code">
character</CODE>
, or <CODE CLASS="Code">
nil</CODE>
 (which is interpreted as <CODE CLASS="Code">
#&#92;Space</CODE>
). The default value is the value of <A HREF="capiref-66.htm#71542" CLASS="XRef">*default-editor-pane-line-wrap-marker*</A>. The value can be read by <CODE CLASS="Code">
editor-pane-line-wrap-marker</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-7865688"></A><EM CLASS="Variable">
line-wrap-face</EM>
 specifies a face to use when displaying the <EM CLASS="Variable">
line-wrap-marker</EM>
. The argument can be <CODE CLASS="Code">
nil</CODE>
, an <CODE CLASS="Code">
editor:face</CODE>
 object (the result of a call to <CODE CLASS="Code">
editor:make-face</CODE>
), or a symbol naming a face (that is, the first argument to <CODE CLASS="Code">
editor:make-face</CODE>
).</P>
<P CLASS="RBody">
<A NAME="pgfId-7840188"></A>The default value of <EM CLASS="Variable">
line-wrap-face</EM>
 is an internal symbol naming a face. The value can be accessed by <CODE CLASS="Code">
editor-pane-line-wrap-face</CODE>
. The default face can be modified in the LispWorks IDE via <B CLASS="Button">
Tools &gt; Preferences... &gt; Environment &gt; Styles &gt; Colors and Attributes</B>
, style name <B CLASS="Button">
Line Wrap Marker</B>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-7840190"></A><EM CLASS="Variable">
wrap-style</EM>
 defines the wrapping of text lines that cannot be displayed in one line of the <CODE CLASS="Code">
editor-pane</CODE>
. The argument can be one of:</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-7840191"></A><CODE CLASS="Code">
t</CODE>
</P>
<P CLASS="RDescription-C">Normal wrapping. Display as many characters as possible in the <CODE CLASS="Code">
editor-pane</CODE>
 line.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-7840192"></A><CODE CLASS="Code">
nil</CODE>
</P>
<P CLASS="RDescription-C">Do not wrap. Text lines that are too long are truncated.</P>
<P CLASS="RDescription">
<A NAME="pgfId-7840193"></A><CODE CLASS="Code">
:split-on-space</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-7865790"></A>Wrapping, but attempts to split lines on spaces. When the text reaches the end of a line, the code looks backwards for space, and wraps before it.</P>
<P CLASS="RBody">
<A NAME="pgfId-7840194"></A>The default value of <EM CLASS="Variable">
wrap-style</EM>
 is <CODE CLASS="Code">
t</CODE>
 and the value can accessed by <CODE CLASS="Code">
editor-pane-wrap-style</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-8542284"></A>The input behaviour of an <CODE CLASS="Code">
editor-pane</CODE>
 is determined by its <EM CLASS="Variable">
input-model</EM>
 (inherited from <A HREF="capiref-275.htm#35026" CLASS="XRef">output-pane</A>). By default, an <CODE CLASS="Code">
editor-pane</CODE>
 has an <EM CLASS="Variable">
input-model</EM>
 that implements the functionality of the Editor tool in the LispWorks IDE, and always does it via <A HREF="capiref-27.htm#28128" CLASS="XRef">call-editor</A>. You can replace this behavior by supplying <CODE CLASS="Code">
:input-model</CODE>
 when you call <CODE CLASS="Code">
make-instance</CODE>
 or by <CODE CLASS="Code">
(setf capi:output-pane-input-model)</CODE>
, though this has an effect only if called before the pane is displayed. It is possible to achieve a minor modification to the default input behavior by prepending the modification (see the example below). Note that functions performing editor operations must do this via <A HREF="capiref-27.htm#28128" CLASS="XRef">call-editor</A>.</P>
<P CLASS="RBody">
<A NAME="pgfId-2581797"></A>Editor panes support GNU Emacs keys on all platforms. Additionally on Microsoft Windows they support Windows editor keys, on GTK+ and Motif they support KDE/Gnome keys, and on Cocoa they support Mac OS X editor keys. Exactly one style of emulation is active at any one time for each editor pane. By default, editor panes in the LispWorks IDE development environment use Emacs emulation on all platforms. By default, editor panes in delivered applications use Windows emulation on Microsoft Windows, Mac OS X editor emulation on Cocoa, and Emacs emulation on GTK+ and Motif. To alter the choice of emulation, see <A HREF="capiref-193.htm#72958" CLASS="XRef">interface-keys-style</A> or the <CODE CLASS="Code">
deliver</CODE>
 keyord <CODE CLASS="Code">
:editor-style</CODE>
, described in the <I CLASS="Italic">
LispWorks Delivery User Guide</I>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-8466736"></A>Notes</H5>
<OL>
<LI CLASS="RStep-1">
<A NAME="pgfId-8466737"></A><A NAME="marker-10340680"></A>The <A HREF="capiref-275.htm#35026" CLASS="XRef">output-pane</A> initarg <CODE CLASS="Code">
:drawing-mode</CODE>
<A NAME="marker-10065648"></A> controls anti-aliasing of the text displayed in an <CODE CLASS="Code">
editor-pane</CODE>
 on Microsoft Windows and GTK+.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-10065640"></A>For an <CODE CLASS="Code">
editor-pane</CODE>
 with <EM CLASS="Variable">
enabled</EM>
 <CODE CLASS="Code">
:read-only</CODE>
, Editor commands (predefined, and user-defined by <CODE CLASS="Code">
editor:defcommand</CODE>
) may or may not be able to change the text, depending on how they are called. When executed by a key sequence they cannot change the text directly. However Editor commands can also be called via <CODE CLASS="Code">
editor:process-character</CODE>
 or <A HREF="capiref-27.htm#28128" CLASS="XRef">call-editor</A>, and then are programmatic input and so can change the text.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-8466741"></A>The effect of <EM CLASS="Variable">
enabled</EM>
 <CODE CLASS="Code">
:read-only</CODE>
 is on the <CODE CLASS="Code">
editor-pane</CODE>
. It does not affect the underlying Editor buffer, which can still be modified from other panes. The buffer that is displayed can be changed, and this does not affect the <EM CLASS="Callout">
enabled</EM>
 state of the <CODE CLASS="Code">
editor-pane</CODE>
.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-9335056"></A>To control whether the native input method is used to interpret keyboard input, you can supply the <A HREF="capiref-275.htm#35026" CLASS="XRef">output-pane</A> initarg <CODE CLASS="Code">
:use-native-input-method</CODE>
<A NAME="marker-9340373"></A> or call <A HREF="capiref-384.htm#30973" CLASS="XRef">set-default-use-native-input-method</A>.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-9509120"></A>The default value of <EM CLASS="Variable">
composition-callback</EM>
 (see <A HREF="capiref-275.htm#35026" CLASS="XRef">output-pane</A>) is <A HREF="capiref-119.htm#21911" CLASS="XRef">editor-pane-default-composition-callback</A>.</LI>
</OL>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-6392926"></A>Compatibility note</H5>
<P CLASS="RBody">
<A NAME="pgfId-6392930"></A>In LispWorks 4.4 and previous versions <CODE CLASS="Code">
editor-pane</CODE>
 supports only fixed-width fonts.</P>
<P CLASS="RBody">
<A NAME="pgfId-8059273"></A>On Cocoa, <CODE CLASS="Code">
editor-pane</CODE>
 supports only fixed-width fonts.</P>
<P CLASS="RBody">
<A NAME="pgfId-8059109"></A>In LispWorks 6.1 and later, variable-width fonts can also be used on Microsoft Windows, GTK+ and Motif. Specify the font via the <CODE CLASS="Code">
:font</CODE>
 initarg (see <A HREF="capiref-408.htm#40919" CLASS="XRef">simple-pane</A>).</P>
<P CLASS="RBody">
<A NAME="pgfId-7845279"></A>The <CODE CLASS="Code">
:wrap-style</CODE>
 initarg supersedes <CODE CLASS="Code">
editor:set-window-split-on-space</CODE>
, which is deprecated.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-2581798"></A>Example</H5>
<PRE CLASS="RCode-first"><A NAME="pgfId-4290427"></A>(capi:contain (make-instance 'capi:editor-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4290428"></A>                             :text &quot;Hello world&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4291083"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4290429"></A>(setq ed (capi:contain</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4290430"></A>          (make-instance 'capi:editor-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4290431"></A>                         :text &quot;Hello world&quot;</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-4290432"></A>                         :enabled nil)))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-4290434"></A>Note that you cannot type into the editor pane.</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-4290436"></A>(capi:apply-in-pane-process </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-4290437"></A>  ed #'(setf capi:editor-pane-enabled) t ed)</PRE>
<P CLASS="RBody">
<A NAME="pgfId-4290439"></A>Now you can enter text into the editor pane interactively.</P>
<P CLASS="RBody">
<A NAME="pgfId-4290441"></A>You can also change the text programmatically:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-4290443"></A>(capi:apply-in-pane-process</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-4868312"></A>  ed #'(setf capi:editor-pane-text) &quot;New text&quot; ed)</PRE>
<P CLASS="RBody">
<A NAME="pgfId-5423076"></A>In this example the callback modifies the buffer in the correct editor context so you that see the editor update immediately:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-5418845"></A>(capi:define-interface updating-editor ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418846"></A>  ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418847"></A>  (:panes</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418848"></A>   (numbers capi:list-panel</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418849"></A>          :items '(1 2 3)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418850"></A>          :selection-callback 'update-editor</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418851"></A>          :callback-type :interface</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418852"></A>          :visible-min-height '(:character 3))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418853"></A>   (editor capi:editor-pane</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418854"></A>                 :text </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418855"></A>                 &quot;Select numbers in the list above.&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418856"></A>                 :visible-min-width</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418857"></A>                 (list :character 35))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418858"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418862"></A>(defun update-editor (interface)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418863"></A>  (with-slots (numbers editor) interface</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418864"></A>    (editor:process-character </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418865"></A>     (list #'(setf capi:editor-pane-text)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418866"></A>           (format nil &quot;&#126;R&quot; </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418867"></A>                   (capi:choice-selected-item numbers))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418868"></A>           editor)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418869"></A>     (capi:editor-window editor))))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-5418870"></A>&nbsp;</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-5418872"></A>(capi:display (make-instance 'updating-editor))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-4868313"></A>This example illustrates the use of <EM CLASS="Variable">
buffer-modes</EM>
 to specify a major mode:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-4868815"></A>(defclass my-lisp-editor (capi:editor-pane) ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868816"></A>  (:default-initargs</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868817"></A>   :buffer-modes '(&quot;Lisp&quot;)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868818"></A>   :echo-area t</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868819"></A>   :text</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868820"></A>   &quot;;; Lisp mode functionality such as command bindings and</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868821"></A>;; parenthesis balancing work in this window.</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868822"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868823"></A>(list 1 2 3)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868824"></A>&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868825"></A>   :visible-min-width '(:character 60)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868826"></A>   :name &quot;My Lisp Editor Pane&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868827"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868828"></A>(capi:define-interface my-lisp-editor-interface ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868829"></A>  ()</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868830"></A>  (:panes</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868831"></A>   (ed</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868832"></A>    my-lisp-editor</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868833"></A>    ))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868834"></A>  (:default-initargs</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868835"></A>   :title &quot;My Lisp Editor Interface&quot;))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4868836"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4873090"></A>;; Ensure Emacs-like bindings regardless of platform</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4873091"></A>(defmethod capi:interface-keys-style </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4873092"></A>           ((self my-lisp-editor-interface))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4873093"></A>  :emacs)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4873094"></A>&nbsp;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-4873095"></A>(capi:display </PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-4873096"></A> (make-instance 'my-lisp-editor-interface))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-8547520"></A>This example makes an <CODE CLASS="Code">
editor-pane</CODE>
 with no input behavior:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-8547522"></A>(capi:contain</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-8547523"></A> (make-instance 'capi:editor-pane :input-model nil))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-8547524"></A>This example makes an <CODE CLASS="Code">
editor-pane</CODE>
 with the default input behavior, except that pressing the mouse button displays a message rather than setting the point. It then displays the pane:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-8553088"></A>(progn</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8553089"></A>  (defun foo (self x y)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8553090"></A>    (capi:display-message &quot;Button-1 Press at &#126;a/&#126;a&quot;</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8553091"></A>                          x y))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8553092"></A>  (let ((ep (make-instance 'capi:editor-pane)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8553093"></A>    (setf (capi:output-pane-input-model ep)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8553094"></A>          (list* '((:button-1 :press) foo)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-8553095"></A>                 (capi:output-pane-input-model ep)))</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-8547533"></A>    (capi:contain ep)))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-4868314"></A>Also see the examples in the directory <CODE CLASS="Code">
examples/capi/editor/</CODE>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-893183"></A>See also</H5>
<P CLASS="RBody">
<A NAME="pgfId-893185"></A><A HREF="capiref-27.htm#28128" CLASS="XRef">call-editor</A><BR>
<A HREF="capiref-66.htm#71542" CLASS="XRef">*default-editor-pane-line-wrap-marker*</A><BR>
<A HREF="capiref-116.htm#82742" CLASS="XRef">editor-pane-blink-rate</A><BR>
<A HREF="capiref-112.htm#56721" CLASS="XRef">*editor-cursor-active-style*</A><BR>
<A HREF="capiref-111.htm#63424" CLASS="XRef">*editor-cursor-color*</A><BR>
<A HREF="capiref-113.htm#20374" CLASS="XRef">*editor-cursor-drag-style*</A><BR>
<A HREF="capiref-114.htm#17389" CLASS="XRef">*editor-cursor-inactive-style*</A><BR>
<A HREF="capiref-193.htm#72958" CLASS="XRef">interface-keys-style</A><BR>
<A HREF="capiref-251.htm#27109" CLASS="XRef">modify-editor-pane-buffer</A><BR>
<A HREF="capiref-275.htm#35026" CLASS="XRef">output-pane</A><BR>
<A HREF="capiref-384.htm#30973" CLASS="XRef">set-default-use-native-input-method</A></P>
</DIV>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">CAPI Reference Manual - 15 Dec 2011</I></P>
<P><A HREF="capiref-116.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-114.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
