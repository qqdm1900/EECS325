<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="capiref.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 draw-path
</TITLE>

<LINK REL="next" HREF="capiref-529.htm" TYPE="text/html">
<LINK REL="prev" HREF="capiref-527.htm" TYPE="text/html">
<LINK REL="up" HREF="capiref-495.htm" TYPE="text/html">
<LINK REL="top" HREF="capiref.htm" TYPE="text/html">
<LINK REL="contents" HREF="capiref-2.htm" TYPE="text/html">
<LINK REL="index" HREF="capiref-693.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="capiref.htm">CAPI Reference Manual</A> &gt; <A HREF="capiref-495.htm">2 GP Reference Entries</A><BR><BR>
</DIV><A HREF="capiref-529.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-527.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-495.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H4 CLASS="REntry">
<A NAME="pgfId-1498647"></A><A NAME="marker-1501224"></A><A NAME="10483"></A>draw-<A NAME="marker-1501229"></A>path</H4>
<DIV>
<H5 CLASS="REntry-type">
<A NAME="pgfId-1498648"></A>Function</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1498649"></A>Summary</H5>
<P CLASS="RBody">
<A NAME="pgfId-1498650"></A>Draws a path at a given point, optionally closing it or filling it.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1498651"></A>Package</H5>
<P CLASS="RSignature">
<A NAME="pgfId-1498652"></A>graphics-ports</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1498653"></A>Signature</H5>
<P CLASS="RSignature">
<A NAME="pgfId-1498654"></A>draw-path <EM CLASS="Variable">
port</EM>
 <EM CLASS="Variable">
path</EM>
 <EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
 &amp;rest <EM CLASS="Variable">
args</EM>
 &amp;key <EM CLASS="Variable">
closed</EM>
 <EM CLASS="Variable">
filled</EM>
 <EM CLASS="Variable">
fill-rule</EM>
</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1498655"></A>Arguments</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498656"></A><EM CLASS="Variable">
port</EM>
</P>
<P CLASS="RDescription-C">A graphics port.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498657"></A><EM CLASS="Variable">
path</EM>
</P>
<P CLASS="RDescription-C">A path specification.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498658"></A><EM CLASS="Variable">
x</EM>
</P>
<P CLASS="RDescription-C">A real number.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498659"></A><EM CLASS="Variable">
y</EM>
</P>
<P CLASS="RDescription-C">A real number.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498660"></A><EM CLASS="Variable">
closed</EM>
</P>
<P CLASS="RDescription-C">A boolean.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498661"></A><EM CLASS="Variable">
filled</EM>
</P>
<P CLASS="RDescription-C">A boolean.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498662"></A><EM CLASS="Variable">
fill-rule</EM>
</P>
<P CLASS="RDescription-C">One of the keywords <CODE CLASS="Code">
:even-odd</CODE>
 and <CODE CLASS="Code">
:winding</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498663"></A><EM CLASS="Variable">
args</EM>
</P>
<P CLASS="RDescription-C"><A HREF="capiref-573.htm#89232" CLASS="XRef">graphics-state</A> parameters passed as keyword arguments.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1498664"></A>Description</H5>
<P CLASS="RBody">
<A NAME="pgfId-1498665"></A>The function <CODE CLASS="Code">
draw-path</CODE>
 draws the path <EM CLASS="Variable">
path</EM>
 at (<EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
) in <EM CLASS="Variable">
port</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-1501076"></A>When <EM CLASS="Variable">
closed</EM>
 is non-nil, a line is drawn from the last point in the path to the start of the last figure in the path. When <EM CLASS="Variable">
filled</EM>
 is non-nil, the path is filled, otherwise its outline is drawn; the <EM CLASS="Variable">
closed</EM>
 argument is ignored if <EM CLASS="Variable">
filled</EM>
 is non-nil. <EM CLASS="Variable">
transform</EM>
, <EM CLASS="Variable">
foreground</EM>
, <EM CLASS="Variable">
background</EM>
, <EM CLASS="Variable">
thickness</EM>
, <EM CLASS="Variable">
scale-thickness</EM>
, <EM CLASS="Variable">
dashed</EM>
, <EM CLASS="Variable">
dash</EM>
, <EM CLASS="Variable">
line-end-style</EM>
, <EM CLASS="Variable">
line-joint-style</EM>
 and <EM CLASS="Variable">
mask</EM>
 from <EM CLASS="Variable">
port</EM>
's graphics state (see <A HREF="capiref-573.htm#89232" CLASS="XRef">graphics-state</A>) are all used. <EM CLASS="Variable">
fill-rule</EM>
 specifies how overlapping regions are filled. Possible values for <EM CLASS="Variable">
fill-rule</EM>
 are <CODE CLASS="Code">
:even-odd</CODE>
 and <CODE CLASS="Code">
:winding</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-1498667"></A><EM CLASS="Variable">
path</EM>
 is a path specification, which consists of path elements that describe a number of disconnected figures. The origin of the path is (<EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
), so all other coordinates within the path are translated relative to that point.</P>
<P CLASS="RBody">
<A NAME="pgfId-1498668"></A>The following formats of path specification are supported:</P>
<UL>
<LI CLASS="RBullet">
<A NAME="pgfId-1498669"></A>A sequence of lists, each of which is a path element as described below.</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-1498670"></A>A function designator to generate the path elements. Graphics ports calls the function when it wants to obtain the path elements. The function takes a single argument, which is a function that should be called with each path elements as its arguments.</LI>
</UL>
<P CLASS="RBody">
<A NAME="pgfId-1498671"></A>The following path elements can be used:</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498672"></A><CODE CLASS="Code">
:close</CODE>
</P>
<P CLASS="RDescription-C">Closes the current figure by adding a straight line from the current point to the start point.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498674"></A><CODE CLASS="Code">
:move </CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
</P>
<P CLASS="RDescription-C">Closes the current figure and starts a new one at (<EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
).</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1498676"></A><CODE CLASS="Code">
:line </CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
</P>
<P CLASS="RDescription-C">Adds a straight line to the current figure, from the current point to (<EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
) and makes (<EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
) be the current point.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1498678"></A><CODE CLASS="Code">
:arc </CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
width</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
height</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
start-angle</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
sweep</EM>
<CODE CLASS="Code">
 &amp;optional </CODE>
<EM CLASS="Variable">
movep</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1498679"></A>Adds an elliptical arc to the current figure, contained in the rectangle from (<EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
) to (<EM CLASS="Variable">
x+width</EM>
 <EM CLASS="Variable">
y+width</EM>
) from <EM CLASS="Variable">
start-angle</EM>
 to <EM CLASS="Variable">
start-angle+sweep-angle</EM>
. Both angles are specified in radians and positive values mean anticlockwise. If <EM CLASS="Variable">
movep</EM>
 is <CODE CLASS="Code">
nil</CODE>
 (the default), then a straight line is also added from the current point to the start of the arc, otherwise a new figure is started from the start of the arc. The end of the arc becomes the new current point.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1498680"></A><CODE CLASS="Code">
:bezier </CODE>
<EM CLASS="Variable">
cx1</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
cy1</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
cx2</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
cy2</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1498681"></A>Adds a cubic B&eacute;zier curve to the current figure, from the current point to (<EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
) using control points (<EM CLASS="Variable">
cx1</EM>
 <EM CLASS="Variable">
cy1</EM>
) and (<EM CLASS="Variable">
cx2</EM>
 <EM CLASS="Variable">
cy2</EM>
).</P>
<P CLASS="RDescription">
<A NAME="pgfId-1498682"></A><CODE CLASS="Code">
:rectangle </CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
width</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
height</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1498683"></A>Adds a self contained figure, a rectangle from (<EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
) to (<EM CLASS="Variable">
x+width</EM>
 <EM CLASS="Variable">
y+width</EM>
).</P>
<P CLASS="RDescription">
<A NAME="pgfId-1498684"></A><CODE CLASS="Code">
:ellipse </CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
x-radius</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y-radius</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1498685"></A>Adds a self contained figure, an ellipse of the given radii centered on (<EM CLASS="Variable">
x</EM>
 <EM CLASS="Variable">
y</EM>
).</P>
<P CLASS="RDescription">
<A NAME="pgfId-1498686"></A><CODE CLASS="Code">
:scale </CODE>
<EM CLASS="Variable">
sx</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
sy</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
elements</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1498687"></A>Adds the path elements <EM CLASS="Variable">
elements</EM>
, scaling them by <EM CLASS="Variable">
sx</EM>
 and <EM CLASS="Variable">
sy</EM>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1498688"></A><CODE CLASS="Code">
:rotate </CODE>
<EM CLASS="Variable">
theta</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
elements</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1498689"></A>Adds the path elements <EM CLASS="Variable">
elements</EM>
, rotating them <EM CLASS="Variable">
theta</EM>
 radians about the origin. If <EM CLASS="Variable">
theta</EM>
 is positive, then the rotation is clockwise.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1498690"></A><CODE CLASS="Code">
:translate </CODE>
<EM CLASS="Variable">
dx</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
dy</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
elements</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1498691"></A>Adds the path elements <EM CLASS="Variable">
elements</EM>
, translating them by <EM CLASS="Variable">
dx</EM>
 and <EM CLASS="Variable">
dy</EM>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1498692"></A><CODE CLASS="Code">
:transform </CODE>
<EM CLASS="Variable">
transform</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
elements</EM>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1498693"></A>Adds the path elements <EM CLASS="Variable">
elements</EM>
, transformed by <EM CLASS="Variable">
transform</EM>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1498694"></A>Examples</H5>
<P CLASS="RBody">
<A NAME="pgfId-1498696"></A>Draws two lines from (40 30) to (140 30) and from (140 30) to (140 130):</P>
<CODE CLASS="RCode-line">
<A NAME="pgfId-1765067"></A>(draw-path port '((:line 100 0) (:line 100 100)) 40 30)</CODE>
<P CLASS="RBody">
<A NAME="pgfId-1498697"></A>Draws an outline triangle with vertices (40 30), (140 30) and (140 130):</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-1509720"></A>(draw-path port '((:line 100 0) (:line 100 100))</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-1498698"></A>           40 30 :closed t)</PRE>
<P CLASS="RBody">
<A NAME="pgfId-1498699"></A>Draws a filled triangle with vertices (40 30), (140 30) and (140 130):</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-1509731"></A>(draw-path port '((:line 100 0) (:line 100 100))</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-1498700"></A>           40 30 :filled t)</PRE>
<P CLASS="RBody">
<A NAME="pgfId-1498701"></A>Draws a filled triangle exactly as in the previous example but using a function to generate the path elements:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-1498702"></A>(flet ((generate (fn)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1498703"></A>          (funcall fn :line 100 0)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1498704"></A>          (funcall fn :line 100 100)))</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-1498705"></A>  (draw-path port #'generate 40 30 :filled t))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-1498706"></A>Draws 6 copies of a shape consisting of two lines and an arc:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-1509742"></A>(labels ((generate-1 (fn)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1509743"></A>           (funcall fn :line 50 0)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1509744"></A>           (funcall fn :line 50 50)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1509745"></A>           (funcall fn :arc 0 -50 100 100</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1509746"></A>                    (/ pi -2) (/ pi -2)))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1509747"></A>         (generate-6 (fn)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1509748"></A>           (dotimes (x 6)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1509749"></A>             (funcall fn :rotate (* 2 pi (/ x 6))</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1509750"></A>                      #'generate-1))))</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-1498714"></A>  (draw-path port #'generate-6 80 80))</PRE>
<P CLASS="RBody">
<A NAME="pgfId-1498715"></A>There are more examples in</P>
<CODE CLASS="RCode-line">
<A NAME="pgfId-1500697"></A>examples/capi/graphics/paths.lisp</CODE>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1498716"></A>See also</H5>
<P CLASS="RBody">
<A NAME="pgfId-1498717"></A><A HREF="capiref-531.htm#29740" CLASS="XRef">draw-polygon</A><BR>
<A HREF="capiref-526.htm#10272" CLASS="XRef">draw-line</A><BR>
<A HREF="capiref-520.htm#26766" CLASS="XRef">draw-arc</A><BR>
<A HREF="capiref-524.htm#83073" CLASS="XRef">draw-ellipse</A><BR>
<A HREF="capiref-573.htm#89232" CLASS="XRef">graphics-state</A></P>
</DIV>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">CAPI Reference Manual - 15 Dec 2011</I></P>
<P><A HREF="capiref-529.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="capiref-527.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="capiref-495.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="capiref.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="capiref-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="capiref-693.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
