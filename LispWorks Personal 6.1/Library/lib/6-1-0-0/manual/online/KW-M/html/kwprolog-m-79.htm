<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="kwprolog-m.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 6.1.1.3  A Simple Explanation Facility
</TITLE>

<LINK REL="next" HREF="kwprolog-m-80.htm" TYPE="text/html">
<LINK REL="prev" HREF="kwprolog-m-78.htm" TYPE="text/html">
<LINK REL="up" HREF="kwprolog-m-76.htm" TYPE="text/html">
<LINK REL="top" HREF="kwprolog-m.htm" TYPE="text/html">
<LINK REL="contents" HREF="kwprolog-m-2.htm" TYPE="text/html">
<LINK REL="index" HREF="kwprolog-m-232.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="kwprolog-m.htm">KnowledgeWorks and Prolog User Guide</A> &gt; <A HREF="kwprolog-m-74.htm">6 Advanced Topics</A> &gt; <A HREF="kwprolog-m-75.htm">6.1  Control Flow</A> &gt; <A HREF="kwprolog-m-76.htm">6.1.1  Meta Rule Protocol</A><BR><BR>
</DIV><A HREF="kwprolog-m-80.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="kwprolog-m-78.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="kwprolog-m-76.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="kwprolog-m.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="kwprolog-m-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="kwprolog-m-232.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H3 CLASS="FM3Heading">
<A NAME="pgfId-891696"></A>6.1.1.3  <A NAME="95189"></A>A Simple <A NAME="marker-891695"></A>Explanation Facility</H3>
<P CLASS="Body">
<A NAME="pgfId-891697"></A>Meta-rules can also be used to provide an explanation facility. A full implementation of the explanation facility described here is included among the examples distributed with KnowledgeWorks, and is given also in <A HREF="kwprolog-m-208.htm#64040" CLASS="XRef">Explanation Facility</A></P>
<P CLASS="Body">
<A NAME="pgfId-891701"></A>Suppose we have a rule about truck scheduling of the form</P>
<PRE CLASS="Code-first"><A NAME="pgfId-891702"></A>(defrule allocate-truck-to-load :forward</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891703"></A>          (load ?l size ?s truck nil destination </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891704"></A>           ?d location ?loc)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891705"></A>          (test (not (eq ?d ?loc)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891706"></A>          (truck ?t capacity ?c load nil location ?loc)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891707"></A>          (test (&gt; ?c ?s))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891708"></A>           --&gt;</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891709"></A>          (assert (truck ?t load ?l))</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-891710"></A>          (assert (load ?l truck ?t)))</PRE>
<P CLASS="Body">
<A NAME="pgfId-891711"></A>and we wish to add an explanation by entering a form like</P>
<PRE CLASS="Code-first"><A NAME="pgfId-891713"></A>(<A NAME="marker-891712"></A>defexplain allocate-truck-to-load</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891714"></A>             :why (&quot;&#126;S has not reached its destination</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891715"></A>                   &#126;S and &#126; does not have a truck</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891716"></A>                   allocated, &#126; &#126;S does not have a load</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891717"></A>                   allocated, and &#126; with capacity &#126;S is</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891718"></A>                   able to carry the load, &#126; and both</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891719"></A>                   are at the same place &#126;S&quot;</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891720"></A>                   ?l ?d ?t ?c ?loc)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891721"></A>             :what (&quot;&#126;S is scheduled to carry &#126;S to &#126;S&quot;</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891722"></A>                    ?t ?l ?d)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891723"></A>             :because (&quot;A customer requires &#126;S to be</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-891724"></A>                       moved to &#126;S&quot; ?l ?d))</PRE>
<P CLASS="Body">
<A NAME="pgfId-891725"></A>where the <CODE CLASS="Code">
:why</CODE>
 form explains why the rule is allowed to fire, the <CODE CLASS="Code">
:what</CODE>
 form explains what the rule does and the <CODE CLASS="Code">
:because</CODE>
 gives the ultimate reason for firing the rule.</P>
<P CLASS="Body">
<A NAME="pgfId-891726"></A>The stages in the implementation are as follows:</P>
<UL>
<LI CLASS="Bullet">
<A NAME="pgfId-891728"></A>Define a macro called <A NAME="marker-891727"></A><CODE CLASS="Code">
defexplain</CODE>
 to store the explanation information in, say, a hash-table keyed against the rule name</LI>
<LI CLASS="Bullet">
<A NAME="pgfId-891730"></A>Define a function <A NAME="marker-891729"></A><CODE CLASS="Code">
add-explanation</CODE>
 takes an instantiation, fetches the explanation information from the hash-table and the variable bindings in the instantiation, and adds the generated explanations to another global data structure, something like:</LI>
</UL>
<PRE CLASS="Code-first"><A NAME="pgfId-891731"></A>(defun add-instantiation (inst)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891732"></A>  (let ((explain-info</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891733"></A>         (gethash (inst-rulename inst) </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891734"></A>                  *explain-table*)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891735"></A>       (when explain-info</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891736"></A>         (do-the-rest explain-info </PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-891737"></A>            (inst-bindings inst))))))</PRE>
<UL>
<LI CLASS="Bullet">
<A NAME="pgfId-891738"></A>Implement graphical tools to browse the resulting explanations</LI>
<LI CLASS="Bullet">
<A NAME="pgfId-891739"></A>Define a meta-interpreter for which will produce explanations, for example:</LI>
</UL>
<PRE CLASS="Code-first"><A NAME="pgfId-891740"></A>(defrule explain-context :backward</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891741"></A>  ((explain-context)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891742"></A>   &lt;--</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891743"></A>   (start-cycle)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891744"></A>   (instantiation ?inst)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891745"></A>   ((add-explanation ?inst))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891746"></A>   (fire-rule ?inst)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-891747"></A>   (cut)</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-891748"></A>   (explain-context)))</PRE>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">KnowledgeWorks and Prolog User Guide (Macintosh version) - 6 Dec 2011</I></P>
<P><A HREF="kwprolog-m-80.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="kwprolog-m-78.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="kwprolog-m-76.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="kwprolog-m.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="kwprolog-m-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="kwprolog-m-232.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
