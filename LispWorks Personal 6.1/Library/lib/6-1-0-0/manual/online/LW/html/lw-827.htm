<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="lw.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 save-image
</TITLE>

<LINK REL="next" HREF="lw-828.htm" TYPE="text/html">
<LINK REL="prev" HREF="lw-826.htm" TYPE="text/html">
<LINK REL="up" HREF="lw-744.htm" TYPE="text/html">
<LINK REL="top" HREF="lw.htm" TYPE="text/html">
<LINK REL="contents" HREF="lw-2.htm" TYPE="text/html">
<LINK REL="index" HREF="lw-1525.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="lw.htm">LispWorks User Guide and Reference Manual</A> &gt; <A HREF="lw-744.htm">32 The HCL Package</A><BR><BR>
</DIV><A HREF="lw-828.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="lw-826.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="lw-744.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="lw.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="lw-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="lw-1525.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H4 CLASS="REntry">
<A NAME="pgfId-1438116"></A><A NAME="36980"></A>save<A NAME="marker-1438115"></A>-image</H4>
<DIV>
<H5 CLASS="REntry-type">
<A NAME="pgfId-889853"></A>Function</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-889854"></A>Summary</H5>
<P CLASS="RBody">
<A NAME="pgfId-889855"></A>Saves the image to a new file.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-889856"></A>Package</H5>
<P CLASS="RSignature">
<A NAME="pgfId-889857"></A>hcl</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-889858"></A>Signature</H5>
<P CLASS="RSignature">
<A NAME="pgfId-1032877"></A>save-image <EM CLASS="Variable">
filename</EM>
 &amp;key <EM CLASS="Variable">
dll-exports</EM>
 <EM CLASS="Variable">
dll-added-files</EM>
 <EM CLASS="Variable">
automatic-init</EM>
 <EM CLASS="Variable">
gc</EM>
 <EM CLASS="Variable">
type</EM>
 <EM CLASS="Variable">
normal-gc</EM>
 <EM CLASS="Variable">
restart-function</EM>
 <EM CLASS="Variable">
multiprocessing</EM>
 <EM CLASS="Variable">
console</EM>
 <EM CLASS="Variable">
environment</EM>
 <EM CLASS="Variable">
remarks</EM>
 <EM CLASS="Variable">
clean-down</EM>
 <EM CLASS="Variable">
image-type</EM>
 <EM CLASS="Variable">
split</EM>
 =&gt; nil</P>
<P CLASS="RBody">
<A NAME="pgfId-1049272"></A>The <EM CLASS="Variable">
console</EM>
 argument is available only in LispWorks for Windows and LispWorks for Macintosh.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1032879"></A>Arguments</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-889861"></A><EM CLASS="Variable">
filename</EM>
</P>
<P CLASS="RDescription-C">A string. It is the name of the file that the image is saved as. This name should not be the same as the original name of the image.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1045045"></A><EM CLASS="Variable">
dll-exports</EM>
</P>
<P CLASS="RDescription-C">A list of strings, or the keyword <CODE CLASS="Code">
:default</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1330807"></A><EM CLASS="Variable">
dll-added-files</EM>
</P>
<P CLASS="RDescription-C">A list of strings.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1330811"></A><EM CLASS="Variable">
automatic-init</EM>
</P>
<P CLASS="RDescription-C">A generalized boolean.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-889862"></A><EM CLASS="Variable">
gc</EM>
</P>
<P CLASS="RDescription-C">If non-nil, there is a garbage collection before the image is saved. The default value is <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-889863"></A><EM CLASS="Variable">
type</EM>
</P>
<P CLASS="RDescription-C">Determines if some global variables are cleared before the image is saved. You can generally use the default value, which is <CODE CLASS="Code">
:user</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-889864"></A><EM CLASS="Variable">
normal-gc</EM>
</P>
<P CLASS="RDescription-C">If this is <CODE CLASS="Code">
t</CODE>
 the function <A HREF="lw-811.htm#24828" CLASS="XRef">normal-gc</A> is called before the image is saved. The default is <CODE CLASS="Code">
t</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-889865"></A><EM CLASS="Variable">
restart-function</EM>
</P>
<P CLASS="RDescription-C">A function to be called on restart.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1049830"></A><EM CLASS="Variable">
multiprocessing</EM>
</P>
<P CLASS="RDescription-C">Controls whether multiprocessing is enabled on restart. Possible values are discussed below.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893088"></A><EM CLASS="Variable">
console</EM>
<A NAME="marker-1049818"></A><A NAME="marker-1049820"></A><A NAME="marker-1049825"></A><A NAME="marker-1049829"></A></P>
<P CLASS="RDescription-C">On Windows <EM CLASS="Variable">
console</EM>
 controls whether the new image will be a Console or GUI application and when, if ever, to make a console window in the latter case.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1049648"></A>On the Macintosh <EM CLASS="Variable">
console</EM>
 controls when, if ever, to make a console window.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1049661"></A>Possible values are discussed below.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893089"></A><EM CLASS="Variable">
environment</EM>
</P>
<P CLASS="RDescription-C"><EM CLASS="Variable">
environment</EM>
 controls whether the LispWorks environment is started on restart. Possible values are discussed below.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893094"></A><EM CLASS="Variable">
remarks</EM>
</P>
<P CLASS="RDescription-C"><EM CLASS="Variable">
remarks</EM>
 adds a comment to the save history. The value should be a string.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893095"></A><EM CLASS="Variable">
clean-down</EM>
</P>
<P CLASS="RDescription-C">When <CODE CLASS="Code">
t</CODE>
, calls <CODE CLASS="Code">
(clean-down t)</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1349831"></A><EM CLASS="Variable">
image-type</EM>
</P>
<P CLASS="RDescription-C">One of the keywords <CODE CLASS="Code">
:exe</CODE>
, <CODE CLASS="Code">
:dll</CODE>
 and <CODE CLASS="Code">
:bundle</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1523042"></A><EM CLASS="Variable">
split</EM>
</P>
<P CLASS="RDescription-C">A generalized boolean. If non-nil, the Lisp heap and the executable are saved in two separate files.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-889866"></A>Values</H5>
<P CLASS="RDescription">
<A NAME="pgfId-889867"></A>Returns <CODE CLASS="Code">
nil</CODE>
.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-889868"></A>Description</H5>
<P CLASS="RBody">
<A NAME="pgfId-1328648"></A>The function <CODE CLASS="Code">
save-image</CODE>
 saves the LispWorks image to a new executable or dynamic library containing any modifications you have made to the supplied image.</P>
<P CLASS="RBody">
<A NAME="pgfId-889869"></A>For information about the sort of changes you might want to save in a new image, see <A HREF="lw-180.htm#48126" CLASS="XRef">Customization of LispWorks</A>.</P>
<P CLASS="RBody">
<A NAME="pgfId-1486536"></A>Do not use <CODE CLASS="Code">
save-image</CODE>
 when the graphical IDE is running. Instead create a build script and use it with the <CODE CLASS="Code">
-build</CODE>
 command line argument similar to the examples below, or run LispWorks in a subprocess using the Application Builder tool.</P>
<P CLASS="RBody">
<A NAME="pgfId-1536447"></A>You cannot use <CODE CLASS="Code">
save-image</CODE>
 on Windows, Linux, FreeBSD, x86/x64 Solaris and Mac OS X when multiprocessing is running. It signals an error in this case.</P>
<P CLASS="RBody">
<A NAME="pgfId-1259160"></A>On Cocoa you can combine a call to <CODE CLASS="Code">
save-image</CODE>
 with the creation of an application bundle containing your new LispWorks image, as in the example shown below.</P>
<P CLASS="RBody">
<A NAME="pgfId-1488467"></A><EM CLASS="Variable">
dll-exports</EM>
 is implemented only on Windows, Linux, x86/x64 Solaris, Macintosh and FreeBSD. It controls whether the image saved is an executable or a dynamic library (DLL). The default value is <CODE CLASS="Code">
:default</CODE>
 and this value means an executable is saved. The value <CODE CLASS="Code">
:com</CODE>
 is supported on Microsoft Windows only (see below). Otherwise <EM CLASS="Variable">
dll-exports</EM>
 should be list (potentially <CODE CLASS="Code">
nil</CODE>
). In this case a dynamic library is saved, and each string in <EM CLASS="Variable">
dll-exports</EM>
 names a function which becomes an export of the dynamic library and should be defined as a Lisp function using <CODE CLASS="Code">
fli:define-foreign-callable</CODE>
. Each exported name can be found by <CODE CLASS="Code">
GetProcAddress</CODE>
 (on Windows) or <CODE CLASS="Code">
dlsym</CODE>
 (on other platforms). The exported symbol is actually a stub which ensures that the LispWorks dynamic library has finished initializing, and then enters the Lisp code.</P>
<P CLASS="RBody">
<A NAME="pgfId-1490072"></A>On Microsoft Windows the <EM CLASS="Variable">
dll-exports</EM>
 list can also contain the keyword <CODE CLASS="Code">
:com</CODE>
, or <EM CLASS="Variable">
dll-exports</EM>
 can simply be the keyword<CODE CLASS="Code">
:com</CODE>
, both of which mean that the DLL is intended to be used as a COM server. See the <I CLASS="Italic">
LispWorks COM/Automation User Guide and Reference Manual</I>
 for details.</P>
<P CLASS="RBody">
<A NAME="pgfId-1352700"></A>On Mac OS X the default behavior is to generate an object of type &quot;<A NAME="marker-1354905"></A>Mach-O dynamically linked shared library&quot; with file type <CODE CLASS="Code">
dylib</CODE>
. See <EM CLASS="Variable">
image-type</EM>
 below for information about creating another type of library on Mac OS X.</P>
<P CLASS="RBody">
<A NAME="pgfId-1354924"></A>On Linux, Macintosh, x86/x64 Solaris and FreeBSD, to save a dynamic library image the computer needs to have a C compiler installed. This is typically <CODE CLASS="Code">
gcc</CODE>
 (which is available by installing Xcode on the Macintosh).</P>
<P CLASS="RBody">
<A NAME="pgfId-1257008"></A>An image saved as a dynamic library (DLL):</P>
<UL>
<LI CLASS="RBullet">
<A NAME="pgfId-1268365"></A>always runs multiprocessing, and</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-1268607"></A>may need to be shut down by <A HREF="lw-1524.htm#98485" CLASS="XRef">QuitLispWorks</A> or by a callback which uses <A HREF="lw-908.htm#24466" CLASS="XRef">dll-quit</A>.</LI>
</UL>
<P CLASS="RBody">
<A NAME="pgfId-1334863"></A><EM CLASS="Variable">
automatic-init</EM>
 specifies whether a LispWorks dynamic library  should initialize inside the call to <CODE CLASS="Code">
LoadLibrary</CODE>
 (on Microsoft Windows) or <CODE CLASS="Code">
dlopen</CODE>
 (on other platforms), or wait for further calls. Automatic initialization is useful when the dynamic library does not communicate by function calls. On Microsoft Windows it also allows <CODE CLASS="Code">
LoadLibrary</CODE>
 to succeed or fail according to whether the LispWorks dynamic library initializes successfully or not. Not using automatic initialization allows you to relocate the library if necessary using <A HREF="lw-1520.htm#65792" CLASS="XRef">InitLispWorks</A>, and do any other initialization that may be required. The default value of <EM CLASS="Variable">
automatic-init</EM>
 is <CODE CLASS="Code">
t</CODE>
 on Windows, <CODE CLASS="Code">
nil</CODE>
 on other platforms. For more information about automatic initialization in LispWorks dynamic libraries, see <A HREF="lw-216.htm#48126" CLASS="XRef">LispWorks as a dynamic library</A>.</P>
<P CLASS="RBody">
<A NAME="pgfId-1334902"></A><EM CLASS="Variable">
dll-added-files</EM>
 should be a list of filenames. It is ignored on Microsoft Windows. On other platforms if <EM CLASS="Variable">
dll-added-files</EM>
 is non-nil then a dynamic library containing each named file is saved. Each file must be of a format that the default C compiler (<CODE CLASS="Code">
scm:*c-default-compiler*</CODE>
) knows about and can incorporate into a shared library. Typically they will be C source files, but can also be assembler or object files. They must not contain exports that clash with names in the LispWorks shared library (see <A HREF="lw-1519.htm#31501" CLASS="XRef">Dynamic library C functions</A> for the predefined exports). The added files are useful to write wrappers around calls into the LispWorks dynamic library. Such wrappers are useful for:</P>
<UL>
<LI CLASS="RBullet">
<A NAME="pgfId-1334905"></A>Calling <A HREF="lw-1520.htm#65792" CLASS="XRef">InitLispWorks</A> when required, for example to relocate the LispWorks dynamic library to avoid memory clashes with other software, as described under <A HREF="lw-522.htm#37447" CLASS="XRef">Startup relocation</A>.</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-1338192"></A>Calling <A HREF="lw-1524.htm#98485" CLASS="XRef">QuitLispWorks</A> when required.</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-1334906"></A>Changing calls that involve complex C structs or even C++ objects into plain calls, because accessing C structures in Lisp requires defining the structure, while in C it only needs to include the header.</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-1334907"></A>Creating 'stub' functions that can be called from Lisp, for example for calling a C++ method. The address of the stub function can be passed to Lisp which can call it using a function defined by <CODE CLASS="Code">
fli:define-foreign-funcallable</CODE>
.</LI>
<LI CLASS="RBullet">
<A NAME="pgfId-1334908"></A>Adding code that runs automatically inside the call to <CODE CLASS="Code">
dlopen</CODE>
, by using <CODE CLASS="Code">
__attribute__ ((constructor))</CODE>
</LI>
</UL>
<P CLASS="RBody">
<A NAME="pgfId-1349897"></A><EM CLASS="Variable">
image-type </EM>
defaults to <CODE CLASS="Code">
:exe</CODE>
 or <CODE CLASS="Code">
:dll</CODE>
 according to the value of <EM CLASS="Variable">
dll-exports</EM>
 and therefore you do not normally need to supply <EM CLASS="Variable">
image-type</EM>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-1354873"></A><EM CLASS="Variable">
image-type</EM>
 <CODE CLASS="Code">
:bundle</CODE>
 is used only when saving a dynamic library. On Mac OS X it generates an object of type &quot;<A NAME="marker-1354904"></A>Mach-O bundle&quot; and is used for creating shared  libraries that will be used by applications that cannot load dylibs (FileMaker for example). It also does not force the filename extension to be <CODE CLASS="Code">
dylib</CODE>
. On other Unix-like systems <EM CLASS="Variable">
image-type</EM>
 merely has the effect of not forcing the file type of the saved image, and the format of the saved image is the same as the default. On Microsoft Windows <EM CLASS="Variable">
image-type</EM>
 <CODE CLASS="Code">
:bundle</CODE>
 is ignored.</P>
<P CLASS="RBody">
<A NAME="pgfId-1522984"></A><B CLASS="Bold">
Note:</B>
 <EM CLASS="Variable">
image-type</EM>
 <CODE CLASS="Code">
:bundle</CODE>
 is completely unrelated to the Mac OS X notion of an application bundle.</P>
<P CLASS="RBody">
<A NAME="pgfId-1522985"></A><A NAME="marker-1523031"></A>If <EM CLASS="Variable">
split</EM>
 is <CODE CLASS="Code">
nil</CODE>
 (the default), then the saved image is written as a single executable file containing the Lisp heap. If <EM CLASS="Variable">
split</EM>
 is <CODE CLASS="Code">
t</CODE>
, then the saved Lisp heap is split into a separate file, named by adding <CODE CLASS="Code">
.lwheap</CODE>
 to the name of the executable. When the executable runs, it reloads the Lisp heap from this file automatically.</P>
<P CLASS="RBody">
<A NAME="pgfId-1521884"></A>In addition, when saving LispWorks as an application bundle on the Macintosh (for example by using <A HREF="lw-768.htm#37567" CLASS="XRef">create-macos-application-bundle</A>), <EM CLASS="Variable">
split</EM>
 can be the symbol <CODE CLASS="Code">
:resources</CODE>
. This places the Lisp heap file in the <CODE CLASS="Code">
Resources</CODE>
 directory of the bundle, rather than in the <CODE CLASS="Code">
Contents/MacOS</CODE>
 directory alongside the executable, which allows the heap to be included in the signature of the bundle.</P>
<P CLASS="RBody">
<A NAME="pgfId-1521848"></A>The main use of <EM CLASS="Variable">
split</EM>
 is to allow third-party code signing to be applied to the executable, which is often not possible when saving an image with the Lisp heap included in a single file.</P>
<P CLASS="RBody">
<A NAME="pgfId-1334911"></A><EM CLASS="Variable">
restart-function</EM>
, if non-nil, specifies a function (with no arguments) to be called when the image is started. If <EM CLASS="Variable">
multiprocessing</EM>
 is true, <EM CLASS="Variable">
restart-function</EM>
 is called in a new process. <EM CLASS="Variable">
restart-function</EM>
 is called after the initialization file is loaded. The default value of <EM CLASS="Variable">
restart-function</EM>
 is <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-1217585"></A><B CLASS="Bold">
Note:</B>
 <EM CLASS="Variable">
restart-function</EM>
 is not called if the command line argument <CODE CLASS="Code">
-no-restart-function</CODE>
 is present</P>
<P CLASS="RBody">
<A NAME="pgfId-1050306"></A>When <EM CLASS="Variable">
multiprocessing</EM>
 is <CODE CLASS="Code">
nil</CODE>
, the executable image will start without multiprocessing enabled. When <EM CLASS="Variable">
multiprocessing</EM>
 is true or the image is a DLL, the image will start with multiprocessing enabled, starting processes in the list <A HREF="lw-1034.htm#18630" CLASS="XRef">*initial-processes*</A>. When <A HREF="lw-1034.htm#18630" CLASS="XRef">*initial-processes*</A> is <CODE CLASS="Code">
nil</CODE>
 or <EM CLASS="Variable">
multiprocessing</EM>
 is <CODE CLASS="Code">
:with-tty-listener</CODE>
, a TTY listener process is started as well. The default value of <EM CLASS="Variable">
multiprocessing</EM>
 is <CODE CLASS="Code">
nil</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-893344"></A><EM CLASS="Variable">
console</EM>
 is implemented only in LispWorks for Windows and LispWorks for Macintosh. The possible values for <EM CLASS="Variable">
console</EM>
 are as follows:</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893345"></A><CODE CLASS="Code">
:default</CODE>
 </P>
<P CLASS="RDescription-C">Unchanged since previous save.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893346"></A><CODE CLASS="Code">
t</CODE>
 </P>
<P CLASS="RDescription-C">On the Macintosh, the value <CODE CLASS="Code">
t</CODE>
 has the same effect as the value <CODE CLASS="Code">
:always</CODE>
.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1049617"></A>On Windows, a Console application is saved, else a Windows application is saved which creates its own console according to the other possible values.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893347"></A><CODE CLASS="Code">
:input</CODE>
, <CODE CLASS="Code">
:output</CODE>
, <CODE CLASS="Code">
:io</CODE>
 </P>
<P CLASS="RDescription-C">
<A NAME="pgfId-893852"></A>Whenever input, output or any I/O is attempted on <CODE CLASS="Code">
*terminal-io*</CODE>
.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893348"></A><CODE CLASS="Code">
:init</CODE>
 </P>
<P CLASS="RDescription-C">At startup, if input and output are not redirected</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893349"></A><CODE CLASS="Code">
:always</CODE>
 </P>
<P CLASS="RDescription-C">At startup, even if input and output are redirected.</P>
<P CLASS="RBody">
<A NAME="pgfId-893350"></A>The LispWorks for Windows and LispWorks for Macintosh images shipped have <EM CLASS="Variable">
console</EM>
 set to <CODE CLASS="Code">
:input</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-893665"></A>The possible values for <EM CLASS="Variable">
environment</EM>
 are as follows:</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893666"></A><CODE CLASS="Code">
:default</CODE>
 </P>
<P CLASS="RDescription-C">Unchanged since previous save.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893667"></A><CODE CLASS="Code">
nil</CODE>
 </P>
<P CLASS="RDescription-C">Start with just the TTY listener.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893668"></A><CODE CLASS="Code">
t</CODE>
 </P>
<P CLASS="RDescription-C">Start the environment automatically, no TTY listener.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-893669"></A><CODE CLASS="Code">
:with-tty-listener</CODE>
 </P>
<P CLASS="RDescription-C">
<A NAME="pgfId-893961"></A>Start the environment automatically, but still have a TTY listener.</P>
<P CLASS="RBody">
<A NAME="pgfId-1075997"></A>The LispWorks image shipped is saved with <CODE CLASS="Code">
:environment t</CODE>
 on all platforms except for the Motif images on Mac OS X, Solaris, HP-UX and DEC Tru64 UNIX.</P>
<P CLASS="RBody">
<A NAME="pgfId-889871"></A>You should not try to save a new image over an existing one. Always save images using a unique image name, and then, if necessary, replace the new image with the old one after the call to <CODE CLASS="Code">
save-image</CODE>
 has returned.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1527391"></A>Notes</H5>
<OL>
<LI CLASS="RStep-1">
<A NAME="pgfId-1527555"></A>Do not supply <CODE CLASS="Code">
:multiprocessing nil</CODE>
 along with a true value of <CODE CLASS="Code">
:environment t</CODE>
<EM CLASS="Variable">
.</EM>
 Multiprocessing is needed for the GUI environment.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-1638699"></A><CODE CLASS="Code">
load-image</CODE>
 checks that <A HREF="lw-943.htm#57637" CLASS="XRef">load-all-patches</A> has been called. If it is called before <A HREF="lw-943.htm#57637" CLASS="XRef">load-all-patches</A> in a session then an error is signalled.</LI>
<LI CLASS="RStep">
<A NAME="pgfId-1636890"></A>In the example build scripts below, the call to <A HREF="lw-943.htm#57637" CLASS="XRef">load-all-patches</A> is not strictly required when the script is used with the <CODE CLASS="Code">
-build</CODE>
 command line argument, because LispWorks 6.1 calls <A HREF="lw-943.htm#57637" CLASS="XRef">load-all-patches</A> automatically. However, it does no harm for the build script to call <A HREF="lw-943.htm#57637" CLASS="XRef">load-all-patches</A> too.</LI>
</OL>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1368478"></A>Compatibility note</H5>
<P CLASS="RBody">
<A NAME="pgfId-1368479"></A>LispWorks 5.0 and previous versions documented <CODE CLASS="Code">
-init</CODE>
 as the way to run LispWorks with a build script. This method is deprecated.</P>
<P CLASS="RBody">
<A NAME="pgfId-1368480"></A>Note that LispWorks quits automatically after processing a build script via <CODE CLASS="Code">
-build</CODE>
, whereas with <CODE CLASS="Code">
-init</CODE>
 you need to call <A HREF="lw-958.htm#15680" CLASS="XRef">quit</A> explicitly at the end of the build script.</P>
<P CLASS="RBody">
<A NAME="pgfId-1368484"></A>In LispWorks 5.0 and previous versions <EM CLASS="Variable">
dll-exports</EM>
 is supported only on Windows.</P>
<P CLASS="RBody">
<A NAME="pgfId-1368485"></A><EM CLASS="Variable">
dll-added-files</EM>
 and <EM CLASS="Variable">
automatic-init</EM>
 were new in LispWorks 5.1.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-889872"></A>Example</H5>
<P CLASS="RBody">
<A NAME="pgfId-892392"></A>Here is an example build script. Save this to a file such as <CODE CLASS="Code">
c:/build-my-image.lisp</CODE>
:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-892393"></A>(load-all-patches)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1042654"></A>(load &quot;my-code&quot;)</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-892903"></A>(save-image &quot;my-image&quot;)</PRE>
<P CLASS="RBody">
<A NAME="pgfId-1265883"></A>Then run LispWorks with the command line argument <CODE CLASS="Code">
-build c:/build-my-image.lisp</CODE>
 to save the image <CODE CLASS="Code">
my-image.exe</CODE>
. </P>
<P CLASS="RBody">
<A NAME="pgfId-1260133"></A>This example shows a portable build script which, on Cocoa, saves your new LispWorks image in a Mac OS X application bundle. This allows your new LispWorks for Macintosh image to be launchable from the Finder or Dock and to have its own icon or other resources:</P>
<PRE CLASS="RCode-first"><A NAME="pgfId-1267582"></A>(load-all-patches)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1267583"></A>(load &quot;my-code&quot;)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260832"></A>#+:cocoa</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260833"></A>(compile-file-if-needed</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260834"></A> (example-file </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260835"></A>  &quot;configuration/macos-application-bundle&quot;)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260836"></A> :load t)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260837"></A>(save-image </PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260838"></A> #+:cocoa</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260839"></A> (write-macos-application-bundle</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260840"></A>  &quot;/Applications/LispWorks 6.1/My LispWorks.app&quot;)</PRE>
<PRE CLASS="RCode-body"><A NAME="pgfId-1260841"></A> #-:cocoa</PRE>
<PRE CLASS="RCode-last"><A NAME="pgfId-1260842"></A> &quot;my-lispworks&quot;)</PRE>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1048871"></A>See also</H5>
<P CLASS="RBody">
<A NAME="pgfId-1048884"></A><A HREF="lw-903.htm#44253" CLASS="XRef">deliver</A><BR>
<A HREF="lw-908.htm#24466" CLASS="XRef">dll-quit</A><BR>
<A HREF="lw-1034.htm#18630" CLASS="XRef">*initial-processes*</A><BR>
<A HREF="lw-1520.htm#65792" CLASS="XRef">InitLispWorks</A><BR>
<A HREF="lw-1521.htm#87348" CLASS="XRef">LispWorksDlsym</A><BR>
<A HREF="lw-943.htm#57637" CLASS="XRef">load-all-patches</A><BR>
<A HREF="lw-958.htm#15680" CLASS="XRef">quit</A><BR>
<A HREF="lw-1524.htm#98485" CLASS="XRef">QuitLispWorks</A><BR>
<A HREF="lw-826.htm#14361" CLASS="XRef">save-current-session</A></P>
</DIV>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">LispWorks User Guide and Reference Manual - 21 Dec 2011</I></P>
<P><A HREF="lw-828.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="lw-826.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="lw-744.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="lw.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="lw-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="lw-1525.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
