<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="lw.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 10.2.1  General guidance
</TITLE>

<LINK REL="next" HREF="lw-132.htm" TYPE="text/html">
<LINK REL="prev" HREF="lw-130.htm" TYPE="text/html">
<LINK REL="up" HREF="lw-130.htm" TYPE="text/html">
<LINK REL="top" HREF="lw.htm" TYPE="text/html">
<LINK REL="contents" HREF="lw-2.htm" TYPE="text/html">
<LINK REL="index" HREF="lw-1525.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="lw.htm">LispWorks User Guide and Reference Manual</A> &gt; <A HREF="lw-128.htm">10 Storage Management</A> &gt; <A HREF="lw-130.htm">10.2  Guidance for control of the storage management system</A><BR><BR>
</DIV><A HREF="lw-132.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="lw-130.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="lw-130.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="lw.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="lw-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="lw-1525.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H3 CLASS="FM2Heading">
<A NAME="pgfId-893211"></A>10.2.1  General guidance</H3>
<P CLASS="Body">
<A NAME="pgfId-893213"></A>The storage management is designed with the intention that the programmer will have to do very little or nothing about it. In general, we believe that the design is quite successful, and in most cases you do not have to do anything. The main exception to this is dealing with long-lived data in long-lived processes in 32-bit LispWorks.</P>
<P CLASS="Body">
<A NAME="pgfId-893215"></A>Before doing anything about storage management, you should be familiar with the function <A HREF="lw-664.htm#94982" CLASS="XRef">room</A>, and use it frequently. There is no point at all in trying to tune the storage management without knowing the sizes of your application, as output by <A HREF="lw-664.htm#94982" CLASS="XRef">room</A>.</P>
<P CLASS="Body">
<A NAME="pgfId-893217"></A>The data and code in the LispWorks image can be categorized according to how long they live, as follows:</P>
<OL>
<LI CLASS="Step-1">
<A NAME="pgfId-893218"></A>Permanent data</LI>
<LI CLASS="Step">
<A NAME="pgfId-893219"></A>Long-lived data</LI>
<LI CLASS="Step">
<A NAME="pgfId-893220"></A>Short-lived data</LI>
</OL>
<P CLASS="Body">
<A NAME="pgfId-893222"></A>Note that the distinction is not in the data itself, but in the existence of pointers to it.</P>
<P CLASS="Body">
<A NAME="pgfId-893224"></A>In general, you rarely need to worry about short-lived data, and have to worry about permanent data only if you have a large amount of it. In short-lived applications you do not need to worry about long-lived data either, so there is a good chance that you do not have to worry about storage management at all.</P>
<P CLASS="Body">
<A NAME="pgfId-893226"></A>In long-lived applications, you certainly need to consider long-lived data in 32-bit LispWorks, and maybe in 64-bit LispWorks.</P>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">LispWorks User Guide and Reference Manual - 21 Dec 2011</I></P>
<P><A HREF="lw-132.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="lw-130.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="lw-130.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="lw.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="lw-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="lw-1525.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
