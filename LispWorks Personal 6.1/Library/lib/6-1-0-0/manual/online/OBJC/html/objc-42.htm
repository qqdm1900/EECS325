<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="objc.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 define-objc-method
</TITLE>

<LINK REL="next" HREF="objc-43.htm" TYPE="text/html">
<LINK REL="prev" HREF="objc-41.htm" TYPE="text/html">
<LINK REL="up" HREF="objc-33.htm" TYPE="text/html">
<LINK REL="top" HREF="objc.htm" TYPE="text/html">
<LINK REL="contents" HREF="objc-2.htm" TYPE="text/html">
<LINK REL="index" HREF="objc-92.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="objc.htm">LispWorks Objective-C and Cocoa Interface User Guide and Reference Manual</A> &gt; <A HREF="objc-33.htm">2 Objective-C Reference</A><BR><BR>
</DIV><A HREF="objc-43.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="objc-41.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="objc-33.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="objc.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="objc-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="objc-92.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H4 CLASS="REntry">
<A NAME="pgfId-1175445"></A><A NAME="19291"></A>define-objc-method<A NAME="marker-1175444"></A></H4>
<DIV>
<H5 CLASS="REntry-type">
<A NAME="pgfId-1141098"></A>Macro</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1141099"></A>Summary</H5>
<P CLASS="RBody">
<A NAME="pgfId-1141103"></A>Defines an Objective-C instance method for a specified class.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1141104"></A>Package</H5>
<P CLASS="RSignature">
<A NAME="pgfId-1141105"></A>objc</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1141263"></A>Signature</H5>
<P CLASS="RSignature">
<A NAME="pgfId-1141264"></A>define-objc-method (<EM CLASS="Variable">
name</EM>
 <EM CLASS="Variable">
result-type</EM>
 [<EM CLASS="Variable">
result-style</EM>
])<BR>
(<EM CLASS="Variable">
object-argspec</EM>
 <EM CLASS="Variable">
argspec</EM>
*) <EM CLASS="Variable">
form</EM>
*</P>
<P CLASS="RSignature">
<A NAME="pgfId-1141548"></A><EM CLASS="Variable">
object-argspec</EM>
 ::= (<EM CLASS="Variable">
object-var</EM>
 <EM CLASS="Variable">
class-name</EM>
 [<EM CLASS="Variable">
pointer-var</EM>
]))</P>
<P CLASS="RSignature">
<A NAME="pgfId-1141549"></A><EM CLASS="Variable">
argspec</EM>
 ::= (<EM CLASS="Variable">
arg-var</EM>
 <EM CLASS="Variable">
arg-type</EM>
 [<EM CLASS="Variable">
arg-style</EM>
])</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1141550"></A>Arguments</H5>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1142456"></A><EM CLASS="Variable">
name</EM>
</P>
<P CLASS="RDescription-C">A string naming the method to define.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1145378"></A><EM CLASS="Variable">
result-type</EM>
</P>
<P CLASS="RDescription-C">An Objective-C FLI type.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1145379"></A><EM CLASS="Variable">
result-style</EM>
</P>
<P CLASS="RDescription-C">An optional keyword specifying the result conversion style, either <CODE CLASS="Code">
:lisp </CODE>
or <CODE CLASS="Code">
:foreign</CODE>
, or a symbol naming a variable.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1141650"></A><EM CLASS="Variable">
object-var</EM>
</P>
<P CLASS="RDescription-C">A symbol naming a variable.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1141577"></A><EM CLASS="Variable">
class-name</EM>
</P>
<P CLASS="RDescription-C">A symbol naming a class defined with <A HREF="objc-40.htm#90461" CLASS="XRef">define-objc-class</A>.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1141592"></A><EM CLASS="Variable">
pointer-var</EM>
</P>
<P CLASS="RDescription-C">An optional symbol naming a variable.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1141597"></A><EM CLASS="Variable">
arg-var</EM>
</P>
<P CLASS="RDescription-C">A symbol naming a variable.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1141616"></A><EM CLASS="Variable">
arg-type</EM>
</P>
<P CLASS="RDescription-C">An Objective-C FLI type.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1141505"></A><EM CLASS="Variable">
arg-style</EM>
</P>
<P CLASS="RDescription-C">An optional symbol or list specifying the argument conversion style.</P>
<P CLASS="RDescription-Item">
<A NAME="pgfId-1141487"></A><EM CLASS="Variable">
form</EM>
</P>
<P CLASS="RDescription-C">A form.</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1141920"></A>Description</H5>
<P CLASS="RBody">
<A NAME="pgfId-1145670"></A>The macro <CODE CLASS="Code">
define-objc-method</CODE>
 defines the Objective-C instance method <EM CLASS="Variable">
name</EM>
 for the Objective-C classes associated with <EM CLASS="Variable">
class-name</EM>
. The <EM CLASS="Variable">
name</EM>
 should be a concatenation of the message name and its argument names, including the colons, for example <CODE CLASS="Code">
&quot;setWidth:height:&quot;</CODE>
.</P>
<P CLASS="RBody">
<A NAME="pgfId-1195537"></A>If the <A HREF="objc-40.htm#90461" CLASS="XRef">define-objc-class</A> definition of <EM CLASS="Variable">
class-name</EM>
 specifies the <CODE CLASS="Code">
(:objc-class-name </CODE>
<EM CLASS="Variable">
objc-class-name</EM>
<CODE CLASS="Code">
) </CODE>
option, then the method is added to the Objective-C class <EM CLASS="Variable">
objc-class-name</EM>
. Otherwise, the method is added to the Objective-C class of every subclass of <EM CLASS="Variable">
class-name</EM>
 that specifies the <CODE CLASS="Code">
:objc-class-name</CODE>
 option, allowing a mixin class to define methods that become part of the implementation of its subclasses (see <A HREF="objc-29.htm#38169" CLASS="XRef">Abstract classes</A>).</P>
<P CLASS="RBody">
<A NAME="pgfId-1144263"></A>When the method is invoked, each <EM CLASS="Variable">
form</EM>
 is evaluated in sequence with <EM CLASS="Variable">
object-var</EM>
 bound to the object of type <EM CLASS="Variable">
class-name</EM>
 associated with the receiver, <EM CLASS="Variable">
pointer-var</EM>
 (if specified) bound to the receiver foreign pointer and each <EM CLASS="Variable">
arg-var</EM>
 bound to the corresponding method argument.</P>
<P CLASS="RBody">
<A NAME="pgfId-1171404"></A>Each argument has an <EM CLASS="Variable">
arg-type</EM>
 (its Objective-C FLI type) and an optional <EM CLASS="Variable">
arg-style</EM>
, which specifies how the FLI value is converted to a Lisp value. If the <EM CLASS="Variable">
arg-style</EM>
 is <CODE CLASS="Code">
:foreign</CODE>
, then the <EM CLASS="Variable">
arg-var</EM>
 is bound to the FLI value of the argument (typically an integer or foreign pointer). Otherwise, the <EM CLASS="Variable">
arg-var</EM>
 is bound to a value converted according to the <EM CLASS="Variable">
arg-type</EM>
:</P>
<P CLASS="RDescription">
<A NAME="pgfId-1171405"></A><A HREF="objc-85.htm#93402" CLASS="XRef">ns-rect</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1171406"></A>If <EM CLASS="Variable">
arg-style</EM>
 is omitted or <CODE CLASS="Code">
:lisp </CODE>
then the rectangle is converted to a vector of four elements of the form <CODE CLASS="Code">
#(</CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
width</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
height</EM>
<CODE CLASS="Code">
)</CODE>
. Otherwise the argument is a foreign pointer to a <A HREF="objc-85.htm#93402" CLASS="XRef">ns-rect</A> object.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1145531"></A><A HREF="objc-86.htm#70754" CLASS="XRef">ns-size</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1144368"></A>If <EM CLASS="Variable">
arg-style</EM>
 is omitted or <CODE CLASS="Code">
:lisp </CODE>
then the size is converted to a vector of two elements of the form <CODE CLASS="Code">
#(</CODE>
<EM CLASS="Variable">
width</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
height</EM>
<CODE CLASS="Code">
)</CODE>
. Otherwise the argument is a foreign pointer to a <A HREF="objc-86.htm#70754" CLASS="XRef">ns-size</A> object.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1144369"></A><A HREF="objc-83.htm#20818" CLASS="XRef">ns-point</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1144370"></A>If <EM CLASS="Variable">
arg-style</EM>
 is omitted or <CODE CLASS="Code">
:lisp </CODE>
then the point is converted to a vector of two elements of the form <CODE CLASS="Code">
#(</CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
<CODE CLASS="Code">
)</CODE>
. Otherwise the argument is a foreign pointer to a <A HREF="objc-83.htm#20818" CLASS="XRef">ns-point</A> object.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1144371"></A><A HREF="objc-84.htm#90173" CLASS="XRef">ns-range</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1144372"></A>If <EM CLASS="Variable">
arg-style</EM>
 is omitted or <CODE CLASS="Code">
:lisp </CODE>
then the range is converted to a cons of the form <CODE CLASS="Code">
(</CODE>
<EM CLASS="Variable">
location</EM>
<CODE CLASS="Code">
 . </CODE>
<EM CLASS="Variable">
length</EM>
<CODE CLASS="Code">
)</CODE>
. Otherwise the argument is a foreign pointer to a <A HREF="objc-84.htm#90173" CLASS="XRef">ns-range</A> object.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1144375"></A><A HREF="objc-60.htm#36910" CLASS="XRef">objc-object-pointer</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1145323"></A>If <EM CLASS="Variable">
arg-style</EM>
 is the symbol <CODE CLASS="Code">
string</CODE>
 then the argument is assumed to be a pointer to an Objective-C <A NAME="marker-1186251"></A><CODE CLASS="Code">
NSString</CODE>
 object and is converted to a Lisp string or <CODE CLASS="Code">
nil</CODE>
 for a null pointer.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1175552"></A>If <EM CLASS="Variable">
arg-style</EM>
 is the symbol <CODE CLASS="Code">
array</CODE>
 then the argument is assumed to be a pointer to an Objective-C <A NAME="marker-1186317"></A><CODE CLASS="Code">
NSArray</CODE>
 object and is converted to a Lisp vector or <CODE CLASS="Code">
nil</CODE>
 for a null pointer.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1175556"></A>If <EM CLASS="Variable">
arg-style</EM>
 is the a list of the form <CODE CLASS="Code">
(array </CODE>
<EM CLASS="Variable">
elt-arg-style</EM>
<CODE CLASS="Code">
) </CODE>
then the argument is assumed to be a pointer to an Objective-C <A NAME="marker-1186324"></A><CODE CLASS="Code">
NSArray</CODE>
 object and is recursively converted to a Lisp vector using <EM CLASS="Variable">
elt-arg-style</EM>
 for the elements or <CODE CLASS="Code">
nil</CODE>
 for a null pointer.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1145350"></A>Otherwise, the argument remains as a foreign pointer to the Objective-C object.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1171701"></A><A HREF="objc-53.htm#76079" CLASS="XRef">objc-c-string</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1171702"></A>If <EM CLASS="Variable">
arg-style</EM>
 is the symbol <CODE CLASS="Code">
string</CODE>
 then the argument is assumed to be a pointer to a foreign string and is converted to a Lisp string or <CODE CLASS="Code">
nil</CODE>
 for a null pointer.</P>
<P CLASS="RBody">
<A NAME="pgfId-1144267"></A>After the last <EM CLASS="Variable">
form</EM>
 has been evaluated, its value is converted to <EM CLASS="Variable">
result-type</EM>
 according to <EM CLASS="Variable">
result-style </EM>
and becomes the result of the method.</P>
<P CLASS="RBody">
<A NAME="pgfId-1185586"></A>If <EM CLASS="Variable">
result-style </EM>
is a non-keyword symbol and the <EM CLASS="Variable">
result-type</EM>
 is a foreign structure type defined with <A HREF="objc-44.htm#38029" CLASS="XRef">define-objc-struct</A> then the variable named by <EM CLASS="Variable">
result-style</EM>
 is bound to a pointer to a foreign object of type <EM CLASS="Variable">
result-type</EM>
 while the <EM CLASS="Variable">
form</EM>
s are evaluated. The <EM CLASS="Variable">
form</EM>
s must set the slots in this foreign object to specify the result.</P>
<P CLASS="RBody">
<A NAME="pgfId-1142594"></A>If <EM CLASS="Variable">
result-style </EM>
is :<CODE CLASS="Code">
foreign</CODE>
 then the value is assumed to be suitable for conversion to <EM CLASS="Variable">
result-type</EM>
 using the normal FLI rules.</P>
<P CLASS="RBody">
<A NAME="pgfId-1185580"></A>If <EM CLASS="Variable">
result-style</EM>
 is :<CODE CLASS="Code">
lisp</CODE>
 then additional conversions are performed for specific values of <EM CLASS="Variable">
result-type</EM>
:</P>
<P CLASS="RDescription">
<A NAME="pgfId-1142740"></A><A HREF="objc-85.htm#93402" CLASS="XRef">ns-rect</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1175655"></A>If the value is a vector of four elements of the form <CODE CLASS="Code">
#(</CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
width</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
height</EM>
<CODE CLASS="Code">
)</CODE>
, the <EM CLASS="Variable">
x</EM>
, <EM CLASS="Variable">
y</EM>
, <EM CLASS="Variable">
width</EM>
 and <EM CLASS="Variable">
height</EM>
 are used to form the returned rectangle. Otherwise it is assumed to be a foreign pointer to a <A HREF="objc-85.htm#93402" CLASS="XRef">ns-rect</A> and is copied.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1175659"></A><A HREF="objc-86.htm#70754" CLASS="XRef">ns-size</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1175660"></A>If the value is a vector of two elements of the form <CODE CLASS="Code">
#(</CODE>
<EM CLASS="Variable">
width</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
height</EM>
<CODE CLASS="Code">
)</CODE>
, the <EM CLASS="Variable">
width</EM>
 and <EM CLASS="Variable">
height </EM>
are used to form the returned size. Otherwise it is assumed to be a foreign pointer to a <A HREF="objc-86.htm#70754" CLASS="XRef">ns-size</A> and is copied.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1156162"></A><A HREF="objc-83.htm#20818" CLASS="XRef">ns-point</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1143175"></A>If the value is a vector of two elements of the form <CODE CLASS="Code">
#(</CODE>
<EM CLASS="Variable">
x</EM>
<CODE CLASS="Code">
 </CODE>
<EM CLASS="Variable">
y</EM>
<CODE CLASS="Code">
)</CODE>
, the <EM CLASS="Variable">
x</EM>
 and <EM CLASS="Variable">
y</EM>
 are used to form the returned point. Otherwise it is assumed to be a foreign pointer to a <A HREF="objc-83.htm#20818" CLASS="XRef">ns-point</A> and is copied.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1143023"></A><A HREF="objc-84.htm#90173" CLASS="XRef">ns-range</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1143312"></A>If the value is a cons of the form <CODE CLASS="Code">
(</CODE>
<EM CLASS="Variable">
location</EM>
<CODE CLASS="Code">
 . </CODE>
<EM CLASS="Variable">
length</EM>
<CODE CLASS="Code">
)</CODE>
, the <EM CLASS="Variable">
location</EM>
 and <EM CLASS="Variable">
length</EM>
 are used to form the returned range. Otherwise it is assumed to be a foreign pointer to a <A HREF="objc-84.htm#90173" CLASS="XRef">ns-range</A> object and is copied.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1143613"></A><CODE CLASS="Code">
(:signed :char)</CODE>
 or <CODE CLASS="Code">
(:unsigned :char)</CODE>
</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1143891"></A>If the value is <CODE CLASS="Code">
nil</CODE>
 then <CODE CLASS="Code">
NO</CODE>
 is returned.If the value is <CODE CLASS="Code">
t</CODE>
 then <CODE CLASS="Code">
YES</CODE>
 is returned. Otherwise the value must be an appropriate integer for <EM CLASS="Variable">
result-type</EM>
.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1143615"></A><A HREF="objc-60.htm#36910" CLASS="XRef">objc-object-pointer</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1143616"></A>If the value is a string then it is converted to a newly allocated Objective-C <A NAME="marker-1186277"></A><CODE CLASS="Code">
NSString</CODE>
 object which the caller is expected to release.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1143864"></A>If the value is a vector then it is recursively converted to a newly allocated Objective-C <A NAME="marker-1186330"></A><CODE CLASS="Code">
NSArray</CODE>
 object which the caller is expected to release.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1144026"></A>If the value is <CODE CLASS="Code">
nil</CODE>
 then a null pointer is returned.</P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1144053"></A>Otherwise the value should be a foreign pointer to an Objective-C object of the appropriate class.</P>
<P CLASS="RDescription">
<A NAME="pgfId-1191718"></A><A HREF="objc-55.htm#54158" CLASS="XRef">objc-class</A></P>
<P CLASS="RDescription-C">
<A NAME="pgfId-1191719"></A>The value is coerced to a Objective-C class pointer as if by <A HREF="objc-37.htm#28261" CLASS="XRef">coerce-to-objc-class</A>. In particular, this allows strings to be returned.</P>
<P CLASS="RBody">
<A NAME="pgfId-1144194"></A>The <EM CLASS="Variable">
form</EM>
s can use functions such as <A HREF="objc-47.htm#46194" CLASS="XRef">invoke</A> to invoke other methods on the <EM CLASS="Variable">
pointer-var</EM>
. The macro <A HREF="objc-39.htm#24229" CLASS="XRef">current-super</A><CODE CLASS="Code">
 </CODE>
can be used to obtain an object that allows methods in the superclass to be invoked (like <CODE CLASS="Code">
super</CODE>
 in Objective-C).</P>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1144028"></A>Example</H5>
</DIV>
<DIV>
<H5 CLASS="REntry-head">
<A NAME="pgfId-1142420"></A>See also</H5>
<P CLASS="RBody">
<A NAME="pgfId-1142424"></A><A HREF="objc-40.htm#90461" CLASS="XRef">define-objc-class</A><BR>
<A HREF="objc-41.htm#10195" CLASS="XRef">define-objc-class-method</A><BR>
<A HREF="objc-39.htm#24229" CLASS="XRef">current-super</A><BR>
<A HREF="objc-44.htm#38029" CLASS="XRef">define-objc-struct</A></P>
</DIV>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">LispWorks Objective-C and Cocoa Interface User Guide and Reference Manual - 15 Dec 2011</I></P>
<P><A HREF="objc-43.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="objc-41.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="objc-33.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="objc.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="objc-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="objc-92.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
