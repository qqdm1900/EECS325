<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="delivery.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 9.4.1.2  Handling errors generated by the Lisp system
</TITLE>

<LINK REL="next" HREF="delivery-231.htm" TYPE="text/html">
<LINK REL="prev" HREF="delivery-229.htm" TYPE="text/html">
<LINK REL="up" HREF="delivery-228.htm" TYPE="text/html">
<LINK REL="top" HREF="delivery.htm" TYPE="text/html">
<LINK REL="contents" HREF="delivery-2.htm" TYPE="text/html">
<LINK REL="index" HREF="delivery-294.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="delivery.htm">LispWorks Delivery User Guide</A> &gt; <A HREF="delivery-211.htm">9 Delivery and Internal Systems</A> &gt; <A HREF="delivery-227.htm">9.4  Error handling in delivered applications</A> &gt; <A HREF="delivery-228.htm">9.4.1  Making the application handle errors </A><BR><BR>
</DIV><A HREF="delivery-231.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="delivery-229.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="delivery-228.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="delivery.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="delivery-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="delivery-294.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H3 CLASS="FM3Heading">
<A NAME="pgfId-855331"></A>9.4.1.2  Handling errors generated by the Lisp <A NAME="marker-855330"></A>system</H3>
<P CLASS="Body">
<A NAME="pgfId-855332"></A><A NAME="marker-857368"></A>Errors generated by the Lisp system, rather than the application domain, are a little harder to deal with. </P>
<P CLASS="Body">
<A NAME="pgfId-855333"></A>Suppose your application performs an operation upon a file. The application calls a system function to complete this operation, so when there is no error system, any errors it generates must be caught by the application itself.</P>
<P CLASS="Body">
<A NAME="pgfId-855334"></A>The best solution to this problem is to wrap an <CODE CLASS="Code">
abort</CODE>
 restart around the operation. For example: </P>
<PRE CLASS="Code-first"><A NAME="pgfId-855335"></A>(defun load-knowledge-base (name pathname)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855336"></A>  (restart-case </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855337"></A>     (internal-load-knowledge-base name pathname)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855338"></A>     (abort ()</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855339"></A>            (capi:display-message</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855340"></A>             &quot;Failed to load knowledge base &#126;a from file &#126;a&quot;</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855341"></A>             name (namestring pathname))</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-855342"></A>             nil)))</PRE>
<P CLASS="Body">
<A NAME="pgfId-855344"></A><A NAME="marker-855343"></A>Another solution would be to use a handler, as in the example below:</P>
<PRE CLASS="Code-first"><A NAME="pgfId-855345"></A>(defun my-handler (type &amp;rest args)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855346"></A>  (if (symbolp type)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855347"></A>      (apply 'capi:display-message</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855348"></A>             &quot;An error of type &#126;A occured, args &#126;A&quot;</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855349"></A>             type args)</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-855350"></A>      (apply 'capi:display-message args)))</PRE>
<P CLASS="Body">
<A NAME="pgfId-855352"></A><A NAME="marker-855351"></A>The disadvantage of this approach is that the message is unclear. </P>
<P CLASS="Body">
<A NAME="pgfId-855353"></A>In general, the application should not cause Lisp errors. Because it is difficult to ensure that these never happen, it is a good idea for the application to wrap an error handler around all its code. For example:</P>
<PRE CLASS="Code-first"><A NAME="pgfId-855354"></A>(handler-bind ((error 'application-handler-error))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855355"></A>  (loop </PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855356"></A>    (catch 'application-error</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855357"></A>        (setup-various-things)</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-855358"></A>        (do-various-things))))</PRE>
<PRE CLASS="Code-first"><A NAME="pgfId-855359"></A> (defun application-handler-error (condition)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855360"></A>  (when *application-catch-errors*</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855361"></A>      (progn (give-some-indication-of-error)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855362"></A>             (do-some-cleanup)</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-855363"></A>             (throw 'application-error nil))))</PRE>
<P CLASS="Body">
<A NAME="pgfId-855364"></A>(when <CODE CLASS="Code">
*application-catch-errors*</CODE>
 is <CODE CLASS="Code">
nil</CODE>
, this just returns and then the debugger is invoked). </P>
<P CLASS="Body">
<A NAME="pgfId-855365"></A>In addition, the areas that are more prone to errors should be dealt with specifically. For example, file access is prone to error, so it should wrapped with error handling.</P>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">LispWorks Delivery User Guide - 13 Dec 2011</I></P>
<P><A HREF="delivery-231.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="delivery-229.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="delivery-228.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="delivery.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="delivery-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="delivery-294.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
