<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"><HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
<META NAME="GENERATOR" CONTENT="Adobe FrameMaker 6.0/HTML Export Filter">
<LINK REL="STYLESHEET" HREF="delivery.css" CHARSET="ISO-8859-1" TYPE="text/css">
<TITLE>
 9.4.1.1  Handling errors generated by the application
</TITLE>

<LINK REL="next" HREF="delivery-230.htm" TYPE="text/html">
<LINK REL="prev" HREF="delivery-228.htm" TYPE="text/html">
<LINK REL="up" HREF="delivery-228.htm" TYPE="text/html">
<LINK REL="top" HREF="delivery.htm" TYPE="text/html">
<LINK REL="contents" HREF="delivery-2.htm" TYPE="text/html">
<LINK REL="index" HREF="delivery-294.htm" TYPE="text/html">
</HEAD>
<BODY BGCOLOR="#ffffff">
<DIV CLASS="HTMLBreadCrumbs"><A HREF="../../intro.htm">All Manuals</A> &gt; <A HREF="delivery.htm">LispWorks Delivery User Guide</A> &gt; <A HREF="delivery-211.htm">9 Delivery and Internal Systems</A> &gt; <A HREF="delivery-227.htm">9.4  Error handling in delivered applications</A> &gt; <A HREF="delivery-228.htm">9.4.1  Making the application handle errors </A><BR><BR>
</DIV><A HREF="delivery-230.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="delivery-228.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="delivery-228.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="delivery.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="delivery-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="delivery-294.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
<H3 CLASS="FM3Heading">
<A NAME="pgfId-855304"></A>9.4.1.1  Handling errors generated by the <A NAME="marker-855303"></A>application</H3>
<P CLASS="Body">
<A NAME="pgfId-855305"></A>Error conditions that can occur in your application domain can be handled easily enough if you define your own error handling or validation functions to trap them. For instance, you might ordinarily have the following code, which manages an error condition and makes a call to <CODE CLASS="Code">
error</CODE>
:</P>
<PRE CLASS="Code-first"><A NAME="pgfId-855306"></A> .....</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855307"></A> (let ((res (call-something)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855308"></A>   (when res</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855309"></A>     (generate-error res))</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-855310"></A> .....</PRE>
<PRE CLASS="Code-first"><A NAME="pgfId-855311"></A>(defun generate-error(res)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855312"></A>  (error 'application-error     </PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-855313"></A>         :error-number res))</PRE>
<P CLASS="Body">
<A NAME="pgfId-855314"></A>You can easily define a version of <CODE CLASS="Code">
generate-error</CODE>
 that does all the work:</P>
<PRE CLASS="Code-first"><A NAME="pgfId-855315"></A>(defun generate-error (res)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855316"></A>  (let ((action</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855317"></A>         (capi:prompt-with-list</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855318"></A>          '((&quot;Abort Operation&quot; . abort)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855319"></A>            (&quot;Retry Operation&quot; . retry)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855320"></A>            (&quot;Ignore Error&quot;)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855321"></A>            (&quot;Quit&quot; . stop-application)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855322"></A>            (&quot;Do Something Else&quot; . do-something-else))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855323"></A>          (find-error-string res)</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855324"></A>          :print-function 'first</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855325"></A>          :value-function 'rest)))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855326"></A>    (case action</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855327"></A>      ((abort retry) (invoke-restart action))</PRE>
<PRE CLASS="Code-body"><A NAME="pgfId-855328"></A>      ((nil))</PRE>
<PRE CLASS="Code-last"><A NAME="pgfId-855329"></A>      (t (funcall action)))))</PRE>
<HR>
<P CLASS="Copyrighttext-small"><I CLASS="Italic">LispWorks Delivery User Guide - 13 Dec 2011</I></P>
<P><A HREF="delivery-230.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A><A HREF="delivery-228.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Prev BORDER=0></A><A HREF="delivery-228.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A><A HREF="delivery.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A><A HREF="delivery-2.htm"><IMG ALIGN=BOTTOM SRC=contents.gif ALT=Contents BORDER=0></A><A HREF="delivery-294.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A>
</BODY>
</HTML>
