
(in-package #:cs325-user)

(defun stable-union(a b)
  (append a (stable-set-difference b a)))


(defun stable-intersection(a b)
  (cond ((null a)  nil)
        ((member (car a) b) (adjoin (car a) (stable-intersection (cdr a) b)))
        (t  (stable-intersection (cdr a) b))))


;;;Critique: Why do you think you need ADJOIN here? It adds an extra MEMBER test. What test fails without it?
;;;I thought that as for (a a b c) and (a c d), the stable-intersection would be (a c) with adjoin; If using cons instead of adjoin, the result would be (a a c). But compare to the definition of intersection.The (a a c) should be the right answer, and I should use cons instead of adjoin.It's also apply to the stable-set-difference.

(defun stable-set-difference(a b)
  (cond ((null a) nil)
        ((member (car a) b) (stable-set-difference (cdr a) b))
        (t (cons (car a) (stable-set-difference (cdr a) b)))))

