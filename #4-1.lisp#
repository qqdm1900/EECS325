(defun rotate-array (array)
  (let ((n (array-dimensions array)))
    (let ((d (car n))
          (arr (make-array n)))
        (dotimes (i d)
          (dotimes (j d)
            (setf (aref arr j (- d i 1)) (aref array i j))))
      arr)))

|*
(defun rotate-array (arr)
  (let* ((n (car (array-dimensions arr)))
         (rotated-arr (make-array (list n n))))
    (dotimes (x n)
      (dotimes (y n)
        (setf (aref rotated-arr x y) (aref arr (1- (- n y)) x))))
    rotated-arr))
*|

(defun nrotate-array (array)
  (let* ((n (car (array-dimensions array)))
         (index (1- n)))
    (dotimes (x (floor n 2))
      (dotimes (y (- index (+ (* x 2))))
        (let ((z (+ y x)))
          (rotatef (aref array (- index z) x)
                   (aref array (- index x) (- index z))
                   (aref array z (- index x))
                   (aref array x z)))))
    array))